// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: io/member/member_events.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PassKitGrpcSDK.Members {

  /// <summary>Holder for reflection information generated from io/member/member_events.proto</summary>
  public static partial class MemberEventsReflection {

    #region Descriptor
    /// <summary>File descriptor for io/member/member_events.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MemberEventsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1pby9tZW1iZXIvbWVtYmVyX2V2ZW50cy5wcm90bxIHbWVtYmVycxofZ29v",
            "Z2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90bxoYaW8vY29tbW9uL3BlcnNv",
            "bmFsLnByb3RvGi5wcm90b2MtZ2VuLW9wZW5hcGl2Mi9vcHRpb25zL2Fubm90",
            "YXRpb25zLnByb3RvIoYFCgtNZW1iZXJFdmVudBIKCgJpZBgBIAEoCRInCgZt",
            "ZW1iZXIYAiABKAsyFy5tZW1iZXJzLk1lbWJlck1pbmlubWFsEigKCWV2ZW50",
            "VHlwZRgDIAEoDjIVLm1lbWJlcnMuTWVtYmVyRXZlbnRzEg8KB2FkZHJlc3MY",
            "BCABKAkSCwoDbGF0GAUgASgBEgsKA2xvbhgGIAEoARILCgNhbHQYByABKAUS",
            "EgoKZXh0ZXJuYWxJZBgIIAEoCRIWCg5leHRlcm5hbFVzZXJJZBgJIAEoCRIY",
            "ChBleHRlcm5hbERldmljZUlkGAogASgJEhkKEWV4dGVybmFsU2VydmljZUlk",
            "GAsgASgJEjQKCG1ldGFEYXRhGAwgAygLMiIubWVtYmVycy5NZW1iZXJFdmVu",
            "dC5NZXRhRGF0YUVudHJ5Eg0KBW5vdGVzGA0gASgJEigKBGRhdGUYDiABKAsy",
            "Gi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEjUKEXJldGFpbmVkVW50aWxE",
            "YXRlGA8gASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIrCgdjcmVh",
            "dGVkGBAgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBovCg1NZXRh",
            "RGF0YUVudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAE6e5JB",
            "eAp2Kg1NZW1iZXIgRXZlbnRzMmVFdmVudHMgdGhhdCBoYXZlIGhhcHBlbmVk",
            "IGZvciBhIG1lbWJlci4gRXZlbnRzIGFyZSBnZW5lcmF0ZWQgYnkgdGhlIE1l",
            "bWJlcnNoaXAgQVBJIGFuZCBhcmUgaW1tdXRhYmxlLiKLAQoOTWVtYmVyTWlu",
            "aW5tYWwSCgoCaWQYASABKAkSEgoKZXh0ZXJuYWxJZBgCIAEoCRIaChJncm91",
            "cGluZ0lkZW50aWZpZXIYAyABKAkSDgoGdGllcklkGAQgASgJEhEKCXByb2dy",
            "YW1JZBgFIAEoCRIaCgZwZXJzb24YBiABKAsyCi5pby5QZXJzb24q/QEKDE1l",
            "bWJlckV2ZW50cxIbChdFVkVOVF9NRU1CRVJfRE9fTk9UX1VTRRAAEhsKF0VW",
            "RU5UX01FTUJFUl9DSEVDS0VEX0lOEAESHAoYRVZFTlRfTUVNQkVSX0NIRUNL",
            "RURfT1VUEAISGQoVRVZFTlRfTUVNQkVSX1ZFUklGSUVEEAMSHgoaRVZFTlRf",
            "TUVNQkVSX1BPSU5UU19FQVJORUQQBBIeChpFVkVOVF9NRU1CRVJfUE9JTlRT",
            "X0JVUk5FRBAFEhsKF0VWRU5UX01FTUJFUl9QT0lOVFNfU0VUEAYSHQoZRVZF",
            "TlRfTUVNQkVSX1RJRVJfQ0hBTkdFRBAHQmEKGGNvbS5wYXNza2l0LmdycGMu",
            "TWVtYmVyc1osc3Rhc2gucGFzc2tpdC5jb20vaW8vbW9kZWwvc2RrL2dvL2lv",
            "L21lbWJlcnOqAhZQYXNzS2l0R3JwY1NESy5NZW1iZXJzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::PassKitGrpcSDK.PersonalReflection.Descriptor, global::PassKitGrpcSDK.Gateway.ProtocGenOpenapiv2.Options.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PassKitGrpcSDK.Members.MemberEvents), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKitGrpcSDK.Members.MemberEvent), global::PassKitGrpcSDK.Members.MemberEvent.Parser, new[]{ "Id", "Member", "EventType", "Address", "Lat", "Lon", "Alt", "ExternalId", "ExternalUserId", "ExternalDeviceId", "ExternalServiceId", "MetaData", "Notes", "Date", "RetainedUntilDate", "Created" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKitGrpcSDK.Members.MemberMininmal), global::PassKitGrpcSDK.Members.MemberMininmal.Parser, new[]{ "Id", "ExternalId", "GroupingIdentifier", "TierId", "ProgramId", "Person" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum MemberEvents {
    /// <summary>
    /// Do not use
    /// </summary>
    [pbr::OriginalName("EVENT_MEMBER_DO_NOT_USE")] EventMemberDoNotUse = 0,
    /// <summary>
    /// Used when a member is checked in by the checked in endpoint
    /// </summary>
    [pbr::OriginalName("EVENT_MEMBER_CHECKED_IN")] EventMemberCheckedIn = 1,
    /// <summary>
    /// Used when a member is checked out by the checked out endpoint
    /// </summary>
    [pbr::OriginalName("EVENT_MEMBER_CHECKED_OUT")] EventMemberCheckedOut = 2,
    /// <summary>
    /// Used when a member is verified by the verify endpoint
    /// </summary>
    [pbr::OriginalName("EVENT_MEMBER_VERIFIED")] EventMemberVerified = 3,
    /// <summary>
    /// Used when points are earned by the earn points endpoints
    /// </summary>
    [pbr::OriginalName("EVENT_MEMBER_POINTS_EARNED")] EventMemberPointsEarned = 4,
    /// <summary>
    /// Used when points are added by the burn points endpoints
    /// </summary>
    [pbr::OriginalName("EVENT_MEMBER_POINTS_BURNED")] EventMemberPointsBurned = 5,
    /// <summary>
    /// Used when points are set by the set points endpoints
    /// </summary>
    [pbr::OriginalName("EVENT_MEMBER_POINTS_SET")] EventMemberPointsSet = 6,
    /// <summary>
    /// Used when points the tier is changed
    /// </summary>
    [pbr::OriginalName("EVENT_MEMBER_TIER_CHANGED")] EventMemberTierChanged = 7,
  }

  #endregion

  #region Messages
  /// <summary>
  /// The Member Event record
  /// </summary>
  public sealed partial class MemberEvent : pb::IMessage<MemberEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MemberEvent> _parser = new pb::MessageParser<MemberEvent>(() => new MemberEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemberEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKitGrpcSDK.Members.MemberEventsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberEvent(MemberEvent other) : this() {
      id_ = other.id_;
      member_ = other.member_ != null ? other.member_.Clone() : null;
      eventType_ = other.eventType_;
      address_ = other.address_;
      lat_ = other.lat_;
      lon_ = other.lon_;
      alt_ = other.alt_;
      externalId_ = other.externalId_;
      externalUserId_ = other.externalUserId_;
      externalDeviceId_ = other.externalDeviceId_;
      externalServiceId_ = other.externalServiceId_;
      metaData_ = other.metaData_.Clone();
      notes_ = other.notes_;
      date_ = other.date_ != null ? other.date_.Clone() : null;
      retainedUntilDate_ = other.retainedUntilDate_ != null ? other.retainedUntilDate_.Clone() : null;
      created_ = other.created_ != null ? other.created_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberEvent Clone() {
      return new MemberEvent(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// PassKit generated Event ID. Not writable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "member" field.</summary>
    public const int MemberFieldNumber = 2;
    private global::PassKitGrpcSDK.Members.MemberMininmal member_;
    /// <summary>
    /// Member that the event belongs to. This does not contain the full member details, only the key data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.Members.MemberMininmal Member {
      get { return member_; }
      set {
        member_ = value;
      }
    }

    /// <summary>Field number for the "eventType" field.</summary>
    public const int EventTypeFieldNumber = 3;
    private global::PassKitGrpcSDK.Members.MemberEvents eventType_ = global::PassKitGrpcSDK.Members.MemberEvents.EventMemberDoNotUse;
    /// <summary>
    /// Event type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.Members.MemberEvents EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 4;
    private string address_ = "";
    /// <summary>
    /// Address the event took place.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lat" field.</summary>
    public const int LatFieldNumber = 5;
    private double lat_;
    /// <summary>
    /// Latitude the event took place.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Lat {
      get { return lat_; }
      set {
        lat_ = value;
      }
    }

    /// <summary>Field number for the "lon" field.</summary>
    public const int LonFieldNumber = 6;
    private double lon_;
    /// <summary>
    /// Longitude the event took place.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Lon {
      get { return lon_; }
      set {
        lon_ = value;
      }
    }

    /// <summary>Field number for the "alt" field.</summary>
    public const int AltFieldNumber = 7;
    private int alt_;
    /// <summary>
    /// Altitude the event took place (in metres).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Alt {
      get { return alt_; }
      set {
        alt_ = value;
      }
    }

    /// <summary>Field number for the "externalId" field.</summary>
    public const int ExternalIdFieldNumber = 8;
    private string externalId_ = "";
    /// <summary>
    /// External unique ID of the event.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExternalId {
      get { return externalId_; }
      set {
        externalId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "externalUserId" field.</summary>
    public const int ExternalUserIdFieldNumber = 9;
    private string externalUserId_ = "";
    /// <summary>
    /// External user ID of the logged in user that captured the event (for example when using an external scanning app).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExternalUserId {
      get { return externalUserId_; }
      set {
        externalUserId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "externalDeviceId" field.</summary>
    public const int ExternalDeviceIdFieldNumber = 10;
    private string externalDeviceId_ = "";
    /// <summary>
    /// External device ID of the device that was used to capture the event (for example when using an external scanning app).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExternalDeviceId {
      get { return externalDeviceId_; }
      set {
        externalDeviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "externalServiceId" field.</summary>
    public const int ExternalServiceIdFieldNumber = 11;
    private string externalServiceId_ = "";
    /// <summary>
    /// External service ID of the service that was used for capturing the event (for example when using an external scanning app).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExternalServiceId {
      get { return externalServiceId_; }
      set {
        externalServiceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metaData" field.</summary>
    public const int MetaDataFieldNumber = 12;
    private static readonly pbc::MapField<string, string>.Codec _map_metaData_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 98);
    private readonly pbc::MapField<string, string> metaData_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Any meta data (for example gathered on scanning) that is relevant to the event (# of points earner, bill spent, device meta-data, etc).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> MetaData {
      get { return metaData_; }
    }

    /// <summary>Field number for the "notes" field.</summary>
    public const int NotesFieldNumber = 13;
    private string notes_ = "";
    /// <summary>
    /// Any relevant notes for the event.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Notes {
      get { return notes_; }
      set {
        notes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 14;
    private global::Google.Protobuf.WellKnownTypes.Timestamp date_;
    /// <summary>
    /// The event date.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Date {
      get { return date_; }
      set {
        date_ = value;
      }
    }

    /// <summary>Field number for the "retainedUntilDate" field.</summary>
    public const int RetainedUntilDateFieldNumber = 15;
    private global::Google.Protobuf.WellKnownTypes.Timestamp retainedUntilDate_;
    /// <summary>
    /// The date until the event is retained in the PassKit database.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp RetainedUntilDate {
      get { return retainedUntilDate_; }
      set {
        retainedUntilDate_ = value;
      }
    }

    /// <summary>Field number for the "created" field.</summary>
    public const int CreatedFieldNumber = 16;
    private global::Google.Protobuf.WellKnownTypes.Timestamp created_;
    /// <summary>
    /// The date the event record was created in the PassKit database.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Created {
      get { return created_; }
      set {
        created_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemberEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemberEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Member, other.Member)) return false;
      if (EventType != other.EventType) return false;
      if (Address != other.Address) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Lat, other.Lat)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Lon, other.Lon)) return false;
      if (Alt != other.Alt) return false;
      if (ExternalId != other.ExternalId) return false;
      if (ExternalUserId != other.ExternalUserId) return false;
      if (ExternalDeviceId != other.ExternalDeviceId) return false;
      if (ExternalServiceId != other.ExternalServiceId) return false;
      if (!MetaData.Equals(other.MetaData)) return false;
      if (Notes != other.Notes) return false;
      if (!object.Equals(Date, other.Date)) return false;
      if (!object.Equals(RetainedUntilDate, other.RetainedUntilDate)) return false;
      if (!object.Equals(Created, other.Created)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (member_ != null) hash ^= Member.GetHashCode();
      if (EventType != global::PassKitGrpcSDK.Members.MemberEvents.EventMemberDoNotUse) hash ^= EventType.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (Lat != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Lat);
      if (Lon != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Lon);
      if (Alt != 0) hash ^= Alt.GetHashCode();
      if (ExternalId.Length != 0) hash ^= ExternalId.GetHashCode();
      if (ExternalUserId.Length != 0) hash ^= ExternalUserId.GetHashCode();
      if (ExternalDeviceId.Length != 0) hash ^= ExternalDeviceId.GetHashCode();
      if (ExternalServiceId.Length != 0) hash ^= ExternalServiceId.GetHashCode();
      hash ^= MetaData.GetHashCode();
      if (Notes.Length != 0) hash ^= Notes.GetHashCode();
      if (date_ != null) hash ^= Date.GetHashCode();
      if (retainedUntilDate_ != null) hash ^= RetainedUntilDate.GetHashCode();
      if (created_ != null) hash ^= Created.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (member_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Member);
      }
      if (EventType != global::PassKitGrpcSDK.Members.MemberEvents.EventMemberDoNotUse) {
        output.WriteRawTag(24);
        output.WriteEnum((int) EventType);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Address);
      }
      if (Lat != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Lat);
      }
      if (Lon != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Lon);
      }
      if (Alt != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Alt);
      }
      if (ExternalId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ExternalId);
      }
      if (ExternalUserId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ExternalUserId);
      }
      if (ExternalDeviceId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ExternalDeviceId);
      }
      if (ExternalServiceId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ExternalServiceId);
      }
      metaData_.WriteTo(output, _map_metaData_codec);
      if (Notes.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Notes);
      }
      if (date_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Date);
      }
      if (retainedUntilDate_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(RetainedUntilDate);
      }
      if (created_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Created);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (member_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Member);
      }
      if (EventType != global::PassKitGrpcSDK.Members.MemberEvents.EventMemberDoNotUse) {
        output.WriteRawTag(24);
        output.WriteEnum((int) EventType);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Address);
      }
      if (Lat != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Lat);
      }
      if (Lon != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Lon);
      }
      if (Alt != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Alt);
      }
      if (ExternalId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ExternalId);
      }
      if (ExternalUserId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ExternalUserId);
      }
      if (ExternalDeviceId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ExternalDeviceId);
      }
      if (ExternalServiceId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ExternalServiceId);
      }
      metaData_.WriteTo(ref output, _map_metaData_codec);
      if (Notes.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Notes);
      }
      if (date_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Date);
      }
      if (retainedUntilDate_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(RetainedUntilDate);
      }
      if (created_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Created);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (member_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Member);
      }
      if (EventType != global::PassKitGrpcSDK.Members.MemberEvents.EventMemberDoNotUse) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Lat != 0D) {
        size += 1 + 8;
      }
      if (Lon != 0D) {
        size += 1 + 8;
      }
      if (Alt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Alt);
      }
      if (ExternalId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExternalId);
      }
      if (ExternalUserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExternalUserId);
      }
      if (ExternalDeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExternalDeviceId);
      }
      if (ExternalServiceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExternalServiceId);
      }
      size += metaData_.CalculateSize(_map_metaData_codec);
      if (Notes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Notes);
      }
      if (date_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Date);
      }
      if (retainedUntilDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RetainedUntilDate);
      }
      if (created_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Created);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemberEvent other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.member_ != null) {
        if (member_ == null) {
          Member = new global::PassKitGrpcSDK.Members.MemberMininmal();
        }
        Member.MergeFrom(other.Member);
      }
      if (other.EventType != global::PassKitGrpcSDK.Members.MemberEvents.EventMemberDoNotUse) {
        EventType = other.EventType;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.Lat != 0D) {
        Lat = other.Lat;
      }
      if (other.Lon != 0D) {
        Lon = other.Lon;
      }
      if (other.Alt != 0) {
        Alt = other.Alt;
      }
      if (other.ExternalId.Length != 0) {
        ExternalId = other.ExternalId;
      }
      if (other.ExternalUserId.Length != 0) {
        ExternalUserId = other.ExternalUserId;
      }
      if (other.ExternalDeviceId.Length != 0) {
        ExternalDeviceId = other.ExternalDeviceId;
      }
      if (other.ExternalServiceId.Length != 0) {
        ExternalServiceId = other.ExternalServiceId;
      }
      metaData_.Add(other.metaData_);
      if (other.Notes.Length != 0) {
        Notes = other.Notes;
      }
      if (other.date_ != null) {
        if (date_ == null) {
          Date = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Date.MergeFrom(other.Date);
      }
      if (other.retainedUntilDate_ != null) {
        if (retainedUntilDate_ == null) {
          RetainedUntilDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        RetainedUntilDate.MergeFrom(other.RetainedUntilDate);
      }
      if (other.created_ != null) {
        if (created_ == null) {
          Created = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Created.MergeFrom(other.Created);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (member_ == null) {
              Member = new global::PassKitGrpcSDK.Members.MemberMininmal();
            }
            input.ReadMessage(Member);
            break;
          }
          case 24: {
            EventType = (global::PassKitGrpcSDK.Members.MemberEvents) input.ReadEnum();
            break;
          }
          case 34: {
            Address = input.ReadString();
            break;
          }
          case 41: {
            Lat = input.ReadDouble();
            break;
          }
          case 49: {
            Lon = input.ReadDouble();
            break;
          }
          case 56: {
            Alt = input.ReadInt32();
            break;
          }
          case 66: {
            ExternalId = input.ReadString();
            break;
          }
          case 74: {
            ExternalUserId = input.ReadString();
            break;
          }
          case 82: {
            ExternalDeviceId = input.ReadString();
            break;
          }
          case 90: {
            ExternalServiceId = input.ReadString();
            break;
          }
          case 98: {
            metaData_.AddEntriesFrom(input, _map_metaData_codec);
            break;
          }
          case 106: {
            Notes = input.ReadString();
            break;
          }
          case 114: {
            if (date_ == null) {
              Date = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Date);
            break;
          }
          case 122: {
            if (retainedUntilDate_ == null) {
              RetainedUntilDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(RetainedUntilDate);
            break;
          }
          case 130: {
            if (created_ == null) {
              Created = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Created);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (member_ == null) {
              Member = new global::PassKitGrpcSDK.Members.MemberMininmal();
            }
            input.ReadMessage(Member);
            break;
          }
          case 24: {
            EventType = (global::PassKitGrpcSDK.Members.MemberEvents) input.ReadEnum();
            break;
          }
          case 34: {
            Address = input.ReadString();
            break;
          }
          case 41: {
            Lat = input.ReadDouble();
            break;
          }
          case 49: {
            Lon = input.ReadDouble();
            break;
          }
          case 56: {
            Alt = input.ReadInt32();
            break;
          }
          case 66: {
            ExternalId = input.ReadString();
            break;
          }
          case 74: {
            ExternalUserId = input.ReadString();
            break;
          }
          case 82: {
            ExternalDeviceId = input.ReadString();
            break;
          }
          case 90: {
            ExternalServiceId = input.ReadString();
            break;
          }
          case 98: {
            metaData_.AddEntriesFrom(ref input, _map_metaData_codec);
            break;
          }
          case 106: {
            Notes = input.ReadString();
            break;
          }
          case 114: {
            if (date_ == null) {
              Date = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Date);
            break;
          }
          case 122: {
            if (retainedUntilDate_ == null) {
              RetainedUntilDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(RetainedUntilDate);
            break;
          }
          case 130: {
            if (created_ == null) {
              Created = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Created);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MemberMininmal : pb::IMessage<MemberMininmal>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MemberMininmal> _parser = new pb::MessageParser<MemberMininmal>(() => new MemberMininmal());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemberMininmal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKitGrpcSDK.Members.MemberEventsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberMininmal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberMininmal(MemberMininmal other) : this() {
      id_ = other.id_;
      externalId_ = other.externalId_;
      groupingIdentifier_ = other.groupingIdentifier_;
      tierId_ = other.tierId_;
      programId_ = other.programId_;
      person_ = other.person_ != null ? other.person_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberMininmal Clone() {
      return new MemberMininmal(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// Id assigned by PassKit to represent the member record. It will be used as the serial number in Apple Wallet and as the Object identifier for Google Wallet. This field is not writable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "externalId" field.</summary>
    public const int ExternalIdFieldNumber = 2;
    private string externalId_ = "";
    /// <summary>
    /// This can be used to set the 'external' ID of the member (i.e. the member ID as it's being used in your system). If provided then this can be used to query &amp; update members. This field will be treated as unique within the program, and cannot be updated at a later stage.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExternalId {
      get { return externalId_; }
      set {
        externalId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "groupingIdentifier" field.</summary>
    public const int GroupingIdentifierFieldNumber = 3;
    private string groupingIdentifier_ = "";
    /// <summary>
    /// Grouping Identifier can be used to group members under the same membership (i.e. couple).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupingIdentifier {
      get { return groupingIdentifier_; }
      set {
        groupingIdentifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tierId" field.</summary>
    public const int TierIdFieldNumber = 4;
    private string tierId_ = "";
    /// <summary>
    /// Indicates the ID of the tier this member is in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TierId {
      get { return tierId_; }
      set {
        tierId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "programId" field.</summary>
    public const int ProgramIdFieldNumber = 5;
    private string programId_ = "";
    /// <summary>
    /// Indicates the ID of the program this member is in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProgramId {
      get { return programId_; }
      set {
        programId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "person" field.</summary>
    public const int PersonFieldNumber = 6;
    private global::PassKitGrpcSDK.Person person_;
    /// <summary>
    /// Personal details of the member.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.Person Person {
      get { return person_; }
      set {
        person_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemberMininmal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemberMininmal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ExternalId != other.ExternalId) return false;
      if (GroupingIdentifier != other.GroupingIdentifier) return false;
      if (TierId != other.TierId) return false;
      if (ProgramId != other.ProgramId) return false;
      if (!object.Equals(Person, other.Person)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (ExternalId.Length != 0) hash ^= ExternalId.GetHashCode();
      if (GroupingIdentifier.Length != 0) hash ^= GroupingIdentifier.GetHashCode();
      if (TierId.Length != 0) hash ^= TierId.GetHashCode();
      if (ProgramId.Length != 0) hash ^= ProgramId.GetHashCode();
      if (person_ != null) hash ^= Person.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (ExternalId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ExternalId);
      }
      if (GroupingIdentifier.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GroupingIdentifier);
      }
      if (TierId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TierId);
      }
      if (ProgramId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ProgramId);
      }
      if (person_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Person);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (ExternalId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ExternalId);
      }
      if (GroupingIdentifier.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GroupingIdentifier);
      }
      if (TierId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TierId);
      }
      if (ProgramId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ProgramId);
      }
      if (person_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Person);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (ExternalId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExternalId);
      }
      if (GroupingIdentifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupingIdentifier);
      }
      if (TierId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TierId);
      }
      if (ProgramId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProgramId);
      }
      if (person_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Person);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemberMininmal other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.ExternalId.Length != 0) {
        ExternalId = other.ExternalId;
      }
      if (other.GroupingIdentifier.Length != 0) {
        GroupingIdentifier = other.GroupingIdentifier;
      }
      if (other.TierId.Length != 0) {
        TierId = other.TierId;
      }
      if (other.ProgramId.Length != 0) {
        ProgramId = other.ProgramId;
      }
      if (other.person_ != null) {
        if (person_ == null) {
          Person = new global::PassKitGrpcSDK.Person();
        }
        Person.MergeFrom(other.Person);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            ExternalId = input.ReadString();
            break;
          }
          case 26: {
            GroupingIdentifier = input.ReadString();
            break;
          }
          case 34: {
            TierId = input.ReadString();
            break;
          }
          case 42: {
            ProgramId = input.ReadString();
            break;
          }
          case 50: {
            if (person_ == null) {
              Person = new global::PassKitGrpcSDK.Person();
            }
            input.ReadMessage(Person);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            ExternalId = input.ReadString();
            break;
          }
          case 26: {
            GroupingIdentifier = input.ReadString();
            break;
          }
          case 34: {
            TierId = input.ReadString();
            break;
          }
          case 42: {
            ProgramId = input.ReadString();
            break;
          }
          case 50: {
            if (person_ == null) {
              Person = new global::PassKitGrpcSDK.Person();
            }
            input.ReadMessage(Person);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
