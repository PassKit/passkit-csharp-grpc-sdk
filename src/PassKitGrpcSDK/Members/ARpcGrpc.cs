// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: io/member/a_rpc.proto
// </auto-generated>
// Original file comments:
// *
// Members RPC
//
// The PassKit Members API lets you manage your membership programs and passes for Apple Wallet and Google Pay.
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace PassKitGrpcSDK.Members {
  public static partial class Members
  {
    static readonly string __ServiceName = "members.Members";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::PassKitGrpcSDK.Members.Program> __Marshaller_members_Program = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PassKitGrpcSDK.Members.Program.Parser));
    static readonly grpc::Marshaller<global::PassKitGrpcSDK.Id> __Marshaller_io_Id = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PassKitGrpcSDK.Id.Parser));
    static readonly grpc::Marshaller<global::PassKitGrpcSDK.Members.ProgramCopyRequest> __Marshaller_members_ProgramCopyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PassKitGrpcSDK.Members.ProgramCopyRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    static readonly grpc::Marshaller<global::PassKitGrpcSDK.Pagination> __Marshaller_io_Pagination = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PassKitGrpcSDK.Pagination.Parser));
    static readonly grpc::Marshaller<global::PassKitGrpcSDK.Filters> __Marshaller_io_Filters = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PassKitGrpcSDK.Filters.Parser));
    static readonly grpc::Marshaller<global::PassKitGrpcSDK.Members.Tier> __Marshaller_members_Tier = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PassKitGrpcSDK.Members.Tier.Parser));
    static readonly grpc::Marshaller<global::PassKitGrpcSDK.Members.TierRequestInput> __Marshaller_members_TierRequestInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PassKitGrpcSDK.Members.TierRequestInput.Parser));
    static readonly grpc::Marshaller<global::PassKitGrpcSDK.Members.ListRequestDeprecated> __Marshaller_members_ListRequestDeprecated = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PassKitGrpcSDK.Members.ListRequestDeprecated.Parser));
    static readonly grpc::Marshaller<global::PassKitGrpcSDK.Members.ListRequest> __Marshaller_members_ListRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PassKitGrpcSDK.Members.ListRequest.Parser));
    static readonly grpc::Marshaller<global::PassKitGrpcSDK.Members.Member> __Marshaller_members_Member = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PassKitGrpcSDK.Members.Member.Parser));
    static readonly grpc::Marshaller<global::PassKitGrpcSDK.Members.MemberRecordByExternalIdRequest> __Marshaller_members_MemberRecordByExternalIdRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PassKitGrpcSDK.Members.MemberRecordByExternalIdRequest.Parser));
    static readonly grpc::Marshaller<global::PassKitGrpcSDK.Members.MemberCheckInOutRequest> __Marshaller_members_MemberCheckInOutRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PassKitGrpcSDK.Members.MemberCheckInOutRequest.Parser));
    static readonly grpc::Marshaller<global::PassKitGrpcSDK.Members.MemberEvent> __Marshaller_members_MemberEvent = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PassKitGrpcSDK.Members.MemberEvent.Parser));
    static readonly grpc::Marshaller<global::PassKitGrpcSDK.Members.EarnBurnPointsRequest> __Marshaller_members_EarnBurnPointsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PassKitGrpcSDK.Members.EarnBurnPointsRequest.Parser));
    static readonly grpc::Marshaller<global::PassKitGrpcSDK.Members.MemberPoints> __Marshaller_members_MemberPoints = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PassKitGrpcSDK.Members.MemberPoints.Parser));
    static readonly grpc::Marshaller<global::PassKitGrpcSDK.Members.SetPointsRequest> __Marshaller_members_SetPointsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PassKitGrpcSDK.Members.SetPointsRequest.Parser));
    static readonly grpc::Marshaller<global::PassKitGrpcSDK.Members.ChangeTierRequest> __Marshaller_members_ChangeTierRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PassKitGrpcSDK.Members.ChangeTierRequest.Parser));
    static readonly grpc::Marshaller<global::PassKitGrpcSDK.Members.MemberSegmentRequest> __Marshaller_members_MemberSegmentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PassKitGrpcSDK.Members.MemberSegmentRequest.Parser));
    static readonly grpc::Marshaller<global::PassKitGrpcSDK.Count> __Marshaller_io_Count = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PassKitGrpcSDK.Count.Parser));
    static readonly grpc::Marshaller<global::PassKitGrpcSDK.Message> __Marshaller_io_Message = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PassKitGrpcSDK.Message.Parser));
    static readonly grpc::Marshaller<global::PassKitGrpcSDK.Strings> __Marshaller_io_Strings = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PassKitGrpcSDK.Strings.Parser));
    static readonly grpc::Marshaller<global::PassKitGrpcSDK.Members.UpdateExpiryRequest> __Marshaller_members_UpdateExpiryRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PassKitGrpcSDK.Members.UpdateExpiryRequest.Parser));
    static readonly grpc::Marshaller<global::PassKitGrpcSDK.Members.MemberExpiry> __Marshaller_members_MemberExpiry = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PassKitGrpcSDK.Members.MemberExpiry.Parser));
    static readonly grpc::Marshaller<global::PassKitGrpcSDK.PersonRequest> __Marshaller_io_PersonRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PassKitGrpcSDK.PersonRequest.Parser));
    static readonly grpc::Marshaller<global::PassKitGrpcSDK.EnrolmentUrls> __Marshaller_io_EnrolmentUrls = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::PassKitGrpcSDK.EnrolmentUrls.Parser));

    static readonly grpc::Method<global::PassKitGrpcSDK.Members.Program, global::PassKitGrpcSDK.Id> __Method_createProgram = new grpc::Method<global::PassKitGrpcSDK.Members.Program, global::PassKitGrpcSDK.Id>(
        grpc::MethodType.Unary,
        __ServiceName,
        "createProgram",
        __Marshaller_members_Program,
        __Marshaller_io_Id);

    static readonly grpc::Method<global::PassKitGrpcSDK.Members.Program, global::PassKitGrpcSDK.Members.Program> __Method_updateProgram = new grpc::Method<global::PassKitGrpcSDK.Members.Program, global::PassKitGrpcSDK.Members.Program>(
        grpc::MethodType.Unary,
        __ServiceName,
        "updateProgram",
        __Marshaller_members_Program,
        __Marshaller_members_Program);

    static readonly grpc::Method<global::PassKitGrpcSDK.Id, global::PassKitGrpcSDK.Members.Program> __Method_getProgram = new grpc::Method<global::PassKitGrpcSDK.Id, global::PassKitGrpcSDK.Members.Program>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getProgram",
        __Marshaller_io_Id,
        __Marshaller_members_Program);

    static readonly grpc::Method<global::PassKitGrpcSDK.Members.ProgramCopyRequest, global::PassKitGrpcSDK.Id> __Method_copyProgram = new grpc::Method<global::PassKitGrpcSDK.Members.ProgramCopyRequest, global::PassKitGrpcSDK.Id>(
        grpc::MethodType.Unary,
        __ServiceName,
        "copyProgram",
        __Marshaller_members_ProgramCopyRequest,
        __Marshaller_io_Id);

    static readonly grpc::Method<global::PassKitGrpcSDK.Id, global::Google.Protobuf.WellKnownTypes.Empty> __Method_deleteProgram = new grpc::Method<global::PassKitGrpcSDK.Id, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "deleteProgram",
        __Marshaller_io_Id,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::PassKitGrpcSDK.Pagination, global::PassKitGrpcSDK.Members.Program> __Method_listProgramsDeprecated = new grpc::Method<global::PassKitGrpcSDK.Pagination, global::PassKitGrpcSDK.Members.Program>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "listProgramsDeprecated",
        __Marshaller_io_Pagination,
        __Marshaller_members_Program);

    static readonly grpc::Method<global::PassKitGrpcSDK.Filters, global::PassKitGrpcSDK.Members.Program> __Method_listPrograms = new grpc::Method<global::PassKitGrpcSDK.Filters, global::PassKitGrpcSDK.Members.Program>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "listPrograms",
        __Marshaller_io_Filters,
        __Marshaller_members_Program);

    static readonly grpc::Method<global::PassKitGrpcSDK.Members.Tier, global::PassKitGrpcSDK.Id> __Method_createTier = new grpc::Method<global::PassKitGrpcSDK.Members.Tier, global::PassKitGrpcSDK.Id>(
        grpc::MethodType.Unary,
        __ServiceName,
        "createTier",
        __Marshaller_members_Tier,
        __Marshaller_io_Id);

    static readonly grpc::Method<global::PassKitGrpcSDK.Members.Tier, global::PassKitGrpcSDK.Members.Tier> __Method_updateTier = new grpc::Method<global::PassKitGrpcSDK.Members.Tier, global::PassKitGrpcSDK.Members.Tier>(
        grpc::MethodType.Unary,
        __ServiceName,
        "updateTier",
        __Marshaller_members_Tier,
        __Marshaller_members_Tier);

    static readonly grpc::Method<global::PassKitGrpcSDK.Members.TierRequestInput, global::PassKitGrpcSDK.Members.Tier> __Method_getTier = new grpc::Method<global::PassKitGrpcSDK.Members.TierRequestInput, global::PassKitGrpcSDK.Members.Tier>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getTier",
        __Marshaller_members_TierRequestInput,
        __Marshaller_members_Tier);

    static readonly grpc::Method<global::PassKitGrpcSDK.Members.TierRequestInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_deleteTier = new grpc::Method<global::PassKitGrpcSDK.Members.TierRequestInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "deleteTier",
        __Marshaller_members_TierRequestInput,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::PassKitGrpcSDK.Members.ListRequestDeprecated, global::PassKitGrpcSDK.Members.Tier> __Method_listTiersDeprecated = new grpc::Method<global::PassKitGrpcSDK.Members.ListRequestDeprecated, global::PassKitGrpcSDK.Members.Tier>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "listTiersDeprecated",
        __Marshaller_members_ListRequestDeprecated,
        __Marshaller_members_Tier);

    static readonly grpc::Method<global::PassKitGrpcSDK.Members.ListRequest, global::PassKitGrpcSDK.Members.Tier> __Method_listTiers = new grpc::Method<global::PassKitGrpcSDK.Members.ListRequest, global::PassKitGrpcSDK.Members.Tier>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "listTiers",
        __Marshaller_members_ListRequest,
        __Marshaller_members_Tier);

    static readonly grpc::Method<global::PassKitGrpcSDK.Members.Member, global::PassKitGrpcSDK.Id> __Method_enrolMember = new grpc::Method<global::PassKitGrpcSDK.Members.Member, global::PassKitGrpcSDK.Id>(
        grpc::MethodType.Unary,
        __ServiceName,
        "enrolMember",
        __Marshaller_members_Member,
        __Marshaller_io_Id);

    static readonly grpc::Method<global::PassKitGrpcSDK.Members.Member, global::PassKitGrpcSDK.Id> __Method_enrolMemberPublic = new grpc::Method<global::PassKitGrpcSDK.Members.Member, global::PassKitGrpcSDK.Id>(
        grpc::MethodType.Unary,
        __ServiceName,
        "enrolMemberPublic",
        __Marshaller_members_Member,
        __Marshaller_io_Id);

    static readonly grpc::Method<global::PassKitGrpcSDK.Id, global::PassKitGrpcSDK.Members.Member> __Method_getMemberRecordById = new grpc::Method<global::PassKitGrpcSDK.Id, global::PassKitGrpcSDK.Members.Member>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getMemberRecordById",
        __Marshaller_io_Id,
        __Marshaller_members_Member);

    static readonly grpc::Method<global::PassKitGrpcSDK.Members.MemberRecordByExternalIdRequest, global::PassKitGrpcSDK.Members.Member> __Method_getMemberRecordByExternalId = new grpc::Method<global::PassKitGrpcSDK.Members.MemberRecordByExternalIdRequest, global::PassKitGrpcSDK.Members.Member>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getMemberRecordByExternalId",
        __Marshaller_members_MemberRecordByExternalIdRequest,
        __Marshaller_members_Member);

    static readonly grpc::Method<global::PassKitGrpcSDK.Members.MemberCheckInOutRequest, global::PassKitGrpcSDK.Members.MemberEvent> __Method_checkInMember = new grpc::Method<global::PassKitGrpcSDK.Members.MemberCheckInOutRequest, global::PassKitGrpcSDK.Members.MemberEvent>(
        grpc::MethodType.Unary,
        __ServiceName,
        "checkInMember",
        __Marshaller_members_MemberCheckInOutRequest,
        __Marshaller_members_MemberEvent);

    static readonly grpc::Method<global::PassKitGrpcSDK.Members.MemberCheckInOutRequest, global::PassKitGrpcSDK.Members.MemberEvent> __Method_checkOutMember = new grpc::Method<global::PassKitGrpcSDK.Members.MemberCheckInOutRequest, global::PassKitGrpcSDK.Members.MemberEvent>(
        grpc::MethodType.Unary,
        __ServiceName,
        "checkOutMember",
        __Marshaller_members_MemberCheckInOutRequest,
        __Marshaller_members_MemberEvent);

    static readonly grpc::Method<global::PassKitGrpcSDK.Members.ListRequestDeprecated, global::PassKitGrpcSDK.Members.Member> __Method_listMembersDeprecated = new grpc::Method<global::PassKitGrpcSDK.Members.ListRequestDeprecated, global::PassKitGrpcSDK.Members.Member>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "listMembersDeprecated",
        __Marshaller_members_ListRequestDeprecated,
        __Marshaller_members_Member);

    static readonly grpc::Method<global::PassKitGrpcSDK.Members.ListRequest, global::PassKitGrpcSDK.Members.Member> __Method_listMembers = new grpc::Method<global::PassKitGrpcSDK.Members.ListRequest, global::PassKitGrpcSDK.Members.Member>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "listMembers",
        __Marshaller_members_ListRequest,
        __Marshaller_members_Member);

    static readonly grpc::Method<global::PassKitGrpcSDK.Members.Member, global::PassKitGrpcSDK.Id> __Method_updateMember = new grpc::Method<global::PassKitGrpcSDK.Members.Member, global::PassKitGrpcSDK.Id>(
        grpc::MethodType.Unary,
        __ServiceName,
        "updateMember",
        __Marshaller_members_Member,
        __Marshaller_io_Id);

    static readonly grpc::Method<global::PassKitGrpcSDK.Members.EarnBurnPointsRequest, global::PassKitGrpcSDK.Members.MemberPoints> __Method_earnPoints = new grpc::Method<global::PassKitGrpcSDK.Members.EarnBurnPointsRequest, global::PassKitGrpcSDK.Members.MemberPoints>(
        grpc::MethodType.Unary,
        __ServiceName,
        "earnPoints",
        __Marshaller_members_EarnBurnPointsRequest,
        __Marshaller_members_MemberPoints);

    static readonly grpc::Method<global::PassKitGrpcSDK.Members.EarnBurnPointsRequest, global::PassKitGrpcSDK.Members.MemberPoints> __Method_burnPoints = new grpc::Method<global::PassKitGrpcSDK.Members.EarnBurnPointsRequest, global::PassKitGrpcSDK.Members.MemberPoints>(
        grpc::MethodType.Unary,
        __ServiceName,
        "burnPoints",
        __Marshaller_members_EarnBurnPointsRequest,
        __Marshaller_members_MemberPoints);

    static readonly grpc::Method<global::PassKitGrpcSDK.Members.SetPointsRequest, global::PassKitGrpcSDK.Members.MemberPoints> __Method_setPoints = new grpc::Method<global::PassKitGrpcSDK.Members.SetPointsRequest, global::PassKitGrpcSDK.Members.MemberPoints>(
        grpc::MethodType.Unary,
        __ServiceName,
        "setPoints",
        __Marshaller_members_SetPointsRequest,
        __Marshaller_members_MemberPoints);

    static readonly grpc::Method<global::PassKitGrpcSDK.Members.ChangeTierRequest, global::PassKitGrpcSDK.Members.MemberEvent> __Method_changeMemberTier = new grpc::Method<global::PassKitGrpcSDK.Members.ChangeTierRequest, global::PassKitGrpcSDK.Members.MemberEvent>(
        grpc::MethodType.Unary,
        __ServiceName,
        "changeMemberTier",
        __Marshaller_members_ChangeTierRequest,
        __Marshaller_members_MemberEvent);

    static readonly grpc::Method<global::PassKitGrpcSDK.Members.MemberSegmentRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_updateMembersBySegment = new grpc::Method<global::PassKitGrpcSDK.Members.MemberSegmentRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "updateMembersBySegment",
        __Marshaller_members_MemberSegmentRequest,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::PassKitGrpcSDK.Members.MemberSegmentRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_deleteMembersBySegment = new grpc::Method<global::PassKitGrpcSDK.Members.MemberSegmentRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "deleteMembersBySegment",
        __Marshaller_members_MemberSegmentRequest,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::PassKitGrpcSDK.Members.Member, global::Google.Protobuf.WellKnownTypes.Empty> __Method_deleteMember = new grpc::Method<global::PassKitGrpcSDK.Members.Member, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "deleteMember",
        __Marshaller_members_Member,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::PassKitGrpcSDK.Members.ListRequestDeprecated, global::PassKitGrpcSDK.Count> __Method_countMembersDeprecated = new grpc::Method<global::PassKitGrpcSDK.Members.ListRequestDeprecated, global::PassKitGrpcSDK.Count>(
        grpc::MethodType.Unary,
        __ServiceName,
        "countMembersDeprecated",
        __Marshaller_members_ListRequestDeprecated,
        __Marshaller_io_Count);

    static readonly grpc::Method<global::PassKitGrpcSDK.Members.ListRequest, global::PassKitGrpcSDK.Count> __Method_countMembers = new grpc::Method<global::PassKitGrpcSDK.Members.ListRequest, global::PassKitGrpcSDK.Count>(
        grpc::MethodType.Unary,
        __ServiceName,
        "countMembers",
        __Marshaller_members_ListRequest,
        __Marshaller_io_Count);

    static readonly grpc::Method<global::PassKitGrpcSDK.Pagination, global::PassKitGrpcSDK.Message> __Method_getMessageHistoryForMember = new grpc::Method<global::PassKitGrpcSDK.Pagination, global::PassKitGrpcSDK.Message>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "getMessageHistoryForMember",
        __Marshaller_io_Pagination,
        __Marshaller_io_Message);

    static readonly grpc::Method<global::PassKitGrpcSDK.Id, global::PassKitGrpcSDK.Strings> __Method_getMetaKeysForProgram = new grpc::Method<global::PassKitGrpcSDK.Id, global::PassKitGrpcSDK.Strings>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getMetaKeysForProgram",
        __Marshaller_io_Id,
        __Marshaller_io_Strings);

    static readonly grpc::Method<global::PassKitGrpcSDK.Members.UpdateExpiryRequest, global::PassKitGrpcSDK.Count> __Method_renewMembersExpiry = new grpc::Method<global::PassKitGrpcSDK.Members.UpdateExpiryRequest, global::PassKitGrpcSDK.Count>(
        grpc::MethodType.Unary,
        __ServiceName,
        "renewMembersExpiry",
        __Marshaller_members_UpdateExpiryRequest,
        __Marshaller_io_Count);

    static readonly grpc::Method<global::PassKitGrpcSDK.Members.MemberExpiry, global::PassKitGrpcSDK.Id> __Method_updateMemberExpiry = new grpc::Method<global::PassKitGrpcSDK.Members.MemberExpiry, global::PassKitGrpcSDK.Id>(
        grpc::MethodType.Unary,
        __ServiceName,
        "updateMemberExpiry",
        __Marshaller_members_MemberExpiry,
        __Marshaller_io_Id);

    static readonly grpc::Method<global::PassKitGrpcSDK.PersonRequest, global::PassKitGrpcSDK.Id> __Method_patchPerson = new grpc::Method<global::PassKitGrpcSDK.PersonRequest, global::PassKitGrpcSDK.Id>(
        grpc::MethodType.Unary,
        __ServiceName,
        "patchPerson",
        __Marshaller_io_PersonRequest,
        __Marshaller_io_Id);

    static readonly grpc::Method<global::PassKitGrpcSDK.Members.ListRequest, global::PassKitGrpcSDK.Count> __Method_countMemberEvents = new grpc::Method<global::PassKitGrpcSDK.Members.ListRequest, global::PassKitGrpcSDK.Count>(
        grpc::MethodType.Unary,
        __ServiceName,
        "countMemberEvents",
        __Marshaller_members_ListRequest,
        __Marshaller_io_Count);

    static readonly grpc::Method<global::PassKitGrpcSDK.Members.ListRequest, global::PassKitGrpcSDK.Members.MemberEvent> __Method_listMemberEvents = new grpc::Method<global::PassKitGrpcSDK.Members.ListRequest, global::PassKitGrpcSDK.Members.MemberEvent>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "listMemberEvents",
        __Marshaller_members_ListRequest,
        __Marshaller_members_MemberEvent);

    static readonly grpc::Method<global::PassKitGrpcSDK.Id, global::PassKitGrpcSDK.Strings> __Method_getMemberEventMetaKeysForProgram = new grpc::Method<global::PassKitGrpcSDK.Id, global::PassKitGrpcSDK.Strings>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getMemberEventMetaKeysForProgram",
        __Marshaller_io_Id,
        __Marshaller_io_Strings);

    static readonly grpc::Method<global::PassKitGrpcSDK.Id, global::PassKitGrpcSDK.Members.MemberEvent> __Method_listEventsForMember = new grpc::Method<global::PassKitGrpcSDK.Id, global::PassKitGrpcSDK.Members.MemberEvent>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "listEventsForMember",
        __Marshaller_io_Id,
        __Marshaller_members_MemberEvent);

    static readonly grpc::Method<global::PassKitGrpcSDK.Members.ListRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_deleteMemberEvents = new grpc::Method<global::PassKitGrpcSDK.Members.ListRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "deleteMemberEvents",
        __Marshaller_members_ListRequest,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::PassKitGrpcSDK.Id, global::Google.Protobuf.WellKnownTypes.Empty> __Method_deleteEventsForMember = new grpc::Method<global::PassKitGrpcSDK.Id, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "deleteEventsForMember",
        __Marshaller_io_Id,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::PassKitGrpcSDK.Id, global::Google.Protobuf.WellKnownTypes.Empty> __Method_deleteMemberEvent = new grpc::Method<global::PassKitGrpcSDK.Id, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "deleteMemberEvent",
        __Marshaller_io_Id,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::PassKitGrpcSDK.Id, global::PassKitGrpcSDK.EnrolmentUrls> __Method_getProgramEnrolment = new grpc::Method<global::PassKitGrpcSDK.Id, global::PassKitGrpcSDK.EnrolmentUrls>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getProgramEnrolment",
        __Marshaller_io_Id,
        __Marshaller_io_EnrolmentUrls);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::PassKitGrpcSDK.Members.ARpcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for Members</summary>
    public partial class MembersClient : grpc::ClientBase<MembersClient>
    {
      /// <summary>Creates a new client for Members</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MembersClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Members that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MembersClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MembersClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MembersClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Create a program record. Allows a user to specify program details around enrolment, renewal and cancellation processes. Optionally allows the user to set the GPS location / Beacons that will trigger a lock-screen alert.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PassKitGrpcSDK.Id createProgram(global::PassKitGrpcSDK.Members.Program request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createProgram(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a program record. Allows a user to specify program details around enrolment, renewal and cancellation processes. Optionally allows the user to set the GPS location / Beacons that will trigger a lock-screen alert.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PassKitGrpcSDK.Id createProgram(global::PassKitGrpcSDK.Members.Program request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_createProgram, null, options, request);
      }
      /// <summary>
      /// Create a program record. Allows a user to specify program details around enrolment, renewal and cancellation processes. Optionally allows the user to set the GPS location / Beacons that will trigger a lock-screen alert.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Id> createProgramAsync(global::PassKitGrpcSDK.Members.Program request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createProgramAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a program record. Allows a user to specify program details around enrolment, renewal and cancellation processes. Optionally allows the user to set the GPS location / Beacons that will trigger a lock-screen alert.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Id> createProgramAsync(global::PassKitGrpcSDK.Members.Program request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_createProgram, null, options, request);
      }
      /// <summary>
      /// Updates an existing program record.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PassKitGrpcSDK.Members.Program updateProgram(global::PassKitGrpcSDK.Members.Program request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updateProgram(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing program record.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PassKitGrpcSDK.Members.Program updateProgram(global::PassKitGrpcSDK.Members.Program request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_updateProgram, null, options, request);
      }
      /// <summary>
      /// Updates an existing program record.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Members.Program> updateProgramAsync(global::PassKitGrpcSDK.Members.Program request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updateProgramAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing program record.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Members.Program> updateProgramAsync(global::PassKitGrpcSDK.Members.Program request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_updateProgram, null, options, request);
      }
      /// <summary>
      /// Gets an existing program record by id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PassKitGrpcSDK.Members.Program getProgram(global::PassKitGrpcSDK.Id request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getProgram(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets an existing program record by id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PassKitGrpcSDK.Members.Program getProgram(global::PassKitGrpcSDK.Id request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getProgram, null, options, request);
      }
      /// <summary>
      /// Gets an existing program record by id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Members.Program> getProgramAsync(global::PassKitGrpcSDK.Id request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getProgramAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets an existing program record by id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Members.Program> getProgramAsync(global::PassKitGrpcSDK.Id request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getProgram, null, options, request);
      }
      /// <summary>
      /// Copies an existing program record to a new record, and allows for status of new program to be set; i.e. copy a draft to published (production) program. Will copy program AND related tier + template records.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PassKitGrpcSDK.Id copyProgram(global::PassKitGrpcSDK.Members.ProgramCopyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return copyProgram(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Copies an existing program record to a new record, and allows for status of new program to be set; i.e. copy a draft to published (production) program. Will copy program AND related tier + template records.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PassKitGrpcSDK.Id copyProgram(global::PassKitGrpcSDK.Members.ProgramCopyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_copyProgram, null, options, request);
      }
      /// <summary>
      /// Copies an existing program record to a new record, and allows for status of new program to be set; i.e. copy a draft to published (production) program. Will copy program AND related tier + template records.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Id> copyProgramAsync(global::PassKitGrpcSDK.Members.ProgramCopyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return copyProgramAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Copies an existing program record to a new record, and allows for status of new program to be set; i.e. copy a draft to published (production) program. Will copy program AND related tier + template records.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Id> copyProgramAsync(global::PassKitGrpcSDK.Members.ProgramCopyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_copyProgram, null, options, request);
      }
      /// <summary>
      /// Deletes an existing program record by id. Deleting a program results in all tiers, and members underneath it being invalidated and removed. Needs to be used with care.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty deleteProgram(global::PassKitGrpcSDK.Id request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteProgram(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes an existing program record by id. Deleting a program results in all tiers, and members underneath it being invalidated and removed. Needs to be used with care.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty deleteProgram(global::PassKitGrpcSDK.Id request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_deleteProgram, null, options, request);
      }
      /// <summary>
      /// Deletes an existing program record by id. Deleting a program results in all tiers, and members underneath it being invalidated and removed. Needs to be used with care.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> deleteProgramAsync(global::PassKitGrpcSDK.Id request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteProgramAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes an existing program record by id. Deleting a program results in all tiers, and members underneath it being invalidated and removed. Needs to be used with care.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> deleteProgramAsync(global::PassKitGrpcSDK.Id request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_deleteProgram, null, options, request);
      }
      /// <summary>
      /// Lists all programs for the logged in user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::PassKitGrpcSDK.Members.Program> listProgramsDeprecated(global::PassKitGrpcSDK.Pagination request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return listProgramsDeprecated(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all programs for the logged in user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::PassKitGrpcSDK.Members.Program> listProgramsDeprecated(global::PassKitGrpcSDK.Pagination request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_listProgramsDeprecated, null, options, request);
      }
      /// <summary>
      /// Lists all programs for the logged in user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::PassKitGrpcSDK.Members.Program> listPrograms(global::PassKitGrpcSDK.Filters request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return listPrograms(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all programs for the logged in user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::PassKitGrpcSDK.Members.Program> listPrograms(global::PassKitGrpcSDK.Filters request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_listPrograms, null, options, request);
      }
      /// <summary>
      /// Create a new tier in an existing member program. Tiers allow a user to categorize their membership program; tiers allow for additional detail that is specific to that 'group' of members. A program needs at least one tier.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PassKitGrpcSDK.Id createTier(global::PassKitGrpcSDK.Members.Tier request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createTier(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new tier in an existing member program. Tiers allow a user to categorize their membership program; tiers allow for additional detail that is specific to that 'group' of members. A program needs at least one tier.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PassKitGrpcSDK.Id createTier(global::PassKitGrpcSDK.Members.Tier request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_createTier, null, options, request);
      }
      /// <summary>
      /// Create a new tier in an existing member program. Tiers allow a user to categorize their membership program; tiers allow for additional detail that is specific to that 'group' of members. A program needs at least one tier.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Id> createTierAsync(global::PassKitGrpcSDK.Members.Tier request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createTierAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new tier in an existing member program. Tiers allow a user to categorize their membership program; tiers allow for additional detail that is specific to that 'group' of members. A program needs at least one tier.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Id> createTierAsync(global::PassKitGrpcSDK.Members.Tier request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_createTier, null, options, request);
      }
      /// <summary>
      /// Updates a tier by tier id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PassKitGrpcSDK.Members.Tier updateTier(global::PassKitGrpcSDK.Members.Tier request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updateTier(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a tier by tier id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PassKitGrpcSDK.Members.Tier updateTier(global::PassKitGrpcSDK.Members.Tier request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_updateTier, null, options, request);
      }
      /// <summary>
      /// Updates a tier by tier id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Members.Tier> updateTierAsync(global::PassKitGrpcSDK.Members.Tier request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updateTierAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a tier by tier id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Members.Tier> updateTierAsync(global::PassKitGrpcSDK.Members.Tier request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_updateTier, null, options, request);
      }
      /// <summary>
      /// Gets a tier by tier ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PassKitGrpcSDK.Members.Tier getTier(global::PassKitGrpcSDK.Members.TierRequestInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getTier(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a tier by tier ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PassKitGrpcSDK.Members.Tier getTier(global::PassKitGrpcSDK.Members.TierRequestInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getTier, null, options, request);
      }
      /// <summary>
      /// Gets a tier by tier ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Members.Tier> getTierAsync(global::PassKitGrpcSDK.Members.TierRequestInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getTierAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a tier by tier ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Members.Tier> getTierAsync(global::PassKitGrpcSDK.Members.TierRequestInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getTier, null, options, request);
      }
      /// <summary>
      /// Deletes a tier. Deleting a tier will invalidate and delete all the passes that are in the tier.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty deleteTier(global::PassKitGrpcSDK.Members.TierRequestInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteTier(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a tier. Deleting a tier will invalidate and delete all the passes that are in the tier.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty deleteTier(global::PassKitGrpcSDK.Members.TierRequestInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_deleteTier, null, options, request);
      }
      /// <summary>
      /// Deletes a tier. Deleting a tier will invalidate and delete all the passes that are in the tier.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> deleteTierAsync(global::PassKitGrpcSDK.Members.TierRequestInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteTierAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a tier. Deleting a tier will invalidate and delete all the passes that are in the tier.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> deleteTierAsync(global::PassKitGrpcSDK.Members.TierRequestInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_deleteTier, null, options, request);
      }
      /// <summary>
      /// Lists all the tiers.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::PassKitGrpcSDK.Members.Tier> listTiersDeprecated(global::PassKitGrpcSDK.Members.ListRequestDeprecated request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return listTiersDeprecated(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all the tiers.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::PassKitGrpcSDK.Members.Tier> listTiersDeprecated(global::PassKitGrpcSDK.Members.ListRequestDeprecated request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_listTiersDeprecated, null, options, request);
      }
      /// <summary>
      /// Lists all the tiers.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::PassKitGrpcSDK.Members.Tier> listTiers(global::PassKitGrpcSDK.Members.ListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return listTiers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all the tiers.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::PassKitGrpcSDK.Members.Tier> listTiers(global::PassKitGrpcSDK.Members.ListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_listTiers, null, options, request);
      }
      /// <summary>
      /// Enrols a new member into a tier of a program. Returns the PassKit Member ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PassKitGrpcSDK.Id enrolMember(global::PassKitGrpcSDK.Members.Member request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return enrolMember(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Enrols a new member into a tier of a program. Returns the PassKit Member ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PassKitGrpcSDK.Id enrolMember(global::PassKitGrpcSDK.Members.Member request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_enrolMember, null, options, request);
      }
      /// <summary>
      /// Enrols a new member into a tier of a program. Returns the PassKit Member ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Id> enrolMemberAsync(global::PassKitGrpcSDK.Members.Member request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return enrolMemberAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Enrols a new member into a tier of a program. Returns the PassKit Member ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Id> enrolMemberAsync(global::PassKitGrpcSDK.Members.Member request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_enrolMember, null, options, request);
      }
      /// <summary>
      /// Enrols a new member into the default tier (lowest tier index) of a program. Returns the PassKit Member ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PassKitGrpcSDK.Id enrolMemberPublic(global::PassKitGrpcSDK.Members.Member request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return enrolMemberPublic(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Enrols a new member into the default tier (lowest tier index) of a program. Returns the PassKit Member ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PassKitGrpcSDK.Id enrolMemberPublic(global::PassKitGrpcSDK.Members.Member request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_enrolMemberPublic, null, options, request);
      }
      /// <summary>
      /// Enrols a new member into the default tier (lowest tier index) of a program. Returns the PassKit Member ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Id> enrolMemberPublicAsync(global::PassKitGrpcSDK.Members.Member request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return enrolMemberPublicAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Enrols a new member into the default tier (lowest tier index) of a program. Returns the PassKit Member ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Id> enrolMemberPublicAsync(global::PassKitGrpcSDK.Members.Member request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_enrolMemberPublic, null, options, request);
      }
      public virtual global::PassKitGrpcSDK.Members.Member getMemberRecordById(global::PassKitGrpcSDK.Id request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getMemberRecordById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PassKitGrpcSDK.Members.Member getMemberRecordById(global::PassKitGrpcSDK.Id request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getMemberRecordById, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Members.Member> getMemberRecordByIdAsync(global::PassKitGrpcSDK.Id request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getMemberRecordByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Members.Member> getMemberRecordByIdAsync(global::PassKitGrpcSDK.Id request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getMemberRecordById, null, options, request);
      }
      public virtual global::PassKitGrpcSDK.Members.Member getMemberRecordByExternalId(global::PassKitGrpcSDK.Members.MemberRecordByExternalIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getMemberRecordByExternalId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PassKitGrpcSDK.Members.Member getMemberRecordByExternalId(global::PassKitGrpcSDK.Members.MemberRecordByExternalIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getMemberRecordByExternalId, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Members.Member> getMemberRecordByExternalIdAsync(global::PassKitGrpcSDK.Members.MemberRecordByExternalIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getMemberRecordByExternalIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Members.Member> getMemberRecordByExternalIdAsync(global::PassKitGrpcSDK.Members.MemberRecordByExternalIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getMemberRecordByExternalId, null, options, request);
      }
      public virtual global::PassKitGrpcSDK.Members.MemberEvent checkInMember(global::PassKitGrpcSDK.Members.MemberCheckInOutRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return checkInMember(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PassKitGrpcSDK.Members.MemberEvent checkInMember(global::PassKitGrpcSDK.Members.MemberCheckInOutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_checkInMember, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Members.MemberEvent> checkInMemberAsync(global::PassKitGrpcSDK.Members.MemberCheckInOutRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return checkInMemberAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Members.MemberEvent> checkInMemberAsync(global::PassKitGrpcSDK.Members.MemberCheckInOutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_checkInMember, null, options, request);
      }
      public virtual global::PassKitGrpcSDK.Members.MemberEvent checkOutMember(global::PassKitGrpcSDK.Members.MemberCheckInOutRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return checkOutMember(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PassKitGrpcSDK.Members.MemberEvent checkOutMember(global::PassKitGrpcSDK.Members.MemberCheckInOutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_checkOutMember, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Members.MemberEvent> checkOutMemberAsync(global::PassKitGrpcSDK.Members.MemberCheckInOutRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return checkOutMemberAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Members.MemberEvent> checkOutMemberAsync(global::PassKitGrpcSDK.Members.MemberCheckInOutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_checkOutMember, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::PassKitGrpcSDK.Members.Member> listMembersDeprecated(global::PassKitGrpcSDK.Members.ListRequestDeprecated request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return listMembersDeprecated(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::PassKitGrpcSDK.Members.Member> listMembersDeprecated(global::PassKitGrpcSDK.Members.ListRequestDeprecated request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_listMembersDeprecated, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::PassKitGrpcSDK.Members.Member> listMembers(global::PassKitGrpcSDK.Members.ListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return listMembers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::PassKitGrpcSDK.Members.Member> listMembers(global::PassKitGrpcSDK.Members.ListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_listMembers, null, options, request);
      }
      public virtual global::PassKitGrpcSDK.Id updateMember(global::PassKitGrpcSDK.Members.Member request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updateMember(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PassKitGrpcSDK.Id updateMember(global::PassKitGrpcSDK.Members.Member request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_updateMember, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Id> updateMemberAsync(global::PassKitGrpcSDK.Members.Member request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updateMemberAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Id> updateMemberAsync(global::PassKitGrpcSDK.Members.Member request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_updateMember, null, options, request);
      }
      /// <summary>
      /// @todo: define callback
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PassKitGrpcSDK.Members.MemberPoints earnPoints(global::PassKitGrpcSDK.Members.EarnBurnPointsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return earnPoints(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// @todo: define callback
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PassKitGrpcSDK.Members.MemberPoints earnPoints(global::PassKitGrpcSDK.Members.EarnBurnPointsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_earnPoints, null, options, request);
      }
      /// <summary>
      /// @todo: define callback
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Members.MemberPoints> earnPointsAsync(global::PassKitGrpcSDK.Members.EarnBurnPointsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return earnPointsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// @todo: define callback
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Members.MemberPoints> earnPointsAsync(global::PassKitGrpcSDK.Members.EarnBurnPointsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_earnPoints, null, options, request);
      }
      /// <summary>
      /// @todo: define callback
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PassKitGrpcSDK.Members.MemberPoints burnPoints(global::PassKitGrpcSDK.Members.EarnBurnPointsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return burnPoints(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// @todo: define callback
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PassKitGrpcSDK.Members.MemberPoints burnPoints(global::PassKitGrpcSDK.Members.EarnBurnPointsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_burnPoints, null, options, request);
      }
      /// <summary>
      /// @todo: define callback
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Members.MemberPoints> burnPointsAsync(global::PassKitGrpcSDK.Members.EarnBurnPointsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return burnPointsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// @todo: define callback
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Members.MemberPoints> burnPointsAsync(global::PassKitGrpcSDK.Members.EarnBurnPointsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_burnPoints, null, options, request);
      }
      public virtual global::PassKitGrpcSDK.Members.MemberPoints setPoints(global::PassKitGrpcSDK.Members.SetPointsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return setPoints(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PassKitGrpcSDK.Members.MemberPoints setPoints(global::PassKitGrpcSDK.Members.SetPointsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_setPoints, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Members.MemberPoints> setPointsAsync(global::PassKitGrpcSDK.Members.SetPointsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return setPointsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Members.MemberPoints> setPointsAsync(global::PassKitGrpcSDK.Members.SetPointsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_setPoints, null, options, request);
      }
      public virtual global::PassKitGrpcSDK.Members.MemberEvent changeMemberTier(global::PassKitGrpcSDK.Members.ChangeTierRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return changeMemberTier(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PassKitGrpcSDK.Members.MemberEvent changeMemberTier(global::PassKitGrpcSDK.Members.ChangeTierRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_changeMemberTier, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Members.MemberEvent> changeMemberTierAsync(global::PassKitGrpcSDK.Members.ChangeTierRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return changeMemberTierAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Members.MemberEvent> changeMemberTierAsync(global::PassKitGrpcSDK.Members.ChangeTierRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_changeMemberTier, null, options, request);
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty updateMembersBySegment(global::PassKitGrpcSDK.Members.MemberSegmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updateMembersBySegment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty updateMembersBySegment(global::PassKitGrpcSDK.Members.MemberSegmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_updateMembersBySegment, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> updateMembersBySegmentAsync(global::PassKitGrpcSDK.Members.MemberSegmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updateMembersBySegmentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> updateMembersBySegmentAsync(global::PassKitGrpcSDK.Members.MemberSegmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_updateMembersBySegment, null, options, request);
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty deleteMembersBySegment(global::PassKitGrpcSDK.Members.MemberSegmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteMembersBySegment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty deleteMembersBySegment(global::PassKitGrpcSDK.Members.MemberSegmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_deleteMembersBySegment, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> deleteMembersBySegmentAsync(global::PassKitGrpcSDK.Members.MemberSegmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteMembersBySegmentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> deleteMembersBySegmentAsync(global::PassKitGrpcSDK.Members.MemberSegmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_deleteMembersBySegment, null, options, request);
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty deleteMember(global::PassKitGrpcSDK.Members.Member request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteMember(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty deleteMember(global::PassKitGrpcSDK.Members.Member request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_deleteMember, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> deleteMemberAsync(global::PassKitGrpcSDK.Members.Member request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteMemberAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> deleteMemberAsync(global::PassKitGrpcSDK.Members.Member request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_deleteMember, null, options, request);
      }
      public virtual global::PassKitGrpcSDK.Count countMembersDeprecated(global::PassKitGrpcSDK.Members.ListRequestDeprecated request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return countMembersDeprecated(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PassKitGrpcSDK.Count countMembersDeprecated(global::PassKitGrpcSDK.Members.ListRequestDeprecated request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_countMembersDeprecated, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Count> countMembersDeprecatedAsync(global::PassKitGrpcSDK.Members.ListRequestDeprecated request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return countMembersDeprecatedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Count> countMembersDeprecatedAsync(global::PassKitGrpcSDK.Members.ListRequestDeprecated request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_countMembersDeprecated, null, options, request);
      }
      public virtual global::PassKitGrpcSDK.Count countMembers(global::PassKitGrpcSDK.Members.ListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return countMembers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PassKitGrpcSDK.Count countMembers(global::PassKitGrpcSDK.Members.ListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_countMembers, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Count> countMembersAsync(global::PassKitGrpcSDK.Members.ListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return countMembersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Count> countMembersAsync(global::PassKitGrpcSDK.Members.ListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_countMembers, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::PassKitGrpcSDK.Message> getMessageHistoryForMember(global::PassKitGrpcSDK.Pagination request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getMessageHistoryForMember(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::PassKitGrpcSDK.Message> getMessageHistoryForMember(global::PassKitGrpcSDK.Pagination request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_getMessageHistoryForMember, null, options, request);
      }
      public virtual global::PassKitGrpcSDK.Strings getMetaKeysForProgram(global::PassKitGrpcSDK.Id request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getMetaKeysForProgram(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PassKitGrpcSDK.Strings getMetaKeysForProgram(global::PassKitGrpcSDK.Id request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getMetaKeysForProgram, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Strings> getMetaKeysForProgramAsync(global::PassKitGrpcSDK.Id request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getMetaKeysForProgramAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Strings> getMetaKeysForProgramAsync(global::PassKitGrpcSDK.Id request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getMetaKeysForProgram, null, options, request);
      }
      public virtual global::PassKitGrpcSDK.Count renewMembersExpiry(global::PassKitGrpcSDK.Members.UpdateExpiryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return renewMembersExpiry(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PassKitGrpcSDK.Count renewMembersExpiry(global::PassKitGrpcSDK.Members.UpdateExpiryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_renewMembersExpiry, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Count> renewMembersExpiryAsync(global::PassKitGrpcSDK.Members.UpdateExpiryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return renewMembersExpiryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Count> renewMembersExpiryAsync(global::PassKitGrpcSDK.Members.UpdateExpiryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_renewMembersExpiry, null, options, request);
      }
      public virtual global::PassKitGrpcSDK.Id updateMemberExpiry(global::PassKitGrpcSDK.Members.MemberExpiry request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updateMemberExpiry(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PassKitGrpcSDK.Id updateMemberExpiry(global::PassKitGrpcSDK.Members.MemberExpiry request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_updateMemberExpiry, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Id> updateMemberExpiryAsync(global::PassKitGrpcSDK.Members.MemberExpiry request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updateMemberExpiryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Id> updateMemberExpiryAsync(global::PassKitGrpcSDK.Members.MemberExpiry request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_updateMemberExpiry, null, options, request);
      }
      public virtual global::PassKitGrpcSDK.Id patchPerson(global::PassKitGrpcSDK.PersonRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return patchPerson(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PassKitGrpcSDK.Id patchPerson(global::PassKitGrpcSDK.PersonRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_patchPerson, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Id> patchPersonAsync(global::PassKitGrpcSDK.PersonRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return patchPersonAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Id> patchPersonAsync(global::PassKitGrpcSDK.PersonRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_patchPerson, null, options, request);
      }
      public virtual global::PassKitGrpcSDK.Count countMemberEvents(global::PassKitGrpcSDK.Members.ListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return countMemberEvents(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PassKitGrpcSDK.Count countMemberEvents(global::PassKitGrpcSDK.Members.ListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_countMemberEvents, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Count> countMemberEventsAsync(global::PassKitGrpcSDK.Members.ListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return countMemberEventsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Count> countMemberEventsAsync(global::PassKitGrpcSDK.Members.ListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_countMemberEvents, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::PassKitGrpcSDK.Members.MemberEvent> listMemberEvents(global::PassKitGrpcSDK.Members.ListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return listMemberEvents(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::PassKitGrpcSDK.Members.MemberEvent> listMemberEvents(global::PassKitGrpcSDK.Members.ListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_listMemberEvents, null, options, request);
      }
      public virtual global::PassKitGrpcSDK.Strings getMemberEventMetaKeysForProgram(global::PassKitGrpcSDK.Id request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getMemberEventMetaKeysForProgram(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PassKitGrpcSDK.Strings getMemberEventMetaKeysForProgram(global::PassKitGrpcSDK.Id request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getMemberEventMetaKeysForProgram, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Strings> getMemberEventMetaKeysForProgramAsync(global::PassKitGrpcSDK.Id request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getMemberEventMetaKeysForProgramAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.Strings> getMemberEventMetaKeysForProgramAsync(global::PassKitGrpcSDK.Id request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getMemberEventMetaKeysForProgram, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::PassKitGrpcSDK.Members.MemberEvent> listEventsForMember(global::PassKitGrpcSDK.Id request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return listEventsForMember(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::PassKitGrpcSDK.Members.MemberEvent> listEventsForMember(global::PassKitGrpcSDK.Id request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_listEventsForMember, null, options, request);
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty deleteMemberEvents(global::PassKitGrpcSDK.Members.ListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteMemberEvents(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty deleteMemberEvents(global::PassKitGrpcSDK.Members.ListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_deleteMemberEvents, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> deleteMemberEventsAsync(global::PassKitGrpcSDK.Members.ListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteMemberEventsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> deleteMemberEventsAsync(global::PassKitGrpcSDK.Members.ListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_deleteMemberEvents, null, options, request);
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty deleteEventsForMember(global::PassKitGrpcSDK.Id request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteEventsForMember(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty deleteEventsForMember(global::PassKitGrpcSDK.Id request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_deleteEventsForMember, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> deleteEventsForMemberAsync(global::PassKitGrpcSDK.Id request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteEventsForMemberAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> deleteEventsForMemberAsync(global::PassKitGrpcSDK.Id request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_deleteEventsForMember, null, options, request);
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty deleteMemberEvent(global::PassKitGrpcSDK.Id request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteMemberEvent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty deleteMemberEvent(global::PassKitGrpcSDK.Id request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_deleteMemberEvent, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> deleteMemberEventAsync(global::PassKitGrpcSDK.Id request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteMemberEventAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> deleteMemberEventAsync(global::PassKitGrpcSDK.Id request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_deleteMemberEvent, null, options, request);
      }
      public virtual global::PassKitGrpcSDK.EnrolmentUrls getProgramEnrolment(global::PassKitGrpcSDK.Id request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getProgramEnrolment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PassKitGrpcSDK.EnrolmentUrls getProgramEnrolment(global::PassKitGrpcSDK.Id request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getProgramEnrolment, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.EnrolmentUrls> getProgramEnrolmentAsync(global::PassKitGrpcSDK.Id request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getProgramEnrolmentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PassKitGrpcSDK.EnrolmentUrls> getProgramEnrolmentAsync(global::PassKitGrpcSDK.Id request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getProgramEnrolment, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MembersClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MembersClient(configuration);
      }
    }

  }
}
#endregion
