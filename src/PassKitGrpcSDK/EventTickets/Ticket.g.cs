// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: io/event_tickets/ticket.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PassKitGrpcSDK.EventTickets {

  /// <summary>Holder for reflection information generated from io/event_tickets/ticket.proto</summary>
  public static partial class TicketReflection {

    #region Descriptor
    /// <summary>File descriptor for io/event_tickets/ticket.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TicketReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1pby9ldmVudF90aWNrZXRzL3RpY2tldC5wcm90bxINZXZlbnRfdGlja2V0",
            "cxofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90bxocaW8vY29tbW9u",
            "L2xvY2FsaXphdGlvbi5wcm90bxoXaW8vY29tbW9uL21ldHJpY3MucHJvdG8a",
            "HmlvL2NvbW1vbi9jb21tb25fb2JqZWN0cy5wcm90bxoUaW8vY29tbW9uL3Bh",
            "c3MucHJvdG8aGGlvL2NvbW1vbi9wZXJzb25hbC5wcm90bxoWaW8vY29tbW9u",
            "L2ZpbHRlci5wcm90bxocaW8vZXZlbnRfdGlja2V0cy92ZW51ZS5wcm90bxoc",
            "aW8vZXZlbnRfdGlja2V0cy9ldmVudC5wcm90bxoiaW8vZXZlbnRfdGlja2V0",
            "cy90aWNrZXRfdHlwZS5wcm90bxohaW8vZXZlbnRfdGlja2V0cy9wcm9kdWN0",
            "aW9uLnByb3RvGi5wcm90b2MtZ2VuLW9wZW5hcGl2Mi9vcHRpb25zL2Fubm90",
            "YXRpb25zLnByb3RvIlkKCFRpY2tldElkEhIKCHRpY2tldElkGAEgASgJSAAS",
            "MwoMdGlja2V0TnVtYmVyGAIgASgLMhsuZXZlbnRfdGlja2V0cy5UaWNrZXRO",
            "dW1iZXJIAEIECgJpZCI6CgxUaWNrZXROdW1iZXISFAoMcHJvZHVjdGlvbklk",
            "GAEgASgJEhQKDHRpY2tldE51bWJlchgCIAEoCSKTCAoGVGlja2V0EhEKAmlk",
            "GAEgASgJQgWSQQJAARIUCgx0aWNrZXROdW1iZXIYAiABKAkSIwoFZXZlbnQY",
            "AyABKAsyFC5ldmVudF90aWNrZXRzLkV2ZW50Ei0KCnRpY2tldFR5cGUYBCAB",
            "KAsyGS5ldmVudF90aWNrZXRzLlRpY2tldFR5cGUSEwoLb3JkZXJOdW1iZXIY",
            "BSABKAkSEgoKZ3JvdXBpbmdJZBgGIAEoCRIXCg9iYXJjb2RlQ29udGVudHMY",
            "ByABKAkSJQoIc2VhdEluZm8YCCABKAsyEy5ldmVudF90aWNrZXRzLlNlYXQS",
            "KwoJZmFjZVZhbHVlGAkgASgLMhguZXZlbnRfdGlja2V0cy5GYWNlVmFsdWUS",
            "GgoGcGVyc29uGAogASgLMgouaW8uUGVyc29uEjUKCG1ldGFEYXRhGAsgAygL",
            "MiMuZXZlbnRfdGlja2V0cy5UaWNrZXQuTWV0YURhdGFFbnRyeRIaCgZvcHRP",
            "dXQYDCABKA4yCi5pby5Ub2dnbGUSMgoGc3RhdHVzGA0gASgOMhsuZXZlbnRf",
            "dGlja2V0cy5UaWNrZXRTdGF0dXNCBZJBAkABEi4KCmV4cGlyeURhdGUYDiAB",
            "KAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEjsKEXJlZGVtcHRpb25E",
            "ZXRhaWxzGA8gASgLMiAuZXZlbnRfdGlja2V0cy5SZWRlbXB0aW9uRGV0YWls",
            "cxI3Cg92YWxpZGF0ZURldGFpbHMYECADKAsyHi5ldmVudF90aWNrZXRzLlZh",
            "bGlkYXRlRGV0YWlscxIoCg1wYXNzT3ZlcnJpZGVzGBEgASgLMhEuaW8uUGFz",
            "c092ZXJyaWRlcxIiCgxwYXNzTWV0YURhdGEYEiABKAsyDC5pby5NZXRhZGF0",
            "YRIyCgdjcmVhdGVkGBMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFt",
            "cEIFkkECQAESMgoHdXBkYXRlZBgUIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5U",
            "aW1lc3RhbXBCBZJBAkABGi8KDU1ldGFEYXRhRW50cnkSCwoDa2V5GAEgASgJ",
            "Eg0KBXZhbHVlGAIgASgJOgI4ATrFAZJBwQEKvgEqBlRpY2tldDKbAVRpY2tl",
            "dCBpcyBhIHVuaXF1ZSB0aWNrZXQgaW5zdGFuY2UgYW5kIGhvbGRzIGRldGFp",
            "bHMgYWJvdXQgdGhlIGV2ZW50IGRhdGVzICYgdGltZXMsIHZlbnVlLCB0aWNr",
            "ZXQgaG9sZGVyIGFuZCBvdGhlciByZWxldmFudCBkZXRhaWxzIHBlcnRhaW5p",
            "bmcgdG8gYSB0aWNrZXQu0gEFZXZlbnTSAQ10aWNrZXRUeXBlVWlkIp0BCg9W",
            "YWxpZGF0ZURldGFpbHMSMAoMdmFsaWRhdGVEYXRlGAEgASgLMhouZ29vZ2xl",
            "LnByb3RvYnVmLlRpbWVzdGFtcBILCgNsYXQYAiABKAESCwoDbG9uGAMgASgB",
            "EgsKA2FsdBgEIAEoBRIWCg52YWxpZGF0ZVNvdXJjZRgGIAEoCRIZChF2YWxp",
            "ZGF0ZVJlZmVyZW5jZRgHIAEoCSKlAQoRUmVkZW1wdGlvbkRldGFpbHMSMgoO",
            "cmVkZW1wdGlvbkRhdGUYASABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0",
            "YW1wEgsKA2xhdBgCIAEoARILCgNsb24YAyABKAESCwoDYWx0GAQgASgFEhgK",
            "EHJlZGVtcHRpb25Tb3VyY2UYBiABKAkSGwoTcmVkZW1wdGlvblJlZmVyZW5j",
            "ZRgHIAEoCSItCglGYWNlVmFsdWUSDgoGYW1vdW50GAEgASgCEhAKCGN1cnJl",
            "bmN5GAIgASgJIvIBCgRTZWF0EgwKBHNlYXQYASABKAkSKgoNbG9jYWxpemVk",
            "U2VhdBgCIAEoCzITLmlvLkxvY2FsaXplZFN0cmluZxILCgNyb3cYAyABKAkS",
            "KQoMbG9jYWxpemVkUm93GAQgASgLMhMuaW8uTG9jYWxpemVkU3RyaW5nEg8K",
            "B3NlY3Rpb24YBSABKAkSLQoQbG9jYWxpemVkU2VjdGlvbhgGIAEoCzITLmlv",
            "LkxvY2FsaXplZFN0cmluZxIMCgRnYXRlGAcgASgJEioKDWxvY2FsaXplZEdh",
            "dGUYCCABKAsyEy5pby5Mb2NhbGl6ZWRTdHJpbmci+gIKEVRpY2tldExpc3RS",
            "ZXF1ZXN0EhYKDHByb2R1Y3Rpb25JZBgBIAEoCUgAEhcKDXByb2R1Y3Rpb25V",
            "aWQYAiABKAlIABIRCgdldmVudElkGAMgASgJSAESTwoaZXZlbnRGaWx0ZXJC",
            "eVZlbnVlQW5kU3RhcnQYBCABKAsyKS5ldmVudF90aWNrZXRzLkV2ZW50Rmls",
            "dGVyQnlWZW51ZUFuZFN0YXJ0SAESFgoMdGlja2V0VHlwZUlkGAUgASgJSAIS",
            "FwoNdGlja2V0VHlwZVVpZBgGIAEoCUgCEhwKB2ZpbHRlcnMYByABKAsyCy5p",
            "by5GaWx0ZXJzOlySQVkKVyoMTGlzdCBSZXF1ZXN0MihVc2VkIHRvIGZpbHRl",
            "ciB0aWNrZXRzIGZvciBhIHByb2R1Y3Rpb24u0gEMcHJvZHVjdGlvbklk0gEN",
            "cHJvZHVjdGlvblVpZEIMCgpwcm9kdWN0aW9uQgcKBWV2ZW50QgwKCnRpY2tl",
            "dFR5cGUi4QEKGkV2ZW50RmlsdGVyQnlWZW51ZUFuZFN0YXJ0Eg8KB3ZlbnVl",
            "SWQYASABKAkSEAoIdmVudWVVaWQYAiABKAkSNgoSc2NoZWR1bGVkU3RhcnRE",
            "YXRlGAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcDpokkFlCmMq",
            "EkV2ZW50IEZpbHRlciBCeSBJZDIsVXNlZCB0byBmaWx0ZXIgdGlja2V0cyBm",
            "b3IgYSBzcGVjaWZpYyBldmVudC7SAQd2ZW51ZUlk0gEIdmVudWVVaWTSAQlz",
            "dGFydERhdGUiWAoTVGlja2V0TnVtYmVyUmVxdWVzdBIUCgxwcm9kdWN0aW9u",
            "SWQYASABKAkSFQoNcHJvZHVjdGlvblVpZBgCIAEoCRIUCgx0aWNrZXROdW1i",
            "ZXIYAyABKAkiVgoST3JkZXJOdW1iZXJSZXF1ZXN0EhQKDHByb2R1Y3Rpb25J",
            "ZBgBIAEoCRIVCg1wcm9kdWN0aW9uVWlkGAIgASgJEhMKC29yZGVyTnVtYmVy",
            "GAMgASgJIpQBChNSZWRlZW1CeU9yZGVyTnVtYmVyEhQKDHByb2R1Y3Rpb25J",
            "ZBgBIAEoCRIVCg1wcm9kdWN0aW9uVWlkGAIgASgJEhMKC29yZGVyTnVtYmVy",
            "GAMgASgJEjsKEXJlZGVtcHRpb25EZXRhaWxzGAQgASgLMiAuZXZlbnRfdGlj",
            "a2V0cy5SZWRlbXB0aW9uRGV0YWlscyI+CgdUaWNrZXRzEjMKB3RpY2tldHMY",
            "ASADKAsyIi5ldmVudF90aWNrZXRzLlRpY2tldExpbWl0ZWRGaWVsZHMiNAoR",
            "VGlja2V0UGFzc0J1bmRsZXMSHwoHdGlja2V0cxgBIAMoCzIOLmlvLlBhc3NC",
            "dW5kbGUimQEKFVZhbGlkYXRlVGlja2V0UmVxdWVzdBIeChZtYXhOdW1iZXJP",
            "ZlZhbGlkYXRpb25zGAEgASgNEicKBnRpY2tldBgCIAEoCzIXLmV2ZW50X3Rp",
            "Y2tldHMuVGlja2V0SWQSNwoPdmFsaWRhdGVEZXRhaWxzGAMgASgLMh4uZXZl",
            "bnRfdGlja2V0cy5WYWxpZGF0ZURldGFpbHMiTgoWVmFsaWRhdGVUaWNrZXRS",
            "ZXNwb25zZRINCgV2YWxpZBgBIAEoCBIlCgZ0aWNrZXQYAiABKAsyFS5ldmVu",
            "dF90aWNrZXRzLlRpY2tldCJ7ChNSZWRlZW1UaWNrZXRSZXF1ZXN0EicKBnRp",
            "Y2tldBgBIAEoCzIXLmV2ZW50X3RpY2tldHMuVGlja2V0SWQSOwoRcmVkZW1w",
            "dGlvbkRldGFpbHMYAyABKAsyIC5ldmVudF90aWNrZXRzLlJlZGVtcHRpb25E",
            "ZXRhaWxzIrEJChNUaWNrZXRMaW1pdGVkRmllbGRzEgoKAmlkGAEgASgJEhQK",
            "DHRpY2tldE51bWJlchgCIAEoCRJCCgpwcm9kdWN0aW9uGAMgASgLMi4uZXZl",
            "bnRfdGlja2V0cy5Qcm9kdWN0aW9uTGltaXRlZEZpZWxkc1Jlc3BvbnNlEjgK",
            "BWV2ZW50GAQgASgLMikuZXZlbnRfdGlja2V0cy5FdmVudExpbWl0ZWRGaWVs",
            "ZHNSZXNwb25zZRI4CgV2ZW51ZRgFIAEoCzIpLmV2ZW50X3RpY2tldHMuVmVu",
            "dWVMaW1pdGVkRmllbGRzUmVzcG9uc2USOgoKdGlja2V0VHlwZRgGIAEoCzIm",
            "LmV2ZW50X3RpY2tldHMuVGlja2V0VHlwZUxpbWl0ZWRGaWVsZHMSEwoLb3Jk",
            "ZXJOdW1iZXIYByABKAkSEgoKZ3JvdXBpbmdJZBgIIAEoCRIXCg9iYXJjb2Rl",
            "Q29udGVudHMYCSABKAkSJQoIc2VhdEluZm8YCiABKAsyEy5ldmVudF90aWNr",
            "ZXRzLlNlYXQSKwoJZmFjZVZhbHVlGAsgASgLMhguZXZlbnRfdGlja2V0cy5G",
            "YWNlVmFsdWUSGgoGcGVyc29uGAwgASgLMgouaW8uUGVyc29uEkIKCG1ldGFE",
            "YXRhGA0gAygLMjAuZXZlbnRfdGlja2V0cy5UaWNrZXRMaW1pdGVkRmllbGRz",
            "Lk1ldGFEYXRhRW50cnkSDgoGb3B0T3V0GA4gASgIEisKBnN0YXR1cxgPIAEo",
            "DjIbLmV2ZW50X3RpY2tldHMuVGlja2V0U3RhdHVzEi4KCmV4cGlyeURhdGUY",
            "ECABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEjsKEXJlZGVtcHRp",
            "b25EZXRhaWxzGBEgASgLMiAuZXZlbnRfdGlja2V0cy5SZWRlbXB0aW9uRGV0",
            "YWlscxI3Cg92YWxpZGF0ZURldGFpbHMYEiADKAsyHi5ldmVudF90aWNrZXRz",
            "LlZhbGlkYXRlRGV0YWlscxIoCg1wYXNzT3ZlcnJpZGVzGBMgASgLMhEuaW8u",
            "UGFzc092ZXJyaWRlcxIiCgxwYXNzTWV0YURhdGEYFCABKAsyDC5pby5NZXRh",
            "ZGF0YRIrCgdjcmVhdGVkGBUgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVz",
            "dGFtcBIrCgd1cGRhdGVkGBYgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVz",
            "dGFtcBovCg1NZXRhRGF0YUVudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgC",
            "IAEoCToCOAE60QGSQc0BCsoBKhJUaWNrZXQgKExpZ2h0IHZlcikymwFUaWNr",
            "ZXQgaXMgYSB1bmlxdWUgdGlja2V0IGluc3RhbmNlIGFuZCBob2xkcyBkZXRh",
            "aWxzIGFib3V0IHRoZSBldmVudCBkYXRlcyAmIHRpbWVzLCB2ZW51ZSwgdGlj",
            "a2V0IGhvbGRlciBhbmQgb3RoZXIgcmVsZXZhbnQgZGV0YWlscyBwZXJ0YWlu",
            "aW5nIHRvIGEgdGlja2V0LtIBBWV2ZW500gENdGlja2V0VHlwZVVpZCLWBwoS",
            "SXNzdWVUaWNrZXRSZXF1ZXN0EhEKB2V2ZW50SWQYASABKAlIABI5CgVldmVu",
            "dBgCIAEoCzIoLmV2ZW50X3RpY2tldHMuRXZlbnRMaW1pdGVkRmllbGRzUmVx",
            "dWVzdEgAEhQKDHRpY2tldFR5cGVJZBgDIAEoCRIUCgx0aWNrZXROdW1iZXIY",
            "BCABKAkSEwoLb3JkZXJOdW1iZXIYBSABKAkSEgoKZ3JvdXBpbmdJZBgGIAEo",
            "CRIXCg9iYXJjb2RlQ29udGVudHMYByABKAkSJQoIc2VhdEluZm8YCCABKAsy",
            "Ey5ldmVudF90aWNrZXRzLlNlYXQSKwoJZmFjZVZhbHVlGAkgASgLMhguZXZl",
            "bnRfdGlja2V0cy5GYWNlVmFsdWUSGgoGcGVyc29uGAogASgLMgouaW8uUGVy",
            "c29uEkEKCG1ldGFEYXRhGAsgAygLMi8uZXZlbnRfdGlja2V0cy5Jc3N1ZVRp",
            "Y2tldFJlcXVlc3QuTWV0YURhdGFFbnRyeRIOCgZvcHRPdXQYDCABKAgSKwoG",
            "c3RhdHVzGA0gASgOMhsuZXZlbnRfdGlja2V0cy5UaWNrZXRTdGF0dXMSLgoK",
            "ZXhwaXJ5RGF0ZRgOIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAS",
            "OwoRcmVkZW1wdGlvbkRldGFpbHMYDyABKAsyIC5ldmVudF90aWNrZXRzLlJl",
            "ZGVtcHRpb25EZXRhaWxzEjcKD3ZhbGlkYXRlRGV0YWlscxgQIAMoCzIeLmV2",
            "ZW50X3RpY2tldHMuVmFsaWRhdGVEZXRhaWxzEigKDXBhc3NPdmVycmlkZXMY",
            "ESABKAsyES5pby5QYXNzT3ZlcnJpZGVzEiIKDHBhc3NNZXRhRGF0YRgSIAEo",
            "CzIMLmlvLk1ldGFkYXRhEisKB2NyZWF0ZWQYEyABKAsyGi5nb29nbGUucHJv",
            "dG9idWYuVGltZXN0YW1wEisKB3VwZGF0ZWQYFCABKAsyGi5nb29nbGUucHJv",
            "dG9idWYuVGltZXN0YW1wGi8KDU1ldGFEYXRhRW50cnkSCwoDa2V5GAEgASgJ",
            "Eg0KBXZhbHVlGAIgASgJOgI4ATqHAZJBgwEKgAEqFElzc3VlIFRpY2tldCBS",
            "ZXF1ZXN0MkdJc3N1ZSB0aWNrZXQuIEV2ZW50IGlzIGF1dG8gY3JlYXRlZCBp",
            "ZiBpdCBkb2VzIG5vdCBleGlzdCBvbiB0aGUgcmVjb3JkLtIBB2V2ZW50SWTS",
            "AQVldmVudNIBDHRpY2tldFR5cGVJZEILCglldmVudEluZm8ihgIKFklzc3Vl",
            "VGlja2V0UmVzcG9uc2VJZHMSEAoIdGlja2V0SWQYASABKAkSFAoMcHJvZHVj",
            "dGlvbklkGAIgASgJEg8KB3ZlbnVlSWQYAyABKAkSFAoMdGlja2V0VHlwZUlk",
            "GAQgASgJEg8KB2V2ZW50SWQYBSABKAk6iwGSQYcBCoQBKhlJc3N1ZSBUaWNr",
            "ZXQgUmVzcG9uc2UgSWRzMmdMaXN0IG9mIFBhc3NLaXQgZ2VuZXJhdGVkIGlk",
            "cyByZXR1cm5lZCBhZnRlciBpc3N1aW5nIGEgdGlja2V0IHdpdGggcHJvZHVj",
            "dGlvbiwgdmVudWUsIHRpY2tldCB0eXBlIFVJRHMuItsBChZFdmVudFRpY2tl",
            "dFBhc3NSZXF1ZXN0EhoKCHRpY2tldElkGAEgASgLMgYuaW8uSWRIABI6Cgx0",
            "aWNrZXROdW1iZXIYAiABKAsyIi5ldmVudF90aWNrZXRzLlRpY2tldE51bWJl",
            "clJlcXVlc3RIABI4CgtvcmRlck51bWJlchgDIAEoCzIhLmV2ZW50X3RpY2tl",
            "dHMuT3JkZXJOdW1iZXJSZXF1ZXN0SAASJAoGZm9ybWF0GAQgAygOMhQuaW8u",
            "UGFzc0J1bmRsZUZvcm1hdEIJCgdyZXF1ZXN0Ip4BChFFdmVudFRpY2tldFBl",
            "cnNvbhIaCgh0aWNrZXRJZBgBIAEoCzIGLmlvLklkSAASOgoMdGlja2V0TnVt",
            "YmVyGAIgASgLMiIuZXZlbnRfdGlja2V0cy5UaWNrZXROdW1iZXJSZXF1ZXN0",
            "SAASGgoGcGVyc29uGAUgASgLMgouaW8uUGVyc29uQgkKB3JlcXVlc3RKBAgD",
            "EARKBAgEEAUqPwoMVGlja2V0U3RhdHVzEg8KC1NUQVRVU19OT05FEAASCgoG",
            "SVNTVUVEEAESDAoIUkVERUVNRUQQAiIECAMQA0JxCh1jb20ucGFzc2tpdC5n",
            "cnBjLkV2ZW50VGlja2V0c1oyc3Rhc2gucGFzc2tpdC5jb20vaW8vbW9kZWwv",
            "c2RrL2dvL2lvL2V2ZW50X3RpY2tldHOqAhtQYXNzS2l0R3JwY1NESy5FdmVu",
            "dFRpY2tldHNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::PassKitGrpcSDK.LocalizationReflection.Descriptor, global::PassKitGrpcSDK.MetricsReflection.Descriptor, global::PassKitGrpcSDK.CommonObjectsReflection.Descriptor, global::PassKitGrpcSDK.PassReflection.Descriptor, global::PassKitGrpcSDK.PersonalReflection.Descriptor, global::PassKitGrpcSDK.FilterReflection.Descriptor, global::PassKitGrpcSDK.EventTickets.VenueReflection.Descriptor, global::PassKitGrpcSDK.EventTickets.EventReflection.Descriptor, global::PassKitGrpcSDK.EventTickets.TicketTypeReflection.Descriptor, global::PassKitGrpcSDK.EventTickets.ProductionReflection.Descriptor, global::PassKitGrpcSDK.Gateway.ProtocGenOpenapiv2.Options.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PassKitGrpcSDK.EventTickets.TicketStatus), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKitGrpcSDK.EventTickets.TicketId), global::PassKitGrpcSDK.EventTickets.TicketId.Parser, new[]{ "TicketId_", "TicketNumber" }, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKitGrpcSDK.EventTickets.TicketNumber), global::PassKitGrpcSDK.EventTickets.TicketNumber.Parser, new[]{ "ProductionId", "TicketNumber_" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKitGrpcSDK.EventTickets.Ticket), global::PassKitGrpcSDK.EventTickets.Ticket.Parser, new[]{ "Id", "TicketNumber", "Event", "TicketType", "OrderNumber", "GroupingId", "BarcodeContents", "SeatInfo", "FaceValue", "Person", "MetaData", "OptOut", "Status", "ExpiryDate", "RedemptionDetails", "ValidateDetails", "PassOverrides", "PassMetaData", "Created", "Updated" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKitGrpcSDK.EventTickets.ValidateDetails), global::PassKitGrpcSDK.EventTickets.ValidateDetails.Parser, new[]{ "ValidateDate", "Lat", "Lon", "Alt", "ValidateSource", "ValidateReference" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKitGrpcSDK.EventTickets.RedemptionDetails), global::PassKitGrpcSDK.EventTickets.RedemptionDetails.Parser, new[]{ "RedemptionDate", "Lat", "Lon", "Alt", "RedemptionSource", "RedemptionReference" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKitGrpcSDK.EventTickets.FaceValue), global::PassKitGrpcSDK.EventTickets.FaceValue.Parser, new[]{ "Amount", "Currency" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKitGrpcSDK.EventTickets.Seat), global::PassKitGrpcSDK.EventTickets.Seat.Parser, new[]{ "Seat_", "LocalizedSeat", "Row", "LocalizedRow", "Section", "LocalizedSection", "Gate", "LocalizedGate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKitGrpcSDK.EventTickets.TicketListRequest), global::PassKitGrpcSDK.EventTickets.TicketListRequest.Parser, new[]{ "ProductionId", "ProductionUid", "EventId", "EventFilterByVenueAndStart", "TicketTypeId", "TicketTypeUid", "Filters" }, new[]{ "Production", "Event", "TicketType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKitGrpcSDK.EventTickets.EventFilterByVenueAndStart), global::PassKitGrpcSDK.EventTickets.EventFilterByVenueAndStart.Parser, new[]{ "VenueId", "VenueUid", "ScheduledStartDate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKitGrpcSDK.EventTickets.TicketNumberRequest), global::PassKitGrpcSDK.EventTickets.TicketNumberRequest.Parser, new[]{ "ProductionId", "ProductionUid", "TicketNumber" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKitGrpcSDK.EventTickets.OrderNumberRequest), global::PassKitGrpcSDK.EventTickets.OrderNumberRequest.Parser, new[]{ "ProductionId", "ProductionUid", "OrderNumber" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKitGrpcSDK.EventTickets.RedeemByOrderNumber), global::PassKitGrpcSDK.EventTickets.RedeemByOrderNumber.Parser, new[]{ "ProductionId", "ProductionUid", "OrderNumber", "RedemptionDetails" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKitGrpcSDK.EventTickets.Tickets), global::PassKitGrpcSDK.EventTickets.Tickets.Parser, new[]{ "Tickets_" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKitGrpcSDK.EventTickets.TicketPassBundles), global::PassKitGrpcSDK.EventTickets.TicketPassBundles.Parser, new[]{ "Tickets" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKitGrpcSDK.EventTickets.ValidateTicketRequest), global::PassKitGrpcSDK.EventTickets.ValidateTicketRequest.Parser, new[]{ "MaxNumberOfValidations", "Ticket", "ValidateDetails" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKitGrpcSDK.EventTickets.ValidateTicketResponse), global::PassKitGrpcSDK.EventTickets.ValidateTicketResponse.Parser, new[]{ "Valid", "Ticket" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKitGrpcSDK.EventTickets.RedeemTicketRequest), global::PassKitGrpcSDK.EventTickets.RedeemTicketRequest.Parser, new[]{ "Ticket", "RedemptionDetails" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKitGrpcSDK.EventTickets.TicketLimitedFields), global::PassKitGrpcSDK.EventTickets.TicketLimitedFields.Parser, new[]{ "Id", "TicketNumber", "Production", "Event", "Venue", "TicketType", "OrderNumber", "GroupingId", "BarcodeContents", "SeatInfo", "FaceValue", "Person", "MetaData", "OptOut", "Status", "ExpiryDate", "RedemptionDetails", "ValidateDetails", "PassOverrides", "PassMetaData", "Created", "Updated" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKitGrpcSDK.EventTickets.IssueTicketRequest), global::PassKitGrpcSDK.EventTickets.IssueTicketRequest.Parser, new[]{ "EventId", "Event", "TicketTypeId", "TicketNumber", "OrderNumber", "GroupingId", "BarcodeContents", "SeatInfo", "FaceValue", "Person", "MetaData", "OptOut", "Status", "ExpiryDate", "RedemptionDetails", "ValidateDetails", "PassOverrides", "PassMetaData", "Created", "Updated" }, new[]{ "EventInfo" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKitGrpcSDK.EventTickets.IssueTicketResponseIds), global::PassKitGrpcSDK.EventTickets.IssueTicketResponseIds.Parser, new[]{ "TicketId", "ProductionId", "VenueId", "TicketTypeId", "EventId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKitGrpcSDK.EventTickets.EventTicketPassRequest), global::PassKitGrpcSDK.EventTickets.EventTicketPassRequest.Parser, new[]{ "TicketId", "TicketNumber", "OrderNumber", "Format" }, new[]{ "Request" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKitGrpcSDK.EventTickets.EventTicketPerson), global::PassKitGrpcSDK.EventTickets.EventTicketPerson.Parser, new[]{ "TicketId", "TicketNumber", "Person" }, new[]{ "Request" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum TicketStatus {
    [pbr::OriginalName("STATUS_NONE")] StatusNone = 0,
    /// <summary>
    /// Default ticket status
    /// </summary>
    [pbr::OriginalName("ISSUED")] Issued = 1,
    /// <summary>
    /// Set after a ticket is redeemed (the redeem endpoint is called).
    /// </summary>
    [pbr::OriginalName("REDEEMED")] Redeemed = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// An object to communicate the ID of the ticket. Either the ticket id (22 character identifier), or the production id
  /// (22 character identifier), or Production UID (user defined id) plus the externally provided ticket number should be provided.
  /// </summary>
  public sealed partial class TicketId : pb::IMessage<TicketId>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TicketId> _parser = new pb::MessageParser<TicketId>(() => new TicketId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TicketId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKitGrpcSDK.EventTickets.TicketReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketId(TicketId other) : this() {
      switch (other.IdCase) {
        case IdOneofCase.TicketId_:
          TicketId_ = other.TicketId_;
          break;
        case IdOneofCase.TicketNumber:
          TicketNumber = other.TicketNumber.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketId Clone() {
      return new TicketId(this);
    }

    /// <summary>Field number for the "ticketId" field.</summary>
    public const int TicketId_FieldNumber = 1;
    /// <summary>
    /// The Ticket id (22 character identifier).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TicketId_ {
      get { return idCase_ == IdOneofCase.TicketId_ ? (string) id_ : ""; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.TicketId_;
      }
    }

    /// <summary>Field number for the "ticketNumber" field.</summary>
    public const int TicketNumberFieldNumber = 2;
    /// <summary>
    /// A ticket number object containing a production id and ticket number"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.EventTickets.TicketNumber TicketNumber {
      get { return idCase_ == IdOneofCase.TicketNumber ? (global::PassKitGrpcSDK.EventTickets.TicketNumber) id_ : null; }
      set {
        id_ = value;
        idCase_ = value == null ? IdOneofCase.None : IdOneofCase.TicketNumber;
      }
    }

    private object id_;
    /// <summary>Enum of possible cases for the "id" oneof.</summary>
    public enum IdOneofCase {
      None = 0,
      TicketId_ = 1,
      TicketNumber = 2,
    }
    private IdOneofCase idCase_ = IdOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdOneofCase IdCase {
      get { return idCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      idCase_ = IdOneofCase.None;
      id_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TicketId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TicketId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TicketId_ != other.TicketId_) return false;
      if (!object.Equals(TicketNumber, other.TicketNumber)) return false;
      if (IdCase != other.IdCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (idCase_ == IdOneofCase.TicketId_) hash ^= TicketId_.GetHashCode();
      if (idCase_ == IdOneofCase.TicketNumber) hash ^= TicketNumber.GetHashCode();
      hash ^= (int) idCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (idCase_ == IdOneofCase.TicketId_) {
        output.WriteRawTag(10);
        output.WriteString(TicketId_);
      }
      if (idCase_ == IdOneofCase.TicketNumber) {
        output.WriteRawTag(18);
        output.WriteMessage(TicketNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (idCase_ == IdOneofCase.TicketId_) {
        output.WriteRawTag(10);
        output.WriteString(TicketId_);
      }
      if (idCase_ == IdOneofCase.TicketNumber) {
        output.WriteRawTag(18);
        output.WriteMessage(TicketNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (idCase_ == IdOneofCase.TicketId_) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TicketId_);
      }
      if (idCase_ == IdOneofCase.TicketNumber) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TicketNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TicketId other) {
      if (other == null) {
        return;
      }
      switch (other.IdCase) {
        case IdOneofCase.TicketId_:
          TicketId_ = other.TicketId_;
          break;
        case IdOneofCase.TicketNumber:
          if (TicketNumber == null) {
            TicketNumber = new global::PassKitGrpcSDK.EventTickets.TicketNumber();
          }
          TicketNumber.MergeFrom(other.TicketNumber);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TicketId_ = input.ReadString();
            break;
          }
          case 18: {
            global::PassKitGrpcSDK.EventTickets.TicketNumber subBuilder = new global::PassKitGrpcSDK.EventTickets.TicketNumber();
            if (idCase_ == IdOneofCase.TicketNumber) {
              subBuilder.MergeFrom(TicketNumber);
            }
            input.ReadMessage(subBuilder);
            TicketNumber = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            TicketId_ = input.ReadString();
            break;
          }
          case 18: {
            global::PassKitGrpcSDK.EventTickets.TicketNumber subBuilder = new global::PassKitGrpcSDK.EventTickets.TicketNumber();
            if (idCase_ == IdOneofCase.TicketNumber) {
              subBuilder.MergeFrom(TicketNumber);
            }
            input.ReadMessage(subBuilder);
            TicketNumber = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TicketNumber : pb::IMessage<TicketNumber>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TicketNumber> _parser = new pb::MessageParser<TicketNumber>(() => new TicketNumber());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TicketNumber> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKitGrpcSDK.EventTickets.TicketReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketNumber() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketNumber(TicketNumber other) : this() {
      productionId_ = other.productionId_;
      ticketNumber_ = other.ticketNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketNumber Clone() {
      return new TicketNumber(this);
    }

    /// <summary>Field number for the "productionId" field.</summary>
    public const int ProductionIdFieldNumber = 1;
    private string productionId_ = "";
    /// <summary>
    /// The Production id (22 character identifier), or the Production user defined id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductionId {
      get { return productionId_; }
      set {
        productionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticketNumber" field.</summary>
    public const int TicketNumber_FieldNumber = 2;
    private string ticketNumber_ = "";
    /// <summary>
    /// The user defined ticket number (unique within production)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TicketNumber_ {
      get { return ticketNumber_; }
      set {
        ticketNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TicketNumber);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TicketNumber other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProductionId != other.ProductionId) return false;
      if (TicketNumber_ != other.TicketNumber_) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProductionId.Length != 0) hash ^= ProductionId.GetHashCode();
      if (TicketNumber_.Length != 0) hash ^= TicketNumber_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ProductionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProductionId);
      }
      if (TicketNumber_.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TicketNumber_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ProductionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProductionId);
      }
      if (TicketNumber_.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TicketNumber_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProductionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductionId);
      }
      if (TicketNumber_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TicketNumber_);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TicketNumber other) {
      if (other == null) {
        return;
      }
      if (other.ProductionId.Length != 0) {
        ProductionId = other.ProductionId;
      }
      if (other.TicketNumber_.Length != 0) {
        TicketNumber_ = other.TicketNumber_;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ProductionId = input.ReadString();
            break;
          }
          case 18: {
            TicketNumber_ = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ProductionId = input.ReadString();
            break;
          }
          case 18: {
            TicketNumber_ = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The Ticket Details
  /// </summary>
  public sealed partial class Ticket : pb::IMessage<Ticket>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Ticket> _parser = new pb::MessageParser<Ticket>(() => new Ticket());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ticket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKitGrpcSDK.EventTickets.TicketReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ticket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ticket(Ticket other) : this() {
      id_ = other.id_;
      ticketNumber_ = other.ticketNumber_;
      event_ = other.event_ != null ? other.event_.Clone() : null;
      ticketType_ = other.ticketType_ != null ? other.ticketType_.Clone() : null;
      orderNumber_ = other.orderNumber_;
      groupingId_ = other.groupingId_;
      barcodeContents_ = other.barcodeContents_;
      seatInfo_ = other.seatInfo_ != null ? other.seatInfo_.Clone() : null;
      faceValue_ = other.faceValue_ != null ? other.faceValue_.Clone() : null;
      person_ = other.person_ != null ? other.person_.Clone() : null;
      metaData_ = other.metaData_.Clone();
      optOut_ = other.optOut_;
      status_ = other.status_;
      expiryDate_ = other.expiryDate_ != null ? other.expiryDate_.Clone() : null;
      redemptionDetails_ = other.redemptionDetails_ != null ? other.redemptionDetails_.Clone() : null;
      validateDetails_ = other.validateDetails_.Clone();
      passOverrides_ = other.passOverrides_ != null ? other.passOverrides_.Clone() : null;
      passMetaData_ = other.passMetaData_ != null ? other.passMetaData_.Clone() : null;
      created_ = other.created_ != null ? other.created_.Clone() : null;
      updated_ = other.updated_ != null ? other.updated_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ticket Clone() {
      return new Ticket(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// PassKit generated ticket id (22 characters).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticketNumber" field.</summary>
    public const int TicketNumberFieldNumber = 2;
    private string ticketNumber_ = "";
    /// <summary>
    /// Optional user generated ticket number. Unique within the Production.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TicketNumber {
      get { return ticketNumber_; }
      set {
        ticketNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 3;
    private global::PassKitGrpcSDK.EventTickets.Event event_;
    /// <summary>
    /// The event that the ticket is for. Can provide event id, or the whole event object - if the event doesn't exist it will be created. The combination of event.production.id, event.startDate, event.venue.uid &amp; ticket.ticketTypeUid is enforced unique in the system.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.EventTickets.Event Event {
      get { return event_; }
      set {
        event_ = value;
      }
    }

    /// <summary>Field number for the "ticketType" field.</summary>
    public const int TicketTypeFieldNumber = 4;
    private global::PassKitGrpcSDK.EventTickets.TicketType ticketType_;
    /// <summary>
    /// The ticket type the ticket is for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.EventTickets.TicketType TicketType {
      get { return ticketType_; }
      set {
        ticketType_ = value;
      }
    }

    /// <summary>Field number for the "orderNumber" field.</summary>
    public const int OrderNumberFieldNumber = 5;
    private string orderNumber_ = "";
    /// <summary>
    /// Optional order / confirmation / booking code. Unique within the Production.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderNumber {
      get { return orderNumber_; }
      set {
        orderNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "groupingId" field.</summary>
    public const int GroupingIdFieldNumber = 6;
    private string groupingId_ = "";
    /// <summary>
    /// Optional PassKit generated grouping ID. The system automatically groups tickets based by order number. Grouped tickets can be downloaded together from our multi-pass download pages. Not writable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupingId {
      get { return groupingId_; }
      set {
        groupingId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "barcodeContents" field.</summary>
    public const int BarcodeContentsFieldNumber = 7;
    private string barcodeContents_ = "";
    /// <summary>
    /// The contents to embed in the barcode for this ticket. If not provided, the default value from the Ticket Type Pass Template Design is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BarcodeContents {
      get { return barcodeContents_; }
      set {
        barcodeContents_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "seatInfo" field.</summary>
    public const int SeatInfoFieldNumber = 8;
    private global::PassKitGrpcSDK.EventTickets.Seat seatInfo_;
    /// <summary>
    /// The seat info for the ticket.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.EventTickets.Seat SeatInfo {
      get { return seatInfo_; }
      set {
        seatInfo_ = value;
      }
    }

    /// <summary>Field number for the "faceValue" field.</summary>
    public const int FaceValueFieldNumber = 9;
    private global::PassKitGrpcSDK.EventTickets.FaceValue faceValue_;
    /// <summary>
    /// The face value details for the ticket.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.EventTickets.FaceValue FaceValue {
      get { return faceValue_; }
      set {
        faceValue_ = value;
      }
    }

    /// <summary>Field number for the "person" field.</summary>
    public const int PersonFieldNumber = 10;
    private global::PassKitGrpcSDK.Person person_;
    /// <summary>
    /// The ticket holder information. Stored encrypted in PassKit's database.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.Person Person {
      get { return person_; }
      set {
        person_ = value;
      }
    }

    /// <summary>Field number for the "metaData" field.</summary>
    public const int MetaDataFieldNumber = 11;
    private static readonly pbc::MapField<string, string>.Codec _map_metaData_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 90);
    private readonly pbc::MapField<string, string> metaData_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Any other meta fields for the ticket that are not covered in the Ticket Object / API (i.e. you might want to capture ticket information specific to your process).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> MetaData {
      get { return metaData_; }
    }

    /// <summary>Field number for the "optOut" field.</summary>
    public const int OptOutFieldNumber = 12;
    private global::PassKitGrpcSDK.Toggle optOut_ = global::PassKitGrpcSDK.Toggle.DoNotUse;
    /// <summary>
    /// Indicates if the holder of the ticket opted out to receive marketing promotions (defaults to false).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.Toggle OptOut {
      get { return optOut_; }
      set {
        optOut_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 13;
    private global::PassKitGrpcSDK.EventTickets.TicketStatus status_ = global::PassKitGrpcSDK.EventTickets.TicketStatus.StatusNone;
    /// <summary>
    /// Holds the ticket status.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.EventTickets.TicketStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "expiryDate" field.</summary>
    public const int ExpiryDateFieldNumber = 14;
    private global::Google.Protobuf.WellKnownTypes.Timestamp expiryDate_;
    /// <summary>
    /// Optional field to set when the ticket expires. When the expiry date hits, it will automatically gray out the barcode.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ExpiryDate {
      get { return expiryDate_; }
      set {
        expiryDate_ = value;
      }
    }

    /// <summary>Field number for the "redemptionDetails" field.</summary>
    public const int RedemptionDetailsFieldNumber = 15;
    private global::PassKitGrpcSDK.EventTickets.RedemptionDetails redemptionDetails_;
    /// <summary>
    /// Contains details about the redemption (if the ticket is in a redeemed state). Not writable; set by the redeem endpoint.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.EventTickets.RedemptionDetails RedemptionDetails {
      get { return redemptionDetails_; }
      set {
        redemptionDetails_ = value;
      }
    }

    /// <summary>Field number for the "validateDetails" field.</summary>
    public const int ValidateDetailsFieldNumber = 16;
    private static readonly pb::FieldCodec<global::PassKitGrpcSDK.EventTickets.ValidateDetails> _repeated_validateDetails_codec
        = pb::FieldCodec.ForMessage(130, global::PassKitGrpcSDK.EventTickets.ValidateDetails.Parser);
    private readonly pbc::RepeatedField<global::PassKitGrpcSDK.EventTickets.ValidateDetails> validateDetails_ = new pbc::RepeatedField<global::PassKitGrpcSDK.EventTickets.ValidateDetails>();
    /// <summary>
    /// Contains details about when the ticket was validated. Tickets can be validated multiple times. Not writable; set by the validate endpoint.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PassKitGrpcSDK.EventTickets.ValidateDetails> ValidateDetails {
      get { return validateDetails_; }
    }

    /// <summary>Field number for the "passOverrides" field.</summary>
    public const int PassOverridesFieldNumber = 17;
    private global::PassKitGrpcSDK.PassOverrides passOverrides_;
    /// <summary>
    /// Optional Pass level overrides for proximity &amp; images.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.PassOverrides PassOverrides {
      get { return passOverrides_; }
      set {
        passOverrides_ = value;
      }
    }

    /// <summary>Field number for the "passMetaData" field.</summary>
    public const int PassMetaDataFieldNumber = 18;
    private global::PassKitGrpcSDK.Metadata passMetaData_;
    /// <summary>
    /// Pass Metadata hold meta data about the pass like status, lifecycle, utm details and installation data. Cannot be set via the API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.Metadata PassMetaData {
      get { return passMetaData_; }
      set {
        passMetaData_ = value;
      }
    }

    /// <summary>Field number for the "created" field.</summary>
    public const int CreatedFieldNumber = 19;
    private global::Google.Protobuf.WellKnownTypes.Timestamp created_;
    /// <summary>
    /// The date the ticket was created. Not writable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Created {
      get { return created_; }
      set {
        created_ = value;
      }
    }

    /// <summary>Field number for the "updated" field.</summary>
    public const int UpdatedFieldNumber = 20;
    private global::Google.Protobuf.WellKnownTypes.Timestamp updated_;
    /// <summary>
    /// The date the ticket last updated. Not writable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Updated {
      get { return updated_; }
      set {
        updated_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ticket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ticket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (TicketNumber != other.TicketNumber) return false;
      if (!object.Equals(Event, other.Event)) return false;
      if (!object.Equals(TicketType, other.TicketType)) return false;
      if (OrderNumber != other.OrderNumber) return false;
      if (GroupingId != other.GroupingId) return false;
      if (BarcodeContents != other.BarcodeContents) return false;
      if (!object.Equals(SeatInfo, other.SeatInfo)) return false;
      if (!object.Equals(FaceValue, other.FaceValue)) return false;
      if (!object.Equals(Person, other.Person)) return false;
      if (!MetaData.Equals(other.MetaData)) return false;
      if (OptOut != other.OptOut) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(ExpiryDate, other.ExpiryDate)) return false;
      if (!object.Equals(RedemptionDetails, other.RedemptionDetails)) return false;
      if(!validateDetails_.Equals(other.validateDetails_)) return false;
      if (!object.Equals(PassOverrides, other.PassOverrides)) return false;
      if (!object.Equals(PassMetaData, other.PassMetaData)) return false;
      if (!object.Equals(Created, other.Created)) return false;
      if (!object.Equals(Updated, other.Updated)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (TicketNumber.Length != 0) hash ^= TicketNumber.GetHashCode();
      if (event_ != null) hash ^= Event.GetHashCode();
      if (ticketType_ != null) hash ^= TicketType.GetHashCode();
      if (OrderNumber.Length != 0) hash ^= OrderNumber.GetHashCode();
      if (GroupingId.Length != 0) hash ^= GroupingId.GetHashCode();
      if (BarcodeContents.Length != 0) hash ^= BarcodeContents.GetHashCode();
      if (seatInfo_ != null) hash ^= SeatInfo.GetHashCode();
      if (faceValue_ != null) hash ^= FaceValue.GetHashCode();
      if (person_ != null) hash ^= Person.GetHashCode();
      hash ^= MetaData.GetHashCode();
      if (OptOut != global::PassKitGrpcSDK.Toggle.DoNotUse) hash ^= OptOut.GetHashCode();
      if (Status != global::PassKitGrpcSDK.EventTickets.TicketStatus.StatusNone) hash ^= Status.GetHashCode();
      if (expiryDate_ != null) hash ^= ExpiryDate.GetHashCode();
      if (redemptionDetails_ != null) hash ^= RedemptionDetails.GetHashCode();
      hash ^= validateDetails_.GetHashCode();
      if (passOverrides_ != null) hash ^= PassOverrides.GetHashCode();
      if (passMetaData_ != null) hash ^= PassMetaData.GetHashCode();
      if (created_ != null) hash ^= Created.GetHashCode();
      if (updated_ != null) hash ^= Updated.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (TicketNumber.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TicketNumber);
      }
      if (event_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Event);
      }
      if (ticketType_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TicketType);
      }
      if (OrderNumber.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(OrderNumber);
      }
      if (GroupingId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(GroupingId);
      }
      if (BarcodeContents.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(BarcodeContents);
      }
      if (seatInfo_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(SeatInfo);
      }
      if (faceValue_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(FaceValue);
      }
      if (person_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Person);
      }
      metaData_.WriteTo(output, _map_metaData_codec);
      if (OptOut != global::PassKitGrpcSDK.Toggle.DoNotUse) {
        output.WriteRawTag(96);
        output.WriteEnum((int) OptOut);
      }
      if (Status != global::PassKitGrpcSDK.EventTickets.TicketStatus.StatusNone) {
        output.WriteRawTag(104);
        output.WriteEnum((int) Status);
      }
      if (expiryDate_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(ExpiryDate);
      }
      if (redemptionDetails_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(RedemptionDetails);
      }
      validateDetails_.WriteTo(output, _repeated_validateDetails_codec);
      if (passOverrides_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(PassOverrides);
      }
      if (passMetaData_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(PassMetaData);
      }
      if (created_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Created);
      }
      if (updated_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(Updated);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (TicketNumber.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TicketNumber);
      }
      if (event_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Event);
      }
      if (ticketType_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TicketType);
      }
      if (OrderNumber.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(OrderNumber);
      }
      if (GroupingId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(GroupingId);
      }
      if (BarcodeContents.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(BarcodeContents);
      }
      if (seatInfo_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(SeatInfo);
      }
      if (faceValue_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(FaceValue);
      }
      if (person_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Person);
      }
      metaData_.WriteTo(ref output, _map_metaData_codec);
      if (OptOut != global::PassKitGrpcSDK.Toggle.DoNotUse) {
        output.WriteRawTag(96);
        output.WriteEnum((int) OptOut);
      }
      if (Status != global::PassKitGrpcSDK.EventTickets.TicketStatus.StatusNone) {
        output.WriteRawTag(104);
        output.WriteEnum((int) Status);
      }
      if (expiryDate_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(ExpiryDate);
      }
      if (redemptionDetails_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(RedemptionDetails);
      }
      validateDetails_.WriteTo(ref output, _repeated_validateDetails_codec);
      if (passOverrides_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(PassOverrides);
      }
      if (passMetaData_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(PassMetaData);
      }
      if (created_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Created);
      }
      if (updated_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(Updated);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (TicketNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TicketNumber);
      }
      if (event_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Event);
      }
      if (ticketType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TicketType);
      }
      if (OrderNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderNumber);
      }
      if (GroupingId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupingId);
      }
      if (BarcodeContents.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BarcodeContents);
      }
      if (seatInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SeatInfo);
      }
      if (faceValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FaceValue);
      }
      if (person_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Person);
      }
      size += metaData_.CalculateSize(_map_metaData_codec);
      if (OptOut != global::PassKitGrpcSDK.Toggle.DoNotUse) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OptOut);
      }
      if (Status != global::PassKitGrpcSDK.EventTickets.TicketStatus.StatusNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (expiryDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExpiryDate);
      }
      if (redemptionDetails_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RedemptionDetails);
      }
      size += validateDetails_.CalculateSize(_repeated_validateDetails_codec);
      if (passOverrides_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PassOverrides);
      }
      if (passMetaData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PassMetaData);
      }
      if (created_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Created);
      }
      if (updated_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Updated);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ticket other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.TicketNumber.Length != 0) {
        TicketNumber = other.TicketNumber;
      }
      if (other.event_ != null) {
        if (event_ == null) {
          Event = new global::PassKitGrpcSDK.EventTickets.Event();
        }
        Event.MergeFrom(other.Event);
      }
      if (other.ticketType_ != null) {
        if (ticketType_ == null) {
          TicketType = new global::PassKitGrpcSDK.EventTickets.TicketType();
        }
        TicketType.MergeFrom(other.TicketType);
      }
      if (other.OrderNumber.Length != 0) {
        OrderNumber = other.OrderNumber;
      }
      if (other.GroupingId.Length != 0) {
        GroupingId = other.GroupingId;
      }
      if (other.BarcodeContents.Length != 0) {
        BarcodeContents = other.BarcodeContents;
      }
      if (other.seatInfo_ != null) {
        if (seatInfo_ == null) {
          SeatInfo = new global::PassKitGrpcSDK.EventTickets.Seat();
        }
        SeatInfo.MergeFrom(other.SeatInfo);
      }
      if (other.faceValue_ != null) {
        if (faceValue_ == null) {
          FaceValue = new global::PassKitGrpcSDK.EventTickets.FaceValue();
        }
        FaceValue.MergeFrom(other.FaceValue);
      }
      if (other.person_ != null) {
        if (person_ == null) {
          Person = new global::PassKitGrpcSDK.Person();
        }
        Person.MergeFrom(other.Person);
      }
      metaData_.Add(other.metaData_);
      if (other.OptOut != global::PassKitGrpcSDK.Toggle.DoNotUse) {
        OptOut = other.OptOut;
      }
      if (other.Status != global::PassKitGrpcSDK.EventTickets.TicketStatus.StatusNone) {
        Status = other.Status;
      }
      if (other.expiryDate_ != null) {
        if (expiryDate_ == null) {
          ExpiryDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ExpiryDate.MergeFrom(other.ExpiryDate);
      }
      if (other.redemptionDetails_ != null) {
        if (redemptionDetails_ == null) {
          RedemptionDetails = new global::PassKitGrpcSDK.EventTickets.RedemptionDetails();
        }
        RedemptionDetails.MergeFrom(other.RedemptionDetails);
      }
      validateDetails_.Add(other.validateDetails_);
      if (other.passOverrides_ != null) {
        if (passOverrides_ == null) {
          PassOverrides = new global::PassKitGrpcSDK.PassOverrides();
        }
        PassOverrides.MergeFrom(other.PassOverrides);
      }
      if (other.passMetaData_ != null) {
        if (passMetaData_ == null) {
          PassMetaData = new global::PassKitGrpcSDK.Metadata();
        }
        PassMetaData.MergeFrom(other.PassMetaData);
      }
      if (other.created_ != null) {
        if (created_ == null) {
          Created = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Created.MergeFrom(other.Created);
      }
      if (other.updated_ != null) {
        if (updated_ == null) {
          Updated = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Updated.MergeFrom(other.Updated);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            TicketNumber = input.ReadString();
            break;
          }
          case 26: {
            if (event_ == null) {
              Event = new global::PassKitGrpcSDK.EventTickets.Event();
            }
            input.ReadMessage(Event);
            break;
          }
          case 34: {
            if (ticketType_ == null) {
              TicketType = new global::PassKitGrpcSDK.EventTickets.TicketType();
            }
            input.ReadMessage(TicketType);
            break;
          }
          case 42: {
            OrderNumber = input.ReadString();
            break;
          }
          case 50: {
            GroupingId = input.ReadString();
            break;
          }
          case 58: {
            BarcodeContents = input.ReadString();
            break;
          }
          case 66: {
            if (seatInfo_ == null) {
              SeatInfo = new global::PassKitGrpcSDK.EventTickets.Seat();
            }
            input.ReadMessage(SeatInfo);
            break;
          }
          case 74: {
            if (faceValue_ == null) {
              FaceValue = new global::PassKitGrpcSDK.EventTickets.FaceValue();
            }
            input.ReadMessage(FaceValue);
            break;
          }
          case 82: {
            if (person_ == null) {
              Person = new global::PassKitGrpcSDK.Person();
            }
            input.ReadMessage(Person);
            break;
          }
          case 90: {
            metaData_.AddEntriesFrom(input, _map_metaData_codec);
            break;
          }
          case 96: {
            OptOut = (global::PassKitGrpcSDK.Toggle) input.ReadEnum();
            break;
          }
          case 104: {
            Status = (global::PassKitGrpcSDK.EventTickets.TicketStatus) input.ReadEnum();
            break;
          }
          case 114: {
            if (expiryDate_ == null) {
              ExpiryDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpiryDate);
            break;
          }
          case 122: {
            if (redemptionDetails_ == null) {
              RedemptionDetails = new global::PassKitGrpcSDK.EventTickets.RedemptionDetails();
            }
            input.ReadMessage(RedemptionDetails);
            break;
          }
          case 130: {
            validateDetails_.AddEntriesFrom(input, _repeated_validateDetails_codec);
            break;
          }
          case 138: {
            if (passOverrides_ == null) {
              PassOverrides = new global::PassKitGrpcSDK.PassOverrides();
            }
            input.ReadMessage(PassOverrides);
            break;
          }
          case 146: {
            if (passMetaData_ == null) {
              PassMetaData = new global::PassKitGrpcSDK.Metadata();
            }
            input.ReadMessage(PassMetaData);
            break;
          }
          case 154: {
            if (created_ == null) {
              Created = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Created);
            break;
          }
          case 162: {
            if (updated_ == null) {
              Updated = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Updated);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            TicketNumber = input.ReadString();
            break;
          }
          case 26: {
            if (event_ == null) {
              Event = new global::PassKitGrpcSDK.EventTickets.Event();
            }
            input.ReadMessage(Event);
            break;
          }
          case 34: {
            if (ticketType_ == null) {
              TicketType = new global::PassKitGrpcSDK.EventTickets.TicketType();
            }
            input.ReadMessage(TicketType);
            break;
          }
          case 42: {
            OrderNumber = input.ReadString();
            break;
          }
          case 50: {
            GroupingId = input.ReadString();
            break;
          }
          case 58: {
            BarcodeContents = input.ReadString();
            break;
          }
          case 66: {
            if (seatInfo_ == null) {
              SeatInfo = new global::PassKitGrpcSDK.EventTickets.Seat();
            }
            input.ReadMessage(SeatInfo);
            break;
          }
          case 74: {
            if (faceValue_ == null) {
              FaceValue = new global::PassKitGrpcSDK.EventTickets.FaceValue();
            }
            input.ReadMessage(FaceValue);
            break;
          }
          case 82: {
            if (person_ == null) {
              Person = new global::PassKitGrpcSDK.Person();
            }
            input.ReadMessage(Person);
            break;
          }
          case 90: {
            metaData_.AddEntriesFrom(ref input, _map_metaData_codec);
            break;
          }
          case 96: {
            OptOut = (global::PassKitGrpcSDK.Toggle) input.ReadEnum();
            break;
          }
          case 104: {
            Status = (global::PassKitGrpcSDK.EventTickets.TicketStatus) input.ReadEnum();
            break;
          }
          case 114: {
            if (expiryDate_ == null) {
              ExpiryDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpiryDate);
            break;
          }
          case 122: {
            if (redemptionDetails_ == null) {
              RedemptionDetails = new global::PassKitGrpcSDK.EventTickets.RedemptionDetails();
            }
            input.ReadMessage(RedemptionDetails);
            break;
          }
          case 130: {
            validateDetails_.AddEntriesFrom(ref input, _repeated_validateDetails_codec);
            break;
          }
          case 138: {
            if (passOverrides_ == null) {
              PassOverrides = new global::PassKitGrpcSDK.PassOverrides();
            }
            input.ReadMessage(PassOverrides);
            break;
          }
          case 146: {
            if (passMetaData_ == null) {
              PassMetaData = new global::PassKitGrpcSDK.Metadata();
            }
            input.ReadMessage(PassMetaData);
            break;
          }
          case 154: {
            if (created_ == null) {
              Created = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Created);
            break;
          }
          case 162: {
            if (updated_ == null) {
              Updated = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Updated);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ValidateDetails : pb::IMessage<ValidateDetails>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ValidateDetails> _parser = new pb::MessageParser<ValidateDetails>(() => new ValidateDetails());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ValidateDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKitGrpcSDK.EventTickets.TicketReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidateDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidateDetails(ValidateDetails other) : this() {
      validateDate_ = other.validateDate_ != null ? other.validateDate_.Clone() : null;
      lat_ = other.lat_;
      lon_ = other.lon_;
      alt_ = other.alt_;
      validateSource_ = other.validateSource_;
      validateReference_ = other.validateReference_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidateDetails Clone() {
      return new ValidateDetails(this);
    }

    /// <summary>Field number for the "validateDate" field.</summary>
    public const int ValidateDateFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp validateDate_;
    /// <summary>
    /// The date the ticket was validated, auto set by the system when the validate endpoint is called. Tickets can be validated multiple times. Not writable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ValidateDate {
      get { return validateDate_; }
      set {
        validateDate_ = value;
      }
    }

    /// <summary>Field number for the "lat" field.</summary>
    public const int LatFieldNumber = 2;
    private double lat_;
    /// <summary>
    /// Optional redemption lat.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Lat {
      get { return lat_; }
      set {
        lat_ = value;
      }
    }

    /// <summary>Field number for the "lon" field.</summary>
    public const int LonFieldNumber = 3;
    private double lon_;
    /// <summary>
    /// Optional redemption lon.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Lon {
      get { return lon_; }
      set {
        lon_ = value;
      }
    }

    /// <summary>Field number for the "alt" field.</summary>
    public const int AltFieldNumber = 4;
    private int alt_;
    /// <summary>
    /// Optional redemption alt.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Alt {
      get { return alt_; }
      set {
        alt_ = value;
      }
    }

    /// <summary>Field number for the "validateSource" field.</summary>
    public const int ValidateSourceFieldNumber = 6;
    private string validateSource_ = "";
    /// <summary>
    /// Optional validate user agent, can be used in case where a Merchant uses the PassKit scanning solution combined with their own scanning software and wants to differentiate the source of validation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ValidateSource {
      get { return validateSource_; }
      set {
        validateSource_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "validateReference" field.</summary>
    public const int ValidateReferenceFieldNumber = 7;
    private string validateReference_ = "";
    /// <summary>
    /// Optional validate reference, can be used for staff name, username, scanner ID, location ID, etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ValidateReference {
      get { return validateReference_; }
      set {
        validateReference_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ValidateDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ValidateDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ValidateDate, other.ValidateDate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Lat, other.Lat)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Lon, other.Lon)) return false;
      if (Alt != other.Alt) return false;
      if (ValidateSource != other.ValidateSource) return false;
      if (ValidateReference != other.ValidateReference) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (validateDate_ != null) hash ^= ValidateDate.GetHashCode();
      if (Lat != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Lat);
      if (Lon != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Lon);
      if (Alt != 0) hash ^= Alt.GetHashCode();
      if (ValidateSource.Length != 0) hash ^= ValidateSource.GetHashCode();
      if (ValidateReference.Length != 0) hash ^= ValidateReference.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (validateDate_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ValidateDate);
      }
      if (Lat != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Lat);
      }
      if (Lon != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Lon);
      }
      if (Alt != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Alt);
      }
      if (ValidateSource.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ValidateSource);
      }
      if (ValidateReference.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ValidateReference);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (validateDate_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ValidateDate);
      }
      if (Lat != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Lat);
      }
      if (Lon != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Lon);
      }
      if (Alt != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Alt);
      }
      if (ValidateSource.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ValidateSource);
      }
      if (ValidateReference.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ValidateReference);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (validateDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ValidateDate);
      }
      if (Lat != 0D) {
        size += 1 + 8;
      }
      if (Lon != 0D) {
        size += 1 + 8;
      }
      if (Alt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Alt);
      }
      if (ValidateSource.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ValidateSource);
      }
      if (ValidateReference.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ValidateReference);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ValidateDetails other) {
      if (other == null) {
        return;
      }
      if (other.validateDate_ != null) {
        if (validateDate_ == null) {
          ValidateDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ValidateDate.MergeFrom(other.ValidateDate);
      }
      if (other.Lat != 0D) {
        Lat = other.Lat;
      }
      if (other.Lon != 0D) {
        Lon = other.Lon;
      }
      if (other.Alt != 0) {
        Alt = other.Alt;
      }
      if (other.ValidateSource.Length != 0) {
        ValidateSource = other.ValidateSource;
      }
      if (other.ValidateReference.Length != 0) {
        ValidateReference = other.ValidateReference;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (validateDate_ == null) {
              ValidateDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ValidateDate);
            break;
          }
          case 17: {
            Lat = input.ReadDouble();
            break;
          }
          case 25: {
            Lon = input.ReadDouble();
            break;
          }
          case 32: {
            Alt = input.ReadInt32();
            break;
          }
          case 50: {
            ValidateSource = input.ReadString();
            break;
          }
          case 58: {
            ValidateReference = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (validateDate_ == null) {
              ValidateDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ValidateDate);
            break;
          }
          case 17: {
            Lat = input.ReadDouble();
            break;
          }
          case 25: {
            Lon = input.ReadDouble();
            break;
          }
          case 32: {
            Alt = input.ReadInt32();
            break;
          }
          case 50: {
            ValidateSource = input.ReadString();
            break;
          }
          case 58: {
            ValidateReference = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RedemptionDetails : pb::IMessage<RedemptionDetails>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RedemptionDetails> _parser = new pb::MessageParser<RedemptionDetails>(() => new RedemptionDetails());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RedemptionDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKitGrpcSDK.EventTickets.TicketReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedemptionDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedemptionDetails(RedemptionDetails other) : this() {
      redemptionDate_ = other.redemptionDate_ != null ? other.redemptionDate_.Clone() : null;
      lat_ = other.lat_;
      lon_ = other.lon_;
      alt_ = other.alt_;
      redemptionSource_ = other.redemptionSource_;
      redemptionReference_ = other.redemptionReference_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedemptionDetails Clone() {
      return new RedemptionDetails(this);
    }

    /// <summary>Field number for the "redemptionDate" field.</summary>
    public const int RedemptionDateFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp redemptionDate_;
    /// <summary>
    /// The date the ticket was redeemed, auto set by the system when the redeem endpoint is called. Not writable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp RedemptionDate {
      get { return redemptionDate_; }
      set {
        redemptionDate_ = value;
      }
    }

    /// <summary>Field number for the "lat" field.</summary>
    public const int LatFieldNumber = 2;
    private double lat_;
    /// <summary>
    /// Optional redemption lat.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Lat {
      get { return lat_; }
      set {
        lat_ = value;
      }
    }

    /// <summary>Field number for the "lon" field.</summary>
    public const int LonFieldNumber = 3;
    private double lon_;
    /// <summary>
    /// Optional redemption lon.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Lon {
      get { return lon_; }
      set {
        lon_ = value;
      }
    }

    /// <summary>Field number for the "alt" field.</summary>
    public const int AltFieldNumber = 4;
    private int alt_;
    /// <summary>
    /// Optional redemption alt.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Alt {
      get { return alt_; }
      set {
        alt_ = value;
      }
    }

    /// <summary>Field number for the "redemptionSource" field.</summary>
    public const int RedemptionSourceFieldNumber = 6;
    private string redemptionSource_ = "";
    /// <summary>
    /// Optional redemption user agent, can be used in case where a Merchant uses the PassKit scanning solution combined with their own scanning software and wants to differentiate the source of redemption.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RedemptionSource {
      get { return redemptionSource_; }
      set {
        redemptionSource_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "redemptionReference" field.</summary>
    public const int RedemptionReferenceFieldNumber = 7;
    private string redemptionReference_ = "";
    /// <summary>
    /// Optional redemption reference, can be used for staff name, username, scanner ID, location ID, etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RedemptionReference {
      get { return redemptionReference_; }
      set {
        redemptionReference_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RedemptionDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RedemptionDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RedemptionDate, other.RedemptionDate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Lat, other.Lat)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Lon, other.Lon)) return false;
      if (Alt != other.Alt) return false;
      if (RedemptionSource != other.RedemptionSource) return false;
      if (RedemptionReference != other.RedemptionReference) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (redemptionDate_ != null) hash ^= RedemptionDate.GetHashCode();
      if (Lat != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Lat);
      if (Lon != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Lon);
      if (Alt != 0) hash ^= Alt.GetHashCode();
      if (RedemptionSource.Length != 0) hash ^= RedemptionSource.GetHashCode();
      if (RedemptionReference.Length != 0) hash ^= RedemptionReference.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (redemptionDate_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RedemptionDate);
      }
      if (Lat != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Lat);
      }
      if (Lon != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Lon);
      }
      if (Alt != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Alt);
      }
      if (RedemptionSource.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(RedemptionSource);
      }
      if (RedemptionReference.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(RedemptionReference);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (redemptionDate_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RedemptionDate);
      }
      if (Lat != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Lat);
      }
      if (Lon != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Lon);
      }
      if (Alt != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Alt);
      }
      if (RedemptionSource.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(RedemptionSource);
      }
      if (RedemptionReference.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(RedemptionReference);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (redemptionDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RedemptionDate);
      }
      if (Lat != 0D) {
        size += 1 + 8;
      }
      if (Lon != 0D) {
        size += 1 + 8;
      }
      if (Alt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Alt);
      }
      if (RedemptionSource.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RedemptionSource);
      }
      if (RedemptionReference.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RedemptionReference);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RedemptionDetails other) {
      if (other == null) {
        return;
      }
      if (other.redemptionDate_ != null) {
        if (redemptionDate_ == null) {
          RedemptionDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        RedemptionDate.MergeFrom(other.RedemptionDate);
      }
      if (other.Lat != 0D) {
        Lat = other.Lat;
      }
      if (other.Lon != 0D) {
        Lon = other.Lon;
      }
      if (other.Alt != 0) {
        Alt = other.Alt;
      }
      if (other.RedemptionSource.Length != 0) {
        RedemptionSource = other.RedemptionSource;
      }
      if (other.RedemptionReference.Length != 0) {
        RedemptionReference = other.RedemptionReference;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (redemptionDate_ == null) {
              RedemptionDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(RedemptionDate);
            break;
          }
          case 17: {
            Lat = input.ReadDouble();
            break;
          }
          case 25: {
            Lon = input.ReadDouble();
            break;
          }
          case 32: {
            Alt = input.ReadInt32();
            break;
          }
          case 50: {
            RedemptionSource = input.ReadString();
            break;
          }
          case 58: {
            RedemptionReference = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (redemptionDate_ == null) {
              RedemptionDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(RedemptionDate);
            break;
          }
          case 17: {
            Lat = input.ReadDouble();
            break;
          }
          case 25: {
            Lon = input.ReadDouble();
            break;
          }
          case 32: {
            Alt = input.ReadInt32();
            break;
          }
          case 50: {
            RedemptionSource = input.ReadString();
            break;
          }
          case 58: {
            RedemptionReference = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FaceValue : pb::IMessage<FaceValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FaceValue> _parser = new pb::MessageParser<FaceValue>(() => new FaceValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FaceValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKitGrpcSDK.EventTickets.TicketReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FaceValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FaceValue(FaceValue other) : this() {
      amount_ = other.amount_;
      currency_ = other.currency_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FaceValue Clone() {
      return new FaceValue(this);
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 1;
    private float amount_;
    /// <summary>
    /// The ticket amount in cents.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 2;
    private string currency_ = "";
    /// <summary>
    /// The ticket currency.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FaceValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FaceValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Amount, other.Amount)) return false;
      if (Currency != other.Currency) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Amount != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Amount);
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Amount != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Amount);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Currency);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Amount != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Amount);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Currency);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Amount != 0F) {
        size += 1 + 4;
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FaceValue other) {
      if (other == null) {
        return;
      }
      if (other.Amount != 0F) {
        Amount = other.Amount;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Amount = input.ReadFloat();
            break;
          }
          case 18: {
            Currency = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Amount = input.ReadFloat();
            break;
          }
          case 18: {
            Currency = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Seat : pb::IMessage<Seat>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Seat> _parser = new pb::MessageParser<Seat>(() => new Seat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Seat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKitGrpcSDK.EventTickets.TicketReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Seat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Seat(Seat other) : this() {
      seat_ = other.seat_;
      localizedSeat_ = other.localizedSeat_ != null ? other.localizedSeat_.Clone() : null;
      row_ = other.row_;
      localizedRow_ = other.localizedRow_ != null ? other.localizedRow_.Clone() : null;
      section_ = other.section_;
      localizedSection_ = other.localizedSection_ != null ? other.localizedSection_.Clone() : null;
      gate_ = other.gate_;
      localizedGate_ = other.localizedGate_ != null ? other.localizedGate_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Seat Clone() {
      return new Seat(this);
    }

    /// <summary>Field number for the "seat" field.</summary>
    public const int Seat_FieldNumber = 1;
    private string seat_ = "";
    /// <summary>
    /// The seat number, such as "1", "2", "3", or any other seat identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Seat_ {
      get { return seat_; }
      set {
        seat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "localizedSeat" field.</summary>
    public const int LocalizedSeatFieldNumber = 2;
    private global::PassKitGrpcSDK.LocalizedString localizedSeat_;
    /// <summary>
    /// Localized seat number.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.LocalizedString LocalizedSeat {
      get { return localizedSeat_; }
      set {
        localizedSeat_ = value;
      }
    }

    /// <summary>Field number for the "row" field.</summary>
    public const int RowFieldNumber = 3;
    private string row_ = "";
    /// <summary>
    /// The row of the seat, such as "1", E", "BB", or "A5".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Row {
      get { return row_; }
      set {
        row_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "localizedRow" field.</summary>
    public const int LocalizedRowFieldNumber = 4;
    private global::PassKitGrpcSDK.LocalizedString localizedRow_;
    /// <summary>
    /// Localized row.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.LocalizedString LocalizedRow {
      get { return localizedRow_; }
      set {
        localizedRow_ = value;
      }
    }

    /// <summary>Field number for the "section" field.</summary>
    public const int SectionFieldNumber = 5;
    private string section_ = "";
    /// <summary>
    /// The section of the seat, such as "121".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Section {
      get { return section_; }
      set {
        section_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "localizedSection" field.</summary>
    public const int LocalizedSectionFieldNumber = 6;
    private global::PassKitGrpcSDK.LocalizedString localizedSection_;
    /// <summary>
    /// Localized section.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.LocalizedString LocalizedSection {
      get { return localizedSection_; }
      set {
        localizedSection_ = value;
      }
    }

    /// <summary>Field number for the "gate" field.</summary>
    public const int GateFieldNumber = 7;
    private string gate_ = "";
    /// <summary>
    /// The gate the ticket holder should enter to get to their seat, such as "A" or "West".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Gate {
      get { return gate_; }
      set {
        gate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "localizedGate" field.</summary>
    public const int LocalizedGateFieldNumber = 8;
    private global::PassKitGrpcSDK.LocalizedString localizedGate_;
    /// <summary>
    /// Localized gate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.LocalizedString LocalizedGate {
      get { return localizedGate_; }
      set {
        localizedGate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Seat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Seat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seat_ != other.Seat_) return false;
      if (!object.Equals(LocalizedSeat, other.LocalizedSeat)) return false;
      if (Row != other.Row) return false;
      if (!object.Equals(LocalizedRow, other.LocalizedRow)) return false;
      if (Section != other.Section) return false;
      if (!object.Equals(LocalizedSection, other.LocalizedSection)) return false;
      if (Gate != other.Gate) return false;
      if (!object.Equals(LocalizedGate, other.LocalizedGate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Seat_.Length != 0) hash ^= Seat_.GetHashCode();
      if (localizedSeat_ != null) hash ^= LocalizedSeat.GetHashCode();
      if (Row.Length != 0) hash ^= Row.GetHashCode();
      if (localizedRow_ != null) hash ^= LocalizedRow.GetHashCode();
      if (Section.Length != 0) hash ^= Section.GetHashCode();
      if (localizedSection_ != null) hash ^= LocalizedSection.GetHashCode();
      if (Gate.Length != 0) hash ^= Gate.GetHashCode();
      if (localizedGate_ != null) hash ^= LocalizedGate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Seat_.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Seat_);
      }
      if (localizedSeat_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LocalizedSeat);
      }
      if (Row.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Row);
      }
      if (localizedRow_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LocalizedRow);
      }
      if (Section.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Section);
      }
      if (localizedSection_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(LocalizedSection);
      }
      if (Gate.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Gate);
      }
      if (localizedGate_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(LocalizedGate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Seat_.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Seat_);
      }
      if (localizedSeat_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LocalizedSeat);
      }
      if (Row.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Row);
      }
      if (localizedRow_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LocalizedRow);
      }
      if (Section.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Section);
      }
      if (localizedSection_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(LocalizedSection);
      }
      if (Gate.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Gate);
      }
      if (localizedGate_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(LocalizedGate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Seat_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Seat_);
      }
      if (localizedSeat_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalizedSeat);
      }
      if (Row.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Row);
      }
      if (localizedRow_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalizedRow);
      }
      if (Section.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Section);
      }
      if (localizedSection_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalizedSection);
      }
      if (Gate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Gate);
      }
      if (localizedGate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalizedGate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Seat other) {
      if (other == null) {
        return;
      }
      if (other.Seat_.Length != 0) {
        Seat_ = other.Seat_;
      }
      if (other.localizedSeat_ != null) {
        if (localizedSeat_ == null) {
          LocalizedSeat = new global::PassKitGrpcSDK.LocalizedString();
        }
        LocalizedSeat.MergeFrom(other.LocalizedSeat);
      }
      if (other.Row.Length != 0) {
        Row = other.Row;
      }
      if (other.localizedRow_ != null) {
        if (localizedRow_ == null) {
          LocalizedRow = new global::PassKitGrpcSDK.LocalizedString();
        }
        LocalizedRow.MergeFrom(other.LocalizedRow);
      }
      if (other.Section.Length != 0) {
        Section = other.Section;
      }
      if (other.localizedSection_ != null) {
        if (localizedSection_ == null) {
          LocalizedSection = new global::PassKitGrpcSDK.LocalizedString();
        }
        LocalizedSection.MergeFrom(other.LocalizedSection);
      }
      if (other.Gate.Length != 0) {
        Gate = other.Gate;
      }
      if (other.localizedGate_ != null) {
        if (localizedGate_ == null) {
          LocalizedGate = new global::PassKitGrpcSDK.LocalizedString();
        }
        LocalizedGate.MergeFrom(other.LocalizedGate);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Seat_ = input.ReadString();
            break;
          }
          case 18: {
            if (localizedSeat_ == null) {
              LocalizedSeat = new global::PassKitGrpcSDK.LocalizedString();
            }
            input.ReadMessage(LocalizedSeat);
            break;
          }
          case 26: {
            Row = input.ReadString();
            break;
          }
          case 34: {
            if (localizedRow_ == null) {
              LocalizedRow = new global::PassKitGrpcSDK.LocalizedString();
            }
            input.ReadMessage(LocalizedRow);
            break;
          }
          case 42: {
            Section = input.ReadString();
            break;
          }
          case 50: {
            if (localizedSection_ == null) {
              LocalizedSection = new global::PassKitGrpcSDK.LocalizedString();
            }
            input.ReadMessage(LocalizedSection);
            break;
          }
          case 58: {
            Gate = input.ReadString();
            break;
          }
          case 66: {
            if (localizedGate_ == null) {
              LocalizedGate = new global::PassKitGrpcSDK.LocalizedString();
            }
            input.ReadMessage(LocalizedGate);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Seat_ = input.ReadString();
            break;
          }
          case 18: {
            if (localizedSeat_ == null) {
              LocalizedSeat = new global::PassKitGrpcSDK.LocalizedString();
            }
            input.ReadMessage(LocalizedSeat);
            break;
          }
          case 26: {
            Row = input.ReadString();
            break;
          }
          case 34: {
            if (localizedRow_ == null) {
              LocalizedRow = new global::PassKitGrpcSDK.LocalizedString();
            }
            input.ReadMessage(LocalizedRow);
            break;
          }
          case 42: {
            Section = input.ReadString();
            break;
          }
          case 50: {
            if (localizedSection_ == null) {
              LocalizedSection = new global::PassKitGrpcSDK.LocalizedString();
            }
            input.ReadMessage(LocalizedSection);
            break;
          }
          case 58: {
            Gate = input.ReadString();
            break;
          }
          case 66: {
            if (localizedGate_ == null) {
              LocalizedGate = new global::PassKitGrpcSDK.LocalizedString();
            }
            input.ReadMessage(LocalizedGate);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TicketListRequest : pb::IMessage<TicketListRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TicketListRequest> _parser = new pb::MessageParser<TicketListRequest>(() => new TicketListRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TicketListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKitGrpcSDK.EventTickets.TicketReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketListRequest(TicketListRequest other) : this() {
      filters_ = other.filters_ != null ? other.filters_.Clone() : null;
      switch (other.ProductionCase) {
        case ProductionOneofCase.ProductionId:
          ProductionId = other.ProductionId;
          break;
        case ProductionOneofCase.ProductionUid:
          ProductionUid = other.ProductionUid;
          break;
      }

      switch (other.EventCase) {
        case EventOneofCase.EventId:
          EventId = other.EventId;
          break;
        case EventOneofCase.EventFilterByVenueAndStart:
          EventFilterByVenueAndStart = other.EventFilterByVenueAndStart.Clone();
          break;
      }

      switch (other.TicketTypeCase) {
        case TicketTypeOneofCase.TicketTypeId:
          TicketTypeId = other.TicketTypeId;
          break;
        case TicketTypeOneofCase.TicketTypeUid:
          TicketTypeUid = other.TicketTypeUid;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketListRequest Clone() {
      return new TicketListRequest(this);
    }

    /// <summary>Field number for the "productionId" field.</summary>
    public const int ProductionIdFieldNumber = 1;
    /// <summary>
    /// Production ID. Required if productionUid is not provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductionId {
      get { return productionCase_ == ProductionOneofCase.ProductionId ? (string) production_ : ""; }
      set {
        production_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        productionCase_ = ProductionOneofCase.ProductionId;
      }
    }

    /// <summary>Field number for the "productionUid" field.</summary>
    public const int ProductionUidFieldNumber = 2;
    /// <summary>
    /// Production UID. Required if productionId is not provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductionUid {
      get { return productionCase_ == ProductionOneofCase.ProductionUid ? (string) production_ : ""; }
      set {
        production_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        productionCase_ = ProductionOneofCase.ProductionUid;
      }
    }

    /// <summary>Field number for the "eventId" field.</summary>
    public const int EventIdFieldNumber = 3;
    /// <summary>
    /// Event ID generated by PassKit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventId {
      get { return eventCase_ == EventOneofCase.EventId ? (string) event_ : ""; }
      set {
        event_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        eventCase_ = EventOneofCase.EventId;
      }
    }

    /// <summary>Field number for the "eventFilterByVenueAndStart" field.</summary>
    public const int EventFilterByVenueAndStartFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.EventTickets.EventFilterByVenueAndStart EventFilterByVenueAndStart {
      get { return eventCase_ == EventOneofCase.EventFilterByVenueAndStart ? (global::PassKitGrpcSDK.EventTickets.EventFilterByVenueAndStart) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.EventFilterByVenueAndStart;
      }
    }

    /// <summary>Field number for the "ticketTypeId" field.</summary>
    public const int TicketTypeIdFieldNumber = 5;
    /// <summary>
    /// PassKit Ticket Type ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TicketTypeId {
      get { return ticketTypeCase_ == TicketTypeOneofCase.TicketTypeId ? (string) ticketType_ : ""; }
      set {
        ticketType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        ticketTypeCase_ = TicketTypeOneofCase.TicketTypeId;
      }
    }

    /// <summary>Field number for the "ticketTypeUid" field.</summary>
    public const int TicketTypeUidFieldNumber = 6;
    /// <summary>
    /// User Defined Ticket Type ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TicketTypeUid {
      get { return ticketTypeCase_ == TicketTypeOneofCase.TicketTypeUid ? (string) ticketType_ : ""; }
      set {
        ticketType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        ticketTypeCase_ = TicketTypeOneofCase.TicketTypeUid;
      }
    }

    /// <summary>Field number for the "filters" field.</summary>
    public const int FiltersFieldNumber = 7;
    private global::PassKitGrpcSDK.Filters filters_;
    /// <summary>
    /// Filters: allows to filter on additional ticket data (i.e. group id, pass install status, updated etc).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.Filters Filters {
      get { return filters_; }
      set {
        filters_ = value;
      }
    }

    private object production_;
    /// <summary>Enum of possible cases for the "production" oneof.</summary>
    public enum ProductionOneofCase {
      None = 0,
      ProductionId = 1,
      ProductionUid = 2,
    }
    private ProductionOneofCase productionCase_ = ProductionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductionOneofCase ProductionCase {
      get { return productionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProduction() {
      productionCase_ = ProductionOneofCase.None;
      production_ = null;
    }

    private object event_;
    /// <summary>Enum of possible cases for the "event" oneof.</summary>
    public enum EventOneofCase {
      None = 0,
      EventId = 3,
      EventFilterByVenueAndStart = 4,
    }
    private EventOneofCase eventCase_ = EventOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventOneofCase EventCase {
      get { return eventCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEvent() {
      eventCase_ = EventOneofCase.None;
      event_ = null;
    }

    private object ticketType_;
    /// <summary>Enum of possible cases for the "ticketType" oneof.</summary>
    public enum TicketTypeOneofCase {
      None = 0,
      TicketTypeId = 5,
      TicketTypeUid = 6,
    }
    private TicketTypeOneofCase ticketTypeCase_ = TicketTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketTypeOneofCase TicketTypeCase {
      get { return ticketTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTicketType() {
      ticketTypeCase_ = TicketTypeOneofCase.None;
      ticketType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TicketListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TicketListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProductionId != other.ProductionId) return false;
      if (ProductionUid != other.ProductionUid) return false;
      if (EventId != other.EventId) return false;
      if (!object.Equals(EventFilterByVenueAndStart, other.EventFilterByVenueAndStart)) return false;
      if (TicketTypeId != other.TicketTypeId) return false;
      if (TicketTypeUid != other.TicketTypeUid) return false;
      if (!object.Equals(Filters, other.Filters)) return false;
      if (ProductionCase != other.ProductionCase) return false;
      if (EventCase != other.EventCase) return false;
      if (TicketTypeCase != other.TicketTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (productionCase_ == ProductionOneofCase.ProductionId) hash ^= ProductionId.GetHashCode();
      if (productionCase_ == ProductionOneofCase.ProductionUid) hash ^= ProductionUid.GetHashCode();
      if (eventCase_ == EventOneofCase.EventId) hash ^= EventId.GetHashCode();
      if (eventCase_ == EventOneofCase.EventFilterByVenueAndStart) hash ^= EventFilterByVenueAndStart.GetHashCode();
      if (ticketTypeCase_ == TicketTypeOneofCase.TicketTypeId) hash ^= TicketTypeId.GetHashCode();
      if (ticketTypeCase_ == TicketTypeOneofCase.TicketTypeUid) hash ^= TicketTypeUid.GetHashCode();
      if (filters_ != null) hash ^= Filters.GetHashCode();
      hash ^= (int) productionCase_;
      hash ^= (int) eventCase_;
      hash ^= (int) ticketTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (productionCase_ == ProductionOneofCase.ProductionId) {
        output.WriteRawTag(10);
        output.WriteString(ProductionId);
      }
      if (productionCase_ == ProductionOneofCase.ProductionUid) {
        output.WriteRawTag(18);
        output.WriteString(ProductionUid);
      }
      if (eventCase_ == EventOneofCase.EventId) {
        output.WriteRawTag(26);
        output.WriteString(EventId);
      }
      if (eventCase_ == EventOneofCase.EventFilterByVenueAndStart) {
        output.WriteRawTag(34);
        output.WriteMessage(EventFilterByVenueAndStart);
      }
      if (ticketTypeCase_ == TicketTypeOneofCase.TicketTypeId) {
        output.WriteRawTag(42);
        output.WriteString(TicketTypeId);
      }
      if (ticketTypeCase_ == TicketTypeOneofCase.TicketTypeUid) {
        output.WriteRawTag(50);
        output.WriteString(TicketTypeUid);
      }
      if (filters_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Filters);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (productionCase_ == ProductionOneofCase.ProductionId) {
        output.WriteRawTag(10);
        output.WriteString(ProductionId);
      }
      if (productionCase_ == ProductionOneofCase.ProductionUid) {
        output.WriteRawTag(18);
        output.WriteString(ProductionUid);
      }
      if (eventCase_ == EventOneofCase.EventId) {
        output.WriteRawTag(26);
        output.WriteString(EventId);
      }
      if (eventCase_ == EventOneofCase.EventFilterByVenueAndStart) {
        output.WriteRawTag(34);
        output.WriteMessage(EventFilterByVenueAndStart);
      }
      if (ticketTypeCase_ == TicketTypeOneofCase.TicketTypeId) {
        output.WriteRawTag(42);
        output.WriteString(TicketTypeId);
      }
      if (ticketTypeCase_ == TicketTypeOneofCase.TicketTypeUid) {
        output.WriteRawTag(50);
        output.WriteString(TicketTypeUid);
      }
      if (filters_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Filters);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (productionCase_ == ProductionOneofCase.ProductionId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductionId);
      }
      if (productionCase_ == ProductionOneofCase.ProductionUid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductionUid);
      }
      if (eventCase_ == EventOneofCase.EventId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventId);
      }
      if (eventCase_ == EventOneofCase.EventFilterByVenueAndStart) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventFilterByVenueAndStart);
      }
      if (ticketTypeCase_ == TicketTypeOneofCase.TicketTypeId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TicketTypeId);
      }
      if (ticketTypeCase_ == TicketTypeOneofCase.TicketTypeUid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TicketTypeUid);
      }
      if (filters_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Filters);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TicketListRequest other) {
      if (other == null) {
        return;
      }
      if (other.filters_ != null) {
        if (filters_ == null) {
          Filters = new global::PassKitGrpcSDK.Filters();
        }
        Filters.MergeFrom(other.Filters);
      }
      switch (other.ProductionCase) {
        case ProductionOneofCase.ProductionId:
          ProductionId = other.ProductionId;
          break;
        case ProductionOneofCase.ProductionUid:
          ProductionUid = other.ProductionUid;
          break;
      }

      switch (other.EventCase) {
        case EventOneofCase.EventId:
          EventId = other.EventId;
          break;
        case EventOneofCase.EventFilterByVenueAndStart:
          if (EventFilterByVenueAndStart == null) {
            EventFilterByVenueAndStart = new global::PassKitGrpcSDK.EventTickets.EventFilterByVenueAndStart();
          }
          EventFilterByVenueAndStart.MergeFrom(other.EventFilterByVenueAndStart);
          break;
      }

      switch (other.TicketTypeCase) {
        case TicketTypeOneofCase.TicketTypeId:
          TicketTypeId = other.TicketTypeId;
          break;
        case TicketTypeOneofCase.TicketTypeUid:
          TicketTypeUid = other.TicketTypeUid;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ProductionId = input.ReadString();
            break;
          }
          case 18: {
            ProductionUid = input.ReadString();
            break;
          }
          case 26: {
            EventId = input.ReadString();
            break;
          }
          case 34: {
            global::PassKitGrpcSDK.EventTickets.EventFilterByVenueAndStart subBuilder = new global::PassKitGrpcSDK.EventTickets.EventFilterByVenueAndStart();
            if (eventCase_ == EventOneofCase.EventFilterByVenueAndStart) {
              subBuilder.MergeFrom(EventFilterByVenueAndStart);
            }
            input.ReadMessage(subBuilder);
            EventFilterByVenueAndStart = subBuilder;
            break;
          }
          case 42: {
            TicketTypeId = input.ReadString();
            break;
          }
          case 50: {
            TicketTypeUid = input.ReadString();
            break;
          }
          case 58: {
            if (filters_ == null) {
              Filters = new global::PassKitGrpcSDK.Filters();
            }
            input.ReadMessage(Filters);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ProductionId = input.ReadString();
            break;
          }
          case 18: {
            ProductionUid = input.ReadString();
            break;
          }
          case 26: {
            EventId = input.ReadString();
            break;
          }
          case 34: {
            global::PassKitGrpcSDK.EventTickets.EventFilterByVenueAndStart subBuilder = new global::PassKitGrpcSDK.EventTickets.EventFilterByVenueAndStart();
            if (eventCase_ == EventOneofCase.EventFilterByVenueAndStart) {
              subBuilder.MergeFrom(EventFilterByVenueAndStart);
            }
            input.ReadMessage(subBuilder);
            EventFilterByVenueAndStart = subBuilder;
            break;
          }
          case 42: {
            TicketTypeId = input.ReadString();
            break;
          }
          case 50: {
            TicketTypeUid = input.ReadString();
            break;
          }
          case 58: {
            if (filters_ == null) {
              Filters = new global::PassKitGrpcSDK.Filters();
            }
            input.ReadMessage(Filters);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventFilterByVenueAndStart : pb::IMessage<EventFilterByVenueAndStart>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventFilterByVenueAndStart> _parser = new pb::MessageParser<EventFilterByVenueAndStart>(() => new EventFilterByVenueAndStart());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventFilterByVenueAndStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKitGrpcSDK.EventTickets.TicketReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFilterByVenueAndStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFilterByVenueAndStart(EventFilterByVenueAndStart other) : this() {
      venueId_ = other.venueId_;
      venueUid_ = other.venueUid_;
      scheduledStartDate_ = other.scheduledStartDate_ != null ? other.scheduledStartDate_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventFilterByVenueAndStart Clone() {
      return new EventFilterByVenueAndStart(this);
    }

    /// <summary>Field number for the "venueId" field.</summary>
    public const int VenueIdFieldNumber = 1;
    private string venueId_ = "";
    /// <summary>
    /// Venue ID. Required if venueUid is not provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VenueId {
      get { return venueId_; }
      set {
        venueId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "venueUid" field.</summary>
    public const int VenueUidFieldNumber = 2;
    private string venueUid_ = "";
    /// <summary>
    /// Venue UID. Required if venueId is not provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VenueUid {
      get { return venueUid_; }
      set {
        venueUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scheduledStartDate" field.</summary>
    public const int ScheduledStartDateFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp scheduledStartDate_;
    /// <summary>
    /// Event scheduled start date time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ScheduledStartDate {
      get { return scheduledStartDate_; }
      set {
        scheduledStartDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventFilterByVenueAndStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventFilterByVenueAndStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VenueId != other.VenueId) return false;
      if (VenueUid != other.VenueUid) return false;
      if (!object.Equals(ScheduledStartDate, other.ScheduledStartDate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VenueId.Length != 0) hash ^= VenueId.GetHashCode();
      if (VenueUid.Length != 0) hash ^= VenueUid.GetHashCode();
      if (scheduledStartDate_ != null) hash ^= ScheduledStartDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (VenueId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(VenueId);
      }
      if (VenueUid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VenueUid);
      }
      if (scheduledStartDate_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ScheduledStartDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (VenueId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(VenueId);
      }
      if (VenueUid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VenueUid);
      }
      if (scheduledStartDate_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ScheduledStartDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VenueId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VenueId);
      }
      if (VenueUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VenueUid);
      }
      if (scheduledStartDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScheduledStartDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventFilterByVenueAndStart other) {
      if (other == null) {
        return;
      }
      if (other.VenueId.Length != 0) {
        VenueId = other.VenueId;
      }
      if (other.VenueUid.Length != 0) {
        VenueUid = other.VenueUid;
      }
      if (other.scheduledStartDate_ != null) {
        if (scheduledStartDate_ == null) {
          ScheduledStartDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ScheduledStartDate.MergeFrom(other.ScheduledStartDate);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            VenueId = input.ReadString();
            break;
          }
          case 18: {
            VenueUid = input.ReadString();
            break;
          }
          case 26: {
            if (scheduledStartDate_ == null) {
              ScheduledStartDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ScheduledStartDate);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            VenueId = input.ReadString();
            break;
          }
          case 18: {
            VenueUid = input.ReadString();
            break;
          }
          case 26: {
            if (scheduledStartDate_ == null) {
              ScheduledStartDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ScheduledStartDate);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TicketNumberRequest : pb::IMessage<TicketNumberRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TicketNumberRequest> _parser = new pb::MessageParser<TicketNumberRequest>(() => new TicketNumberRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TicketNumberRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKitGrpcSDK.EventTickets.TicketReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketNumberRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketNumberRequest(TicketNumberRequest other) : this() {
      productionId_ = other.productionId_;
      productionUid_ = other.productionUid_;
      ticketNumber_ = other.ticketNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketNumberRequest Clone() {
      return new TicketNumberRequest(this);
    }

    /// <summary>Field number for the "productionId" field.</summary>
    public const int ProductionIdFieldNumber = 1;
    private string productionId_ = "";
    /// <summary>
    /// Production ID. Required if productionUid is not provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductionId {
      get { return productionId_; }
      set {
        productionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "productionUid" field.</summary>
    public const int ProductionUidFieldNumber = 2;
    private string productionUid_ = "";
    /// <summary>
    /// Production UID. Required if productionId is not provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductionUid {
      get { return productionUid_; }
      set {
        productionUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticketNumber" field.</summary>
    public const int TicketNumberFieldNumber = 3;
    private string ticketNumber_ = "";
    /// <summary>
    /// Ticket Number.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TicketNumber {
      get { return ticketNumber_; }
      set {
        ticketNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TicketNumberRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TicketNumberRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProductionId != other.ProductionId) return false;
      if (ProductionUid != other.ProductionUid) return false;
      if (TicketNumber != other.TicketNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProductionId.Length != 0) hash ^= ProductionId.GetHashCode();
      if (ProductionUid.Length != 0) hash ^= ProductionUid.GetHashCode();
      if (TicketNumber.Length != 0) hash ^= TicketNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ProductionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProductionId);
      }
      if (ProductionUid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProductionUid);
      }
      if (TicketNumber.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TicketNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ProductionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProductionId);
      }
      if (ProductionUid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProductionUid);
      }
      if (TicketNumber.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TicketNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProductionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductionId);
      }
      if (ProductionUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductionUid);
      }
      if (TicketNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TicketNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TicketNumberRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProductionId.Length != 0) {
        ProductionId = other.ProductionId;
      }
      if (other.ProductionUid.Length != 0) {
        ProductionUid = other.ProductionUid;
      }
      if (other.TicketNumber.Length != 0) {
        TicketNumber = other.TicketNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ProductionId = input.ReadString();
            break;
          }
          case 18: {
            ProductionUid = input.ReadString();
            break;
          }
          case 26: {
            TicketNumber = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ProductionId = input.ReadString();
            break;
          }
          case 18: {
            ProductionUid = input.ReadString();
            break;
          }
          case 26: {
            TicketNumber = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class OrderNumberRequest : pb::IMessage<OrderNumberRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OrderNumberRequest> _parser = new pb::MessageParser<OrderNumberRequest>(() => new OrderNumberRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderNumberRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKitGrpcSDK.EventTickets.TicketReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderNumberRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderNumberRequest(OrderNumberRequest other) : this() {
      productionId_ = other.productionId_;
      productionUid_ = other.productionUid_;
      orderNumber_ = other.orderNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderNumberRequest Clone() {
      return new OrderNumberRequest(this);
    }

    /// <summary>Field number for the "productionId" field.</summary>
    public const int ProductionIdFieldNumber = 1;
    private string productionId_ = "";
    /// <summary>
    /// Production ID. Required if productionUid is not provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductionId {
      get { return productionId_; }
      set {
        productionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "productionUid" field.</summary>
    public const int ProductionUidFieldNumber = 2;
    private string productionUid_ = "";
    /// <summary>
    /// Production UID. Required if productionId is not provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductionUid {
      get { return productionUid_; }
      set {
        productionUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "orderNumber" field.</summary>
    public const int OrderNumberFieldNumber = 3;
    private string orderNumber_ = "";
    /// <summary>
    /// Order Number.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderNumber {
      get { return orderNumber_; }
      set {
        orderNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderNumberRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderNumberRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProductionId != other.ProductionId) return false;
      if (ProductionUid != other.ProductionUid) return false;
      if (OrderNumber != other.OrderNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProductionId.Length != 0) hash ^= ProductionId.GetHashCode();
      if (ProductionUid.Length != 0) hash ^= ProductionUid.GetHashCode();
      if (OrderNumber.Length != 0) hash ^= OrderNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ProductionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProductionId);
      }
      if (ProductionUid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProductionUid);
      }
      if (OrderNumber.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OrderNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ProductionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProductionId);
      }
      if (ProductionUid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProductionUid);
      }
      if (OrderNumber.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OrderNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProductionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductionId);
      }
      if (ProductionUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductionUid);
      }
      if (OrderNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderNumberRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProductionId.Length != 0) {
        ProductionId = other.ProductionId;
      }
      if (other.ProductionUid.Length != 0) {
        ProductionUid = other.ProductionUid;
      }
      if (other.OrderNumber.Length != 0) {
        OrderNumber = other.OrderNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ProductionId = input.ReadString();
            break;
          }
          case 18: {
            ProductionUid = input.ReadString();
            break;
          }
          case 26: {
            OrderNumber = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ProductionId = input.ReadString();
            break;
          }
          case 18: {
            ProductionUid = input.ReadString();
            break;
          }
          case 26: {
            OrderNumber = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RedeemByOrderNumber : pb::IMessage<RedeemByOrderNumber>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RedeemByOrderNumber> _parser = new pb::MessageParser<RedeemByOrderNumber>(() => new RedeemByOrderNumber());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RedeemByOrderNumber> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKitGrpcSDK.EventTickets.TicketReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedeemByOrderNumber() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedeemByOrderNumber(RedeemByOrderNumber other) : this() {
      productionId_ = other.productionId_;
      productionUid_ = other.productionUid_;
      orderNumber_ = other.orderNumber_;
      redemptionDetails_ = other.redemptionDetails_ != null ? other.redemptionDetails_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedeemByOrderNumber Clone() {
      return new RedeemByOrderNumber(this);
    }

    /// <summary>Field number for the "productionId" field.</summary>
    public const int ProductionIdFieldNumber = 1;
    private string productionId_ = "";
    /// <summary>
    /// Production ID. Required if productionUid is not provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductionId {
      get { return productionId_; }
      set {
        productionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "productionUid" field.</summary>
    public const int ProductionUidFieldNumber = 2;
    private string productionUid_ = "";
    /// <summary>
    /// Production UID. Required if productionId is not provided
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductionUid {
      get { return productionUid_; }
      set {
        productionUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "orderNumber" field.</summary>
    public const int OrderNumberFieldNumber = 3;
    private string orderNumber_ = "";
    /// <summary>
    /// Order Number.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderNumber {
      get { return orderNumber_; }
      set {
        orderNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "redemptionDetails" field.</summary>
    public const int RedemptionDetailsFieldNumber = 4;
    private global::PassKitGrpcSDK.EventTickets.RedemptionDetails redemptionDetails_;
    /// <summary>
    /// Details about the redemption.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.EventTickets.RedemptionDetails RedemptionDetails {
      get { return redemptionDetails_; }
      set {
        redemptionDetails_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RedeemByOrderNumber);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RedeemByOrderNumber other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProductionId != other.ProductionId) return false;
      if (ProductionUid != other.ProductionUid) return false;
      if (OrderNumber != other.OrderNumber) return false;
      if (!object.Equals(RedemptionDetails, other.RedemptionDetails)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProductionId.Length != 0) hash ^= ProductionId.GetHashCode();
      if (ProductionUid.Length != 0) hash ^= ProductionUid.GetHashCode();
      if (OrderNumber.Length != 0) hash ^= OrderNumber.GetHashCode();
      if (redemptionDetails_ != null) hash ^= RedemptionDetails.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ProductionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProductionId);
      }
      if (ProductionUid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProductionUid);
      }
      if (OrderNumber.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OrderNumber);
      }
      if (redemptionDetails_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RedemptionDetails);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ProductionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProductionId);
      }
      if (ProductionUid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProductionUid);
      }
      if (OrderNumber.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OrderNumber);
      }
      if (redemptionDetails_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RedemptionDetails);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProductionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductionId);
      }
      if (ProductionUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductionUid);
      }
      if (OrderNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderNumber);
      }
      if (redemptionDetails_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RedemptionDetails);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RedeemByOrderNumber other) {
      if (other == null) {
        return;
      }
      if (other.ProductionId.Length != 0) {
        ProductionId = other.ProductionId;
      }
      if (other.ProductionUid.Length != 0) {
        ProductionUid = other.ProductionUid;
      }
      if (other.OrderNumber.Length != 0) {
        OrderNumber = other.OrderNumber;
      }
      if (other.redemptionDetails_ != null) {
        if (redemptionDetails_ == null) {
          RedemptionDetails = new global::PassKitGrpcSDK.EventTickets.RedemptionDetails();
        }
        RedemptionDetails.MergeFrom(other.RedemptionDetails);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ProductionId = input.ReadString();
            break;
          }
          case 18: {
            ProductionUid = input.ReadString();
            break;
          }
          case 26: {
            OrderNumber = input.ReadString();
            break;
          }
          case 34: {
            if (redemptionDetails_ == null) {
              RedemptionDetails = new global::PassKitGrpcSDK.EventTickets.RedemptionDetails();
            }
            input.ReadMessage(RedemptionDetails);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ProductionId = input.ReadString();
            break;
          }
          case 18: {
            ProductionUid = input.ReadString();
            break;
          }
          case 26: {
            OrderNumber = input.ReadString();
            break;
          }
          case 34: {
            if (redemptionDetails_ == null) {
              RedemptionDetails = new global::PassKitGrpcSDK.EventTickets.RedemptionDetails();
            }
            input.ReadMessage(RedemptionDetails);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Tickets : pb::IMessage<Tickets>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Tickets> _parser = new pb::MessageParser<Tickets>(() => new Tickets());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Tickets> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKitGrpcSDK.EventTickets.TicketReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tickets() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tickets(Tickets other) : this() {
      tickets_ = other.tickets_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tickets Clone() {
      return new Tickets(this);
    }

    /// <summary>Field number for the "tickets" field.</summary>
    public const int Tickets_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::PassKitGrpcSDK.EventTickets.TicketLimitedFields> _repeated_tickets_codec
        = pb::FieldCodec.ForMessage(10, global::PassKitGrpcSDK.EventTickets.TicketLimitedFields.Parser);
    private readonly pbc::RepeatedField<global::PassKitGrpcSDK.EventTickets.TicketLimitedFields> tickets_ = new pbc::RepeatedField<global::PassKitGrpcSDK.EventTickets.TicketLimitedFields>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PassKitGrpcSDK.EventTickets.TicketLimitedFields> Tickets_ {
      get { return tickets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Tickets);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Tickets other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tickets_.Equals(other.tickets_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tickets_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      tickets_.WriteTo(output, _repeated_tickets_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      tickets_.WriteTo(ref output, _repeated_tickets_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tickets_.CalculateSize(_repeated_tickets_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Tickets other) {
      if (other == null) {
        return;
      }
      tickets_.Add(other.tickets_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            tickets_.AddEntriesFrom(input, _repeated_tickets_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            tickets_.AddEntriesFrom(ref input, _repeated_tickets_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TicketPassBundles : pb::IMessage<TicketPassBundles>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TicketPassBundles> _parser = new pb::MessageParser<TicketPassBundles>(() => new TicketPassBundles());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TicketPassBundles> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKitGrpcSDK.EventTickets.TicketReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketPassBundles() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketPassBundles(TicketPassBundles other) : this() {
      tickets_ = other.tickets_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketPassBundles Clone() {
      return new TicketPassBundles(this);
    }

    /// <summary>Field number for the "tickets" field.</summary>
    public const int TicketsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PassKitGrpcSDK.PassBundle> _repeated_tickets_codec
        = pb::FieldCodec.ForMessage(10, global::PassKitGrpcSDK.PassBundle.Parser);
    private readonly pbc::RepeatedField<global::PassKitGrpcSDK.PassBundle> tickets_ = new pbc::RepeatedField<global::PassKitGrpcSDK.PassBundle>();
    /// <summary>
    /// An array of tickets.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PassKitGrpcSDK.PassBundle> Tickets {
      get { return tickets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TicketPassBundles);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TicketPassBundles other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tickets_.Equals(other.tickets_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tickets_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      tickets_.WriteTo(output, _repeated_tickets_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      tickets_.WriteTo(ref output, _repeated_tickets_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tickets_.CalculateSize(_repeated_tickets_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TicketPassBundles other) {
      if (other == null) {
        return;
      }
      tickets_.Add(other.tickets_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            tickets_.AddEntriesFrom(input, _repeated_tickets_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            tickets_.AddEntriesFrom(ref input, _repeated_tickets_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ValidateTicketRequest : pb::IMessage<ValidateTicketRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ValidateTicketRequest> _parser = new pb::MessageParser<ValidateTicketRequest>(() => new ValidateTicketRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ValidateTicketRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKitGrpcSDK.EventTickets.TicketReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidateTicketRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidateTicketRequest(ValidateTicketRequest other) : this() {
      maxNumberOfValidations_ = other.maxNumberOfValidations_;
      ticket_ = other.ticket_ != null ? other.ticket_.Clone() : null;
      validateDetails_ = other.validateDetails_ != null ? other.validateDetails_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidateTicketRequest Clone() {
      return new ValidateTicketRequest(this);
    }

    /// <summary>Field number for the "maxNumberOfValidations" field.</summary>
    public const int MaxNumberOfValidationsFieldNumber = 1;
    private uint maxNumberOfValidations_;
    /// <summary>
    /// If provided will auto redeem ticket once max number of validations has been reached.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxNumberOfValidations {
      get { return maxNumberOfValidations_; }
      set {
        maxNumberOfValidations_ = value;
      }
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 2;
    private global::PassKitGrpcSDK.EventTickets.TicketId ticket_;
    /// <summary>
    /// Ticket id for the ticket to validate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.EventTickets.TicketId Ticket {
      get { return ticket_; }
      set {
        ticket_ = value;
      }
    }

    /// <summary>Field number for the "validateDetails" field.</summary>
    public const int ValidateDetailsFieldNumber = 3;
    private global::PassKitGrpcSDK.EventTickets.ValidateDetails validateDetails_;
    /// <summary>
    /// Additional details to set for this validation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.EventTickets.ValidateDetails ValidateDetails {
      get { return validateDetails_; }
      set {
        validateDetails_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ValidateTicketRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ValidateTicketRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxNumberOfValidations != other.MaxNumberOfValidations) return false;
      if (!object.Equals(Ticket, other.Ticket)) return false;
      if (!object.Equals(ValidateDetails, other.ValidateDetails)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxNumberOfValidations != 0) hash ^= MaxNumberOfValidations.GetHashCode();
      if (ticket_ != null) hash ^= Ticket.GetHashCode();
      if (validateDetails_ != null) hash ^= ValidateDetails.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MaxNumberOfValidations != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MaxNumberOfValidations);
      }
      if (ticket_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Ticket);
      }
      if (validateDetails_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ValidateDetails);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MaxNumberOfValidations != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MaxNumberOfValidations);
      }
      if (ticket_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Ticket);
      }
      if (validateDetails_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ValidateDetails);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxNumberOfValidations != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxNumberOfValidations);
      }
      if (ticket_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ticket);
      }
      if (validateDetails_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ValidateDetails);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ValidateTicketRequest other) {
      if (other == null) {
        return;
      }
      if (other.MaxNumberOfValidations != 0) {
        MaxNumberOfValidations = other.MaxNumberOfValidations;
      }
      if (other.ticket_ != null) {
        if (ticket_ == null) {
          Ticket = new global::PassKitGrpcSDK.EventTickets.TicketId();
        }
        Ticket.MergeFrom(other.Ticket);
      }
      if (other.validateDetails_ != null) {
        if (validateDetails_ == null) {
          ValidateDetails = new global::PassKitGrpcSDK.EventTickets.ValidateDetails();
        }
        ValidateDetails.MergeFrom(other.ValidateDetails);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MaxNumberOfValidations = input.ReadUInt32();
            break;
          }
          case 18: {
            if (ticket_ == null) {
              Ticket = new global::PassKitGrpcSDK.EventTickets.TicketId();
            }
            input.ReadMessage(Ticket);
            break;
          }
          case 26: {
            if (validateDetails_ == null) {
              ValidateDetails = new global::PassKitGrpcSDK.EventTickets.ValidateDetails();
            }
            input.ReadMessage(ValidateDetails);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MaxNumberOfValidations = input.ReadUInt32();
            break;
          }
          case 18: {
            if (ticket_ == null) {
              Ticket = new global::PassKitGrpcSDK.EventTickets.TicketId();
            }
            input.ReadMessage(Ticket);
            break;
          }
          case 26: {
            if (validateDetails_ == null) {
              ValidateDetails = new global::PassKitGrpcSDK.EventTickets.ValidateDetails();
            }
            input.ReadMessage(ValidateDetails);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ValidateTicketResponse : pb::IMessage<ValidateTicketResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ValidateTicketResponse> _parser = new pb::MessageParser<ValidateTicketResponse>(() => new ValidateTicketResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ValidateTicketResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKitGrpcSDK.EventTickets.TicketReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidateTicketResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidateTicketResponse(ValidateTicketResponse other) : this() {
      valid_ = other.valid_;
      ticket_ = other.ticket_ != null ? other.ticket_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidateTicketResponse Clone() {
      return new ValidateTicketResponse(this);
    }

    /// <summary>Field number for the "valid" field.</summary>
    public const int ValidFieldNumber = 1;
    private bool valid_;
    /// <summary>
    /// Indicates if the ticket is valid.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Valid {
      get { return valid_; }
      set {
        valid_ = value;
      }
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 2;
    private global::PassKitGrpcSDK.EventTickets.Ticket ticket_;
    /// <summary>
    /// Full ticket details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.EventTickets.Ticket Ticket {
      get { return ticket_; }
      set {
        ticket_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ValidateTicketResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ValidateTicketResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Valid != other.Valid) return false;
      if (!object.Equals(Ticket, other.Ticket)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Valid != false) hash ^= Valid.GetHashCode();
      if (ticket_ != null) hash ^= Ticket.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Valid != false) {
        output.WriteRawTag(8);
        output.WriteBool(Valid);
      }
      if (ticket_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Ticket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Valid != false) {
        output.WriteRawTag(8);
        output.WriteBool(Valid);
      }
      if (ticket_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Ticket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Valid != false) {
        size += 1 + 1;
      }
      if (ticket_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ticket);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ValidateTicketResponse other) {
      if (other == null) {
        return;
      }
      if (other.Valid != false) {
        Valid = other.Valid;
      }
      if (other.ticket_ != null) {
        if (ticket_ == null) {
          Ticket = new global::PassKitGrpcSDK.EventTickets.Ticket();
        }
        Ticket.MergeFrom(other.Ticket);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Valid = input.ReadBool();
            break;
          }
          case 18: {
            if (ticket_ == null) {
              Ticket = new global::PassKitGrpcSDK.EventTickets.Ticket();
            }
            input.ReadMessage(Ticket);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Valid = input.ReadBool();
            break;
          }
          case 18: {
            if (ticket_ == null) {
              Ticket = new global::PassKitGrpcSDK.EventTickets.Ticket();
            }
            input.ReadMessage(Ticket);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RedeemTicketRequest : pb::IMessage<RedeemTicketRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RedeemTicketRequest> _parser = new pb::MessageParser<RedeemTicketRequest>(() => new RedeemTicketRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RedeemTicketRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKitGrpcSDK.EventTickets.TicketReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedeemTicketRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedeemTicketRequest(RedeemTicketRequest other) : this() {
      ticket_ = other.ticket_ != null ? other.ticket_.Clone() : null;
      redemptionDetails_ = other.redemptionDetails_ != null ? other.redemptionDetails_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedeemTicketRequest Clone() {
      return new RedeemTicketRequest(this);
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 1;
    private global::PassKitGrpcSDK.EventTickets.TicketId ticket_;
    /// <summary>
    /// Ticket id for the ticket to redeem.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.EventTickets.TicketId Ticket {
      get { return ticket_; }
      set {
        ticket_ = value;
      }
    }

    /// <summary>Field number for the "redemptionDetails" field.</summary>
    public const int RedemptionDetailsFieldNumber = 3;
    private global::PassKitGrpcSDK.EventTickets.RedemptionDetails redemptionDetails_;
    /// <summary>
    /// Additional details to set for this redemption.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.EventTickets.RedemptionDetails RedemptionDetails {
      get { return redemptionDetails_; }
      set {
        redemptionDetails_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RedeemTicketRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RedeemTicketRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Ticket, other.Ticket)) return false;
      if (!object.Equals(RedemptionDetails, other.RedemptionDetails)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ticket_ != null) hash ^= Ticket.GetHashCode();
      if (redemptionDetails_ != null) hash ^= RedemptionDetails.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ticket_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Ticket);
      }
      if (redemptionDetails_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RedemptionDetails);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ticket_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Ticket);
      }
      if (redemptionDetails_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RedemptionDetails);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ticket_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ticket);
      }
      if (redemptionDetails_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RedemptionDetails);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RedeemTicketRequest other) {
      if (other == null) {
        return;
      }
      if (other.ticket_ != null) {
        if (ticket_ == null) {
          Ticket = new global::PassKitGrpcSDK.EventTickets.TicketId();
        }
        Ticket.MergeFrom(other.Ticket);
      }
      if (other.redemptionDetails_ != null) {
        if (redemptionDetails_ == null) {
          RedemptionDetails = new global::PassKitGrpcSDK.EventTickets.RedemptionDetails();
        }
        RedemptionDetails.MergeFrom(other.RedemptionDetails);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (ticket_ == null) {
              Ticket = new global::PassKitGrpcSDK.EventTickets.TicketId();
            }
            input.ReadMessage(Ticket);
            break;
          }
          case 26: {
            if (redemptionDetails_ == null) {
              RedemptionDetails = new global::PassKitGrpcSDK.EventTickets.RedemptionDetails();
            }
            input.ReadMessage(RedemptionDetails);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (ticket_ == null) {
              Ticket = new global::PassKitGrpcSDK.EventTickets.TicketId();
            }
            input.ReadMessage(Ticket);
            break;
          }
          case 26: {
            if (redemptionDetails_ == null) {
              RedemptionDetails = new global::PassKitGrpcSDK.EventTickets.RedemptionDetails();
            }
            input.ReadMessage(RedemptionDetails);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TicketLimitedFields : pb::IMessage<TicketLimitedFields>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TicketLimitedFields> _parser = new pb::MessageParser<TicketLimitedFields>(() => new TicketLimitedFields());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TicketLimitedFields> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKitGrpcSDK.EventTickets.TicketReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketLimitedFields() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketLimitedFields(TicketLimitedFields other) : this() {
      id_ = other.id_;
      ticketNumber_ = other.ticketNumber_;
      production_ = other.production_ != null ? other.production_.Clone() : null;
      event_ = other.event_ != null ? other.event_.Clone() : null;
      venue_ = other.venue_ != null ? other.venue_.Clone() : null;
      ticketType_ = other.ticketType_ != null ? other.ticketType_.Clone() : null;
      orderNumber_ = other.orderNumber_;
      groupingId_ = other.groupingId_;
      barcodeContents_ = other.barcodeContents_;
      seatInfo_ = other.seatInfo_ != null ? other.seatInfo_.Clone() : null;
      faceValue_ = other.faceValue_ != null ? other.faceValue_.Clone() : null;
      person_ = other.person_ != null ? other.person_.Clone() : null;
      metaData_ = other.metaData_.Clone();
      optOut_ = other.optOut_;
      status_ = other.status_;
      expiryDate_ = other.expiryDate_ != null ? other.expiryDate_.Clone() : null;
      redemptionDetails_ = other.redemptionDetails_ != null ? other.redemptionDetails_.Clone() : null;
      validateDetails_ = other.validateDetails_.Clone();
      passOverrides_ = other.passOverrides_ != null ? other.passOverrides_.Clone() : null;
      passMetaData_ = other.passMetaData_ != null ? other.passMetaData_.Clone() : null;
      created_ = other.created_ != null ? other.created_.Clone() : null;
      updated_ = other.updated_ != null ? other.updated_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketLimitedFields Clone() {
      return new TicketLimitedFields(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// PassKit generated ticket id (22 characters).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticketNumber" field.</summary>
    public const int TicketNumberFieldNumber = 2;
    private string ticketNumber_ = "";
    /// <summary>
    /// User generated ticket number. Unique within the Production.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TicketNumber {
      get { return ticketNumber_; }
      set {
        ticketNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "production" field.</summary>
    public const int ProductionFieldNumber = 3;
    private global::PassKitGrpcSDK.EventTickets.ProductionLimitedFieldsResponse production_;
    /// <summary>
    /// The production information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.EventTickets.ProductionLimitedFieldsResponse Production {
      get { return production_; }
      set {
        production_ = value;
      }
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 4;
    private global::PassKitGrpcSDK.EventTickets.EventLimitedFieldsResponse event_;
    /// <summary>
    /// The event information. Only specific fields are returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.EventTickets.EventLimitedFieldsResponse Event {
      get { return event_; }
      set {
        event_ = value;
      }
    }

    /// <summary>Field number for the "venue" field.</summary>
    public const int VenueFieldNumber = 5;
    private global::PassKitGrpcSDK.EventTickets.VenueLimitedFieldsResponse venue_;
    /// <summary>
    /// Venue information. Only specific fields are returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.EventTickets.VenueLimitedFieldsResponse Venue {
      get { return venue_; }
      set {
        venue_ = value;
      }
    }

    /// <summary>Field number for the "ticketType" field.</summary>
    public const int TicketTypeFieldNumber = 6;
    private global::PassKitGrpcSDK.EventTickets.TicketTypeLimitedFields ticketType_;
    /// <summary>
    /// The ticket type the ticket is for. Only specific fields are returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.EventTickets.TicketTypeLimitedFields TicketType {
      get { return ticketType_; }
      set {
        ticketType_ = value;
      }
    }

    /// <summary>Field number for the "orderNumber" field.</summary>
    public const int OrderNumberFieldNumber = 7;
    private string orderNumber_ = "";
    /// <summary>
    /// Optional order / confirmation / booking code. Unique within the Production.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderNumber {
      get { return orderNumber_; }
      set {
        orderNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "groupingId" field.</summary>
    public const int GroupingIdFieldNumber = 8;
    private string groupingId_ = "";
    /// <summary>
    /// Optional PassKit generated grouping ID. The system automatically groups tickets based by order number. Grouped tickets can be downloaded together from our multi-pass download pages. Not writable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupingId {
      get { return groupingId_; }
      set {
        groupingId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "barcodeContents" field.</summary>
    public const int BarcodeContentsFieldNumber = 9;
    private string barcodeContents_ = "";
    /// <summary>
    /// The contents to embed in the barcode for this ticket. If not provided, the default value from the Ticket Type Pass Template Design is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BarcodeContents {
      get { return barcodeContents_; }
      set {
        barcodeContents_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "seatInfo" field.</summary>
    public const int SeatInfoFieldNumber = 10;
    private global::PassKitGrpcSDK.EventTickets.Seat seatInfo_;
    /// <summary>
    /// The seat info for the ticket.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.EventTickets.Seat SeatInfo {
      get { return seatInfo_; }
      set {
        seatInfo_ = value;
      }
    }

    /// <summary>Field number for the "faceValue" field.</summary>
    public const int FaceValueFieldNumber = 11;
    private global::PassKitGrpcSDK.EventTickets.FaceValue faceValue_;
    /// <summary>
    /// The face value details for the ticket.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.EventTickets.FaceValue FaceValue {
      get { return faceValue_; }
      set {
        faceValue_ = value;
      }
    }

    /// <summary>Field number for the "person" field.</summary>
    public const int PersonFieldNumber = 12;
    private global::PassKitGrpcSDK.Person person_;
    /// <summary>
    /// The ticket holder information. Stored encrypted in PassKit's database.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.Person Person {
      get { return person_; }
      set {
        person_ = value;
      }
    }

    /// <summary>Field number for the "metaData" field.</summary>
    public const int MetaDataFieldNumber = 13;
    private static readonly pbc::MapField<string, string>.Codec _map_metaData_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 106);
    private readonly pbc::MapField<string, string> metaData_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Any other meta fields for the ticket that are not covered in the Ticket Object / API (i.e. you might want to capture ticket information specific to your process).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> MetaData {
      get { return metaData_; }
    }

    /// <summary>Field number for the "optOut" field.</summary>
    public const int OptOutFieldNumber = 14;
    private bool optOut_;
    /// <summary>
    /// Indicates if the holder of the ticket opted out to receive marketing promotions (defaults to false).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OptOut {
      get { return optOut_; }
      set {
        optOut_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 15;
    private global::PassKitGrpcSDK.EventTickets.TicketStatus status_ = global::PassKitGrpcSDK.EventTickets.TicketStatus.StatusNone;
    /// <summary>
    /// Holds the ticket status.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.EventTickets.TicketStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "expiryDate" field.</summary>
    public const int ExpiryDateFieldNumber = 16;
    private global::Google.Protobuf.WellKnownTypes.Timestamp expiryDate_;
    /// <summary>
    /// Optional field to set when the ticket expires. When the expiry date hits, it will automatically gray out the barcode.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ExpiryDate {
      get { return expiryDate_; }
      set {
        expiryDate_ = value;
      }
    }

    /// <summary>Field number for the "redemptionDetails" field.</summary>
    public const int RedemptionDetailsFieldNumber = 17;
    private global::PassKitGrpcSDK.EventTickets.RedemptionDetails redemptionDetails_;
    /// <summary>
    /// Contains details about the redemption (if the ticket is in a redeemed state). Not writable; set by the redeem endpoint.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.EventTickets.RedemptionDetails RedemptionDetails {
      get { return redemptionDetails_; }
      set {
        redemptionDetails_ = value;
      }
    }

    /// <summary>Field number for the "validateDetails" field.</summary>
    public const int ValidateDetailsFieldNumber = 18;
    private static readonly pb::FieldCodec<global::PassKitGrpcSDK.EventTickets.ValidateDetails> _repeated_validateDetails_codec
        = pb::FieldCodec.ForMessage(146, global::PassKitGrpcSDK.EventTickets.ValidateDetails.Parser);
    private readonly pbc::RepeatedField<global::PassKitGrpcSDK.EventTickets.ValidateDetails> validateDetails_ = new pbc::RepeatedField<global::PassKitGrpcSDK.EventTickets.ValidateDetails>();
    /// <summary>
    /// Contains details about when the ticket was validated. Tickets can be validated multiple times. Not writable; set by the validate endpoint.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PassKitGrpcSDK.EventTickets.ValidateDetails> ValidateDetails {
      get { return validateDetails_; }
    }

    /// <summary>Field number for the "passOverrides" field.</summary>
    public const int PassOverridesFieldNumber = 19;
    private global::PassKitGrpcSDK.PassOverrides passOverrides_;
    /// <summary>
    /// Optional Pass level overrides for proximity &amp; images.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.PassOverrides PassOverrides {
      get { return passOverrides_; }
      set {
        passOverrides_ = value;
      }
    }

    /// <summary>Field number for the "passMetaData" field.</summary>
    public const int PassMetaDataFieldNumber = 20;
    private global::PassKitGrpcSDK.Metadata passMetaData_;
    /// <summary>
    /// Pass Metadata hold meta data about the pass like status, lifecycle, utm details and installation data. Cannot be set via the API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.Metadata PassMetaData {
      get { return passMetaData_; }
      set {
        passMetaData_ = value;
      }
    }

    /// <summary>Field number for the "created" field.</summary>
    public const int CreatedFieldNumber = 21;
    private global::Google.Protobuf.WellKnownTypes.Timestamp created_;
    /// <summary>
    /// The date the ticket was created. Not writable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Created {
      get { return created_; }
      set {
        created_ = value;
      }
    }

    /// <summary>Field number for the "updated" field.</summary>
    public const int UpdatedFieldNumber = 22;
    private global::Google.Protobuf.WellKnownTypes.Timestamp updated_;
    /// <summary>
    /// The date the ticket last updated. Not writable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Updated {
      get { return updated_; }
      set {
        updated_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TicketLimitedFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TicketLimitedFields other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (TicketNumber != other.TicketNumber) return false;
      if (!object.Equals(Production, other.Production)) return false;
      if (!object.Equals(Event, other.Event)) return false;
      if (!object.Equals(Venue, other.Venue)) return false;
      if (!object.Equals(TicketType, other.TicketType)) return false;
      if (OrderNumber != other.OrderNumber) return false;
      if (GroupingId != other.GroupingId) return false;
      if (BarcodeContents != other.BarcodeContents) return false;
      if (!object.Equals(SeatInfo, other.SeatInfo)) return false;
      if (!object.Equals(FaceValue, other.FaceValue)) return false;
      if (!object.Equals(Person, other.Person)) return false;
      if (!MetaData.Equals(other.MetaData)) return false;
      if (OptOut != other.OptOut) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(ExpiryDate, other.ExpiryDate)) return false;
      if (!object.Equals(RedemptionDetails, other.RedemptionDetails)) return false;
      if(!validateDetails_.Equals(other.validateDetails_)) return false;
      if (!object.Equals(PassOverrides, other.PassOverrides)) return false;
      if (!object.Equals(PassMetaData, other.PassMetaData)) return false;
      if (!object.Equals(Created, other.Created)) return false;
      if (!object.Equals(Updated, other.Updated)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (TicketNumber.Length != 0) hash ^= TicketNumber.GetHashCode();
      if (production_ != null) hash ^= Production.GetHashCode();
      if (event_ != null) hash ^= Event.GetHashCode();
      if (venue_ != null) hash ^= Venue.GetHashCode();
      if (ticketType_ != null) hash ^= TicketType.GetHashCode();
      if (OrderNumber.Length != 0) hash ^= OrderNumber.GetHashCode();
      if (GroupingId.Length != 0) hash ^= GroupingId.GetHashCode();
      if (BarcodeContents.Length != 0) hash ^= BarcodeContents.GetHashCode();
      if (seatInfo_ != null) hash ^= SeatInfo.GetHashCode();
      if (faceValue_ != null) hash ^= FaceValue.GetHashCode();
      if (person_ != null) hash ^= Person.GetHashCode();
      hash ^= MetaData.GetHashCode();
      if (OptOut != false) hash ^= OptOut.GetHashCode();
      if (Status != global::PassKitGrpcSDK.EventTickets.TicketStatus.StatusNone) hash ^= Status.GetHashCode();
      if (expiryDate_ != null) hash ^= ExpiryDate.GetHashCode();
      if (redemptionDetails_ != null) hash ^= RedemptionDetails.GetHashCode();
      hash ^= validateDetails_.GetHashCode();
      if (passOverrides_ != null) hash ^= PassOverrides.GetHashCode();
      if (passMetaData_ != null) hash ^= PassMetaData.GetHashCode();
      if (created_ != null) hash ^= Created.GetHashCode();
      if (updated_ != null) hash ^= Updated.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (TicketNumber.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TicketNumber);
      }
      if (production_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Production);
      }
      if (event_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Event);
      }
      if (venue_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Venue);
      }
      if (ticketType_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TicketType);
      }
      if (OrderNumber.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(OrderNumber);
      }
      if (GroupingId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(GroupingId);
      }
      if (BarcodeContents.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(BarcodeContents);
      }
      if (seatInfo_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(SeatInfo);
      }
      if (faceValue_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(FaceValue);
      }
      if (person_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Person);
      }
      metaData_.WriteTo(output, _map_metaData_codec);
      if (OptOut != false) {
        output.WriteRawTag(112);
        output.WriteBool(OptOut);
      }
      if (Status != global::PassKitGrpcSDK.EventTickets.TicketStatus.StatusNone) {
        output.WriteRawTag(120);
        output.WriteEnum((int) Status);
      }
      if (expiryDate_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(ExpiryDate);
      }
      if (redemptionDetails_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(RedemptionDetails);
      }
      validateDetails_.WriteTo(output, _repeated_validateDetails_codec);
      if (passOverrides_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(PassOverrides);
      }
      if (passMetaData_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(PassMetaData);
      }
      if (created_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Created);
      }
      if (updated_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(Updated);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (TicketNumber.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TicketNumber);
      }
      if (production_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Production);
      }
      if (event_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Event);
      }
      if (venue_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Venue);
      }
      if (ticketType_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TicketType);
      }
      if (OrderNumber.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(OrderNumber);
      }
      if (GroupingId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(GroupingId);
      }
      if (BarcodeContents.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(BarcodeContents);
      }
      if (seatInfo_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(SeatInfo);
      }
      if (faceValue_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(FaceValue);
      }
      if (person_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Person);
      }
      metaData_.WriteTo(ref output, _map_metaData_codec);
      if (OptOut != false) {
        output.WriteRawTag(112);
        output.WriteBool(OptOut);
      }
      if (Status != global::PassKitGrpcSDK.EventTickets.TicketStatus.StatusNone) {
        output.WriteRawTag(120);
        output.WriteEnum((int) Status);
      }
      if (expiryDate_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(ExpiryDate);
      }
      if (redemptionDetails_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(RedemptionDetails);
      }
      validateDetails_.WriteTo(ref output, _repeated_validateDetails_codec);
      if (passOverrides_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(PassOverrides);
      }
      if (passMetaData_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(PassMetaData);
      }
      if (created_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Created);
      }
      if (updated_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(Updated);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (TicketNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TicketNumber);
      }
      if (production_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Production);
      }
      if (event_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Event);
      }
      if (venue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Venue);
      }
      if (ticketType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TicketType);
      }
      if (OrderNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderNumber);
      }
      if (GroupingId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupingId);
      }
      if (BarcodeContents.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BarcodeContents);
      }
      if (seatInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SeatInfo);
      }
      if (faceValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FaceValue);
      }
      if (person_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Person);
      }
      size += metaData_.CalculateSize(_map_metaData_codec);
      if (OptOut != false) {
        size += 1 + 1;
      }
      if (Status != global::PassKitGrpcSDK.EventTickets.TicketStatus.StatusNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (expiryDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ExpiryDate);
      }
      if (redemptionDetails_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RedemptionDetails);
      }
      size += validateDetails_.CalculateSize(_repeated_validateDetails_codec);
      if (passOverrides_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PassOverrides);
      }
      if (passMetaData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PassMetaData);
      }
      if (created_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Created);
      }
      if (updated_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Updated);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TicketLimitedFields other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.TicketNumber.Length != 0) {
        TicketNumber = other.TicketNumber;
      }
      if (other.production_ != null) {
        if (production_ == null) {
          Production = new global::PassKitGrpcSDK.EventTickets.ProductionLimitedFieldsResponse();
        }
        Production.MergeFrom(other.Production);
      }
      if (other.event_ != null) {
        if (event_ == null) {
          Event = new global::PassKitGrpcSDK.EventTickets.EventLimitedFieldsResponse();
        }
        Event.MergeFrom(other.Event);
      }
      if (other.venue_ != null) {
        if (venue_ == null) {
          Venue = new global::PassKitGrpcSDK.EventTickets.VenueLimitedFieldsResponse();
        }
        Venue.MergeFrom(other.Venue);
      }
      if (other.ticketType_ != null) {
        if (ticketType_ == null) {
          TicketType = new global::PassKitGrpcSDK.EventTickets.TicketTypeLimitedFields();
        }
        TicketType.MergeFrom(other.TicketType);
      }
      if (other.OrderNumber.Length != 0) {
        OrderNumber = other.OrderNumber;
      }
      if (other.GroupingId.Length != 0) {
        GroupingId = other.GroupingId;
      }
      if (other.BarcodeContents.Length != 0) {
        BarcodeContents = other.BarcodeContents;
      }
      if (other.seatInfo_ != null) {
        if (seatInfo_ == null) {
          SeatInfo = new global::PassKitGrpcSDK.EventTickets.Seat();
        }
        SeatInfo.MergeFrom(other.SeatInfo);
      }
      if (other.faceValue_ != null) {
        if (faceValue_ == null) {
          FaceValue = new global::PassKitGrpcSDK.EventTickets.FaceValue();
        }
        FaceValue.MergeFrom(other.FaceValue);
      }
      if (other.person_ != null) {
        if (person_ == null) {
          Person = new global::PassKitGrpcSDK.Person();
        }
        Person.MergeFrom(other.Person);
      }
      metaData_.Add(other.metaData_);
      if (other.OptOut != false) {
        OptOut = other.OptOut;
      }
      if (other.Status != global::PassKitGrpcSDK.EventTickets.TicketStatus.StatusNone) {
        Status = other.Status;
      }
      if (other.expiryDate_ != null) {
        if (expiryDate_ == null) {
          ExpiryDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ExpiryDate.MergeFrom(other.ExpiryDate);
      }
      if (other.redemptionDetails_ != null) {
        if (redemptionDetails_ == null) {
          RedemptionDetails = new global::PassKitGrpcSDK.EventTickets.RedemptionDetails();
        }
        RedemptionDetails.MergeFrom(other.RedemptionDetails);
      }
      validateDetails_.Add(other.validateDetails_);
      if (other.passOverrides_ != null) {
        if (passOverrides_ == null) {
          PassOverrides = new global::PassKitGrpcSDK.PassOverrides();
        }
        PassOverrides.MergeFrom(other.PassOverrides);
      }
      if (other.passMetaData_ != null) {
        if (passMetaData_ == null) {
          PassMetaData = new global::PassKitGrpcSDK.Metadata();
        }
        PassMetaData.MergeFrom(other.PassMetaData);
      }
      if (other.created_ != null) {
        if (created_ == null) {
          Created = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Created.MergeFrom(other.Created);
      }
      if (other.updated_ != null) {
        if (updated_ == null) {
          Updated = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Updated.MergeFrom(other.Updated);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            TicketNumber = input.ReadString();
            break;
          }
          case 26: {
            if (production_ == null) {
              Production = new global::PassKitGrpcSDK.EventTickets.ProductionLimitedFieldsResponse();
            }
            input.ReadMessage(Production);
            break;
          }
          case 34: {
            if (event_ == null) {
              Event = new global::PassKitGrpcSDK.EventTickets.EventLimitedFieldsResponse();
            }
            input.ReadMessage(Event);
            break;
          }
          case 42: {
            if (venue_ == null) {
              Venue = new global::PassKitGrpcSDK.EventTickets.VenueLimitedFieldsResponse();
            }
            input.ReadMessage(Venue);
            break;
          }
          case 50: {
            if (ticketType_ == null) {
              TicketType = new global::PassKitGrpcSDK.EventTickets.TicketTypeLimitedFields();
            }
            input.ReadMessage(TicketType);
            break;
          }
          case 58: {
            OrderNumber = input.ReadString();
            break;
          }
          case 66: {
            GroupingId = input.ReadString();
            break;
          }
          case 74: {
            BarcodeContents = input.ReadString();
            break;
          }
          case 82: {
            if (seatInfo_ == null) {
              SeatInfo = new global::PassKitGrpcSDK.EventTickets.Seat();
            }
            input.ReadMessage(SeatInfo);
            break;
          }
          case 90: {
            if (faceValue_ == null) {
              FaceValue = new global::PassKitGrpcSDK.EventTickets.FaceValue();
            }
            input.ReadMessage(FaceValue);
            break;
          }
          case 98: {
            if (person_ == null) {
              Person = new global::PassKitGrpcSDK.Person();
            }
            input.ReadMessage(Person);
            break;
          }
          case 106: {
            metaData_.AddEntriesFrom(input, _map_metaData_codec);
            break;
          }
          case 112: {
            OptOut = input.ReadBool();
            break;
          }
          case 120: {
            Status = (global::PassKitGrpcSDK.EventTickets.TicketStatus) input.ReadEnum();
            break;
          }
          case 130: {
            if (expiryDate_ == null) {
              ExpiryDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpiryDate);
            break;
          }
          case 138: {
            if (redemptionDetails_ == null) {
              RedemptionDetails = new global::PassKitGrpcSDK.EventTickets.RedemptionDetails();
            }
            input.ReadMessage(RedemptionDetails);
            break;
          }
          case 146: {
            validateDetails_.AddEntriesFrom(input, _repeated_validateDetails_codec);
            break;
          }
          case 154: {
            if (passOverrides_ == null) {
              PassOverrides = new global::PassKitGrpcSDK.PassOverrides();
            }
            input.ReadMessage(PassOverrides);
            break;
          }
          case 162: {
            if (passMetaData_ == null) {
              PassMetaData = new global::PassKitGrpcSDK.Metadata();
            }
            input.ReadMessage(PassMetaData);
            break;
          }
          case 170: {
            if (created_ == null) {
              Created = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Created);
            break;
          }
          case 178: {
            if (updated_ == null) {
              Updated = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Updated);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            TicketNumber = input.ReadString();
            break;
          }
          case 26: {
            if (production_ == null) {
              Production = new global::PassKitGrpcSDK.EventTickets.ProductionLimitedFieldsResponse();
            }
            input.ReadMessage(Production);
            break;
          }
          case 34: {
            if (event_ == null) {
              Event = new global::PassKitGrpcSDK.EventTickets.EventLimitedFieldsResponse();
            }
            input.ReadMessage(Event);
            break;
          }
          case 42: {
            if (venue_ == null) {
              Venue = new global::PassKitGrpcSDK.EventTickets.VenueLimitedFieldsResponse();
            }
            input.ReadMessage(Venue);
            break;
          }
          case 50: {
            if (ticketType_ == null) {
              TicketType = new global::PassKitGrpcSDK.EventTickets.TicketTypeLimitedFields();
            }
            input.ReadMessage(TicketType);
            break;
          }
          case 58: {
            OrderNumber = input.ReadString();
            break;
          }
          case 66: {
            GroupingId = input.ReadString();
            break;
          }
          case 74: {
            BarcodeContents = input.ReadString();
            break;
          }
          case 82: {
            if (seatInfo_ == null) {
              SeatInfo = new global::PassKitGrpcSDK.EventTickets.Seat();
            }
            input.ReadMessage(SeatInfo);
            break;
          }
          case 90: {
            if (faceValue_ == null) {
              FaceValue = new global::PassKitGrpcSDK.EventTickets.FaceValue();
            }
            input.ReadMessage(FaceValue);
            break;
          }
          case 98: {
            if (person_ == null) {
              Person = new global::PassKitGrpcSDK.Person();
            }
            input.ReadMessage(Person);
            break;
          }
          case 106: {
            metaData_.AddEntriesFrom(ref input, _map_metaData_codec);
            break;
          }
          case 112: {
            OptOut = input.ReadBool();
            break;
          }
          case 120: {
            Status = (global::PassKitGrpcSDK.EventTickets.TicketStatus) input.ReadEnum();
            break;
          }
          case 130: {
            if (expiryDate_ == null) {
              ExpiryDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpiryDate);
            break;
          }
          case 138: {
            if (redemptionDetails_ == null) {
              RedemptionDetails = new global::PassKitGrpcSDK.EventTickets.RedemptionDetails();
            }
            input.ReadMessage(RedemptionDetails);
            break;
          }
          case 146: {
            validateDetails_.AddEntriesFrom(ref input, _repeated_validateDetails_codec);
            break;
          }
          case 154: {
            if (passOverrides_ == null) {
              PassOverrides = new global::PassKitGrpcSDK.PassOverrides();
            }
            input.ReadMessage(PassOverrides);
            break;
          }
          case 162: {
            if (passMetaData_ == null) {
              PassMetaData = new global::PassKitGrpcSDK.Metadata();
            }
            input.ReadMessage(PassMetaData);
            break;
          }
          case 170: {
            if (created_ == null) {
              Created = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Created);
            break;
          }
          case 178: {
            if (updated_ == null) {
              Updated = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Updated);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class IssueTicketRequest : pb::IMessage<IssueTicketRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<IssueTicketRequest> _parser = new pb::MessageParser<IssueTicketRequest>(() => new IssueTicketRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IssueTicketRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKitGrpcSDK.EventTickets.TicketReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IssueTicketRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IssueTicketRequest(IssueTicketRequest other) : this() {
      ticketTypeId_ = other.ticketTypeId_;
      ticketNumber_ = other.ticketNumber_;
      orderNumber_ = other.orderNumber_;
      groupingId_ = other.groupingId_;
      barcodeContents_ = other.barcodeContents_;
      seatInfo_ = other.seatInfo_ != null ? other.seatInfo_.Clone() : null;
      faceValue_ = other.faceValue_ != null ? other.faceValue_.Clone() : null;
      person_ = other.person_ != null ? other.person_.Clone() : null;
      metaData_ = other.metaData_.Clone();
      optOut_ = other.optOut_;
      status_ = other.status_;
      expiryDate_ = other.expiryDate_ != null ? other.expiryDate_.Clone() : null;
      redemptionDetails_ = other.redemptionDetails_ != null ? other.redemptionDetails_.Clone() : null;
      validateDetails_ = other.validateDetails_.Clone();
      passOverrides_ = other.passOverrides_ != null ? other.passOverrides_.Clone() : null;
      passMetaData_ = other.passMetaData_ != null ? other.passMetaData_.Clone() : null;
      created_ = other.created_ != null ? other.created_.Clone() : null;
      updated_ = other.updated_ != null ? other.updated_.Clone() : null;
      switch (other.EventInfoCase) {
        case EventInfoOneofCase.EventId:
          EventId = other.EventId;
          break;
        case EventInfoOneofCase.Event:
          Event = other.Event.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IssueTicketRequest Clone() {
      return new IssueTicketRequest(this);
    }

    /// <summary>Field number for the "eventId" field.</summary>
    public const int EventIdFieldNumber = 1;
    /// <summary>
    /// PassKit generated event id (22 characters). Required if event is not provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventId {
      get { return eventInfoCase_ == EventInfoOneofCase.EventId ? (string) eventInfo_ : ""; }
      set {
        eventInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        eventInfoCase_ = EventInfoOneofCase.EventId;
      }
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 2;
    /// <summary>
    /// Event details. Event is auto generated if the record does not exist. Required if eventId is not provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.EventTickets.EventLimitedFieldsRequest Event {
      get { return eventInfoCase_ == EventInfoOneofCase.Event ? (global::PassKitGrpcSDK.EventTickets.EventLimitedFieldsRequest) eventInfo_ : null; }
      set {
        eventInfo_ = value;
        eventInfoCase_ = value == null ? EventInfoOneofCase.None : EventInfoOneofCase.Event;
      }
    }

    /// <summary>Field number for the "ticketTypeId" field.</summary>
    public const int TicketTypeIdFieldNumber = 3;
    private string ticketTypeId_ = "";
    /// <summary>
    /// PassKit generated ticketType id (22 characters).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TicketTypeId {
      get { return ticketTypeId_; }
      set {
        ticketTypeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticketNumber" field.</summary>
    public const int TicketNumberFieldNumber = 4;
    private string ticketNumber_ = "";
    /// <summary>
    /// Optional user generated ticket number. Unique within the Production.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TicketNumber {
      get { return ticketNumber_; }
      set {
        ticketNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "orderNumber" field.</summary>
    public const int OrderNumberFieldNumber = 5;
    private string orderNumber_ = "";
    /// <summary>
    /// Optional order / confirmation / booking code. Unique within the Production.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderNumber {
      get { return orderNumber_; }
      set {
        orderNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "groupingId" field.</summary>
    public const int GroupingIdFieldNumber = 6;
    private string groupingId_ = "";
    /// <summary>
    /// Optional PassKit generated grouping ID. The system automatically groups tickets based by order number. Grouped tickets can be downloaded together from our multi-pass download pages. Not writable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupingId {
      get { return groupingId_; }
      set {
        groupingId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "barcodeContents" field.</summary>
    public const int BarcodeContentsFieldNumber = 7;
    private string barcodeContents_ = "";
    /// <summary>
    /// The contents to embed in the barcode for this ticket. If not provided, the default value from the Ticket Type Pass Template Design is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BarcodeContents {
      get { return barcodeContents_; }
      set {
        barcodeContents_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "seatInfo" field.</summary>
    public const int SeatInfoFieldNumber = 8;
    private global::PassKitGrpcSDK.EventTickets.Seat seatInfo_;
    /// <summary>
    /// The seat info for the ticket.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.EventTickets.Seat SeatInfo {
      get { return seatInfo_; }
      set {
        seatInfo_ = value;
      }
    }

    /// <summary>Field number for the "faceValue" field.</summary>
    public const int FaceValueFieldNumber = 9;
    private global::PassKitGrpcSDK.EventTickets.FaceValue faceValue_;
    /// <summary>
    /// The face value details for the ticket.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.EventTickets.FaceValue FaceValue {
      get { return faceValue_; }
      set {
        faceValue_ = value;
      }
    }

    /// <summary>Field number for the "person" field.</summary>
    public const int PersonFieldNumber = 10;
    private global::PassKitGrpcSDK.Person person_;
    /// <summary>
    /// The ticket holder information. Stored encrypted in PassKit's database.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.Person Person {
      get { return person_; }
      set {
        person_ = value;
      }
    }

    /// <summary>Field number for the "metaData" field.</summary>
    public const int MetaDataFieldNumber = 11;
    private static readonly pbc::MapField<string, string>.Codec _map_metaData_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 90);
    private readonly pbc::MapField<string, string> metaData_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Any other meta fields for the ticket that are not covered in the Ticket Object / API (i.e. you might want to capture ticket information specific to your process).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> MetaData {
      get { return metaData_; }
    }

    /// <summary>Field number for the "optOut" field.</summary>
    public const int OptOutFieldNumber = 12;
    private bool optOut_;
    /// <summary>
    /// Indicates if the holder of the ticket opted out to receive marketing promotions (defaults to false).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OptOut {
      get { return optOut_; }
      set {
        optOut_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 13;
    private global::PassKitGrpcSDK.EventTickets.TicketStatus status_ = global::PassKitGrpcSDK.EventTickets.TicketStatus.StatusNone;
    /// <summary>
    /// Holds the ticket status.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.EventTickets.TicketStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "expiryDate" field.</summary>
    public const int ExpiryDateFieldNumber = 14;
    private global::Google.Protobuf.WellKnownTypes.Timestamp expiryDate_;
    /// <summary>
    /// Optional field to set when the ticket expires. When the expiry date hits, it will automatically gray out the barcode.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ExpiryDate {
      get { return expiryDate_; }
      set {
        expiryDate_ = value;
      }
    }

    /// <summary>Field number for the "redemptionDetails" field.</summary>
    public const int RedemptionDetailsFieldNumber = 15;
    private global::PassKitGrpcSDK.EventTickets.RedemptionDetails redemptionDetails_;
    /// <summary>
    /// Contains details about the redemption (if the ticket is in a redeemed state). Not writable; set by the redeem endpoint.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.EventTickets.RedemptionDetails RedemptionDetails {
      get { return redemptionDetails_; }
      set {
        redemptionDetails_ = value;
      }
    }

    /// <summary>Field number for the "validateDetails" field.</summary>
    public const int ValidateDetailsFieldNumber = 16;
    private static readonly pb::FieldCodec<global::PassKitGrpcSDK.EventTickets.ValidateDetails> _repeated_validateDetails_codec
        = pb::FieldCodec.ForMessage(130, global::PassKitGrpcSDK.EventTickets.ValidateDetails.Parser);
    private readonly pbc::RepeatedField<global::PassKitGrpcSDK.EventTickets.ValidateDetails> validateDetails_ = new pbc::RepeatedField<global::PassKitGrpcSDK.EventTickets.ValidateDetails>();
    /// <summary>
    /// Contains details about when the ticket was validated. Tickets can be validated multiple times. Not writable; set by the validate endpoint.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PassKitGrpcSDK.EventTickets.ValidateDetails> ValidateDetails {
      get { return validateDetails_; }
    }

    /// <summary>Field number for the "passOverrides" field.</summary>
    public const int PassOverridesFieldNumber = 17;
    private global::PassKitGrpcSDK.PassOverrides passOverrides_;
    /// <summary>
    /// Optional Pass level overrides for proximity &amp; images.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.PassOverrides PassOverrides {
      get { return passOverrides_; }
      set {
        passOverrides_ = value;
      }
    }

    /// <summary>Field number for the "passMetaData" field.</summary>
    public const int PassMetaDataFieldNumber = 18;
    private global::PassKitGrpcSDK.Metadata passMetaData_;
    /// <summary>
    /// Pass Metadata hold meta data about the pass like status, lifecycle, utm details and installation data. Cannot be set via the API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.Metadata PassMetaData {
      get { return passMetaData_; }
      set {
        passMetaData_ = value;
      }
    }

    /// <summary>Field number for the "created" field.</summary>
    public const int CreatedFieldNumber = 19;
    private global::Google.Protobuf.WellKnownTypes.Timestamp created_;
    /// <summary>
    /// The date the ticket was created. Not writable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Created {
      get { return created_; }
      set {
        created_ = value;
      }
    }

    /// <summary>Field number for the "updated" field.</summary>
    public const int UpdatedFieldNumber = 20;
    private global::Google.Protobuf.WellKnownTypes.Timestamp updated_;
    /// <summary>
    /// The date the ticket last updated. Not writable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Updated {
      get { return updated_; }
      set {
        updated_ = value;
      }
    }

    private object eventInfo_;
    /// <summary>Enum of possible cases for the "eventInfo" oneof.</summary>
    public enum EventInfoOneofCase {
      None = 0,
      EventId = 1,
      Event = 2,
    }
    private EventInfoOneofCase eventInfoCase_ = EventInfoOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventInfoOneofCase EventInfoCase {
      get { return eventInfoCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventInfo() {
      eventInfoCase_ = EventInfoOneofCase.None;
      eventInfo_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IssueTicketRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IssueTicketRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventId != other.EventId) return false;
      if (!object.Equals(Event, other.Event)) return false;
      if (TicketTypeId != other.TicketTypeId) return false;
      if (TicketNumber != other.TicketNumber) return false;
      if (OrderNumber != other.OrderNumber) return false;
      if (GroupingId != other.GroupingId) return false;
      if (BarcodeContents != other.BarcodeContents) return false;
      if (!object.Equals(SeatInfo, other.SeatInfo)) return false;
      if (!object.Equals(FaceValue, other.FaceValue)) return false;
      if (!object.Equals(Person, other.Person)) return false;
      if (!MetaData.Equals(other.MetaData)) return false;
      if (OptOut != other.OptOut) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(ExpiryDate, other.ExpiryDate)) return false;
      if (!object.Equals(RedemptionDetails, other.RedemptionDetails)) return false;
      if(!validateDetails_.Equals(other.validateDetails_)) return false;
      if (!object.Equals(PassOverrides, other.PassOverrides)) return false;
      if (!object.Equals(PassMetaData, other.PassMetaData)) return false;
      if (!object.Equals(Created, other.Created)) return false;
      if (!object.Equals(Updated, other.Updated)) return false;
      if (EventInfoCase != other.EventInfoCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (eventInfoCase_ == EventInfoOneofCase.EventId) hash ^= EventId.GetHashCode();
      if (eventInfoCase_ == EventInfoOneofCase.Event) hash ^= Event.GetHashCode();
      if (TicketTypeId.Length != 0) hash ^= TicketTypeId.GetHashCode();
      if (TicketNumber.Length != 0) hash ^= TicketNumber.GetHashCode();
      if (OrderNumber.Length != 0) hash ^= OrderNumber.GetHashCode();
      if (GroupingId.Length != 0) hash ^= GroupingId.GetHashCode();
      if (BarcodeContents.Length != 0) hash ^= BarcodeContents.GetHashCode();
      if (seatInfo_ != null) hash ^= SeatInfo.GetHashCode();
      if (faceValue_ != null) hash ^= FaceValue.GetHashCode();
      if (person_ != null) hash ^= Person.GetHashCode();
      hash ^= MetaData.GetHashCode();
      if (OptOut != false) hash ^= OptOut.GetHashCode();
      if (Status != global::PassKitGrpcSDK.EventTickets.TicketStatus.StatusNone) hash ^= Status.GetHashCode();
      if (expiryDate_ != null) hash ^= ExpiryDate.GetHashCode();
      if (redemptionDetails_ != null) hash ^= RedemptionDetails.GetHashCode();
      hash ^= validateDetails_.GetHashCode();
      if (passOverrides_ != null) hash ^= PassOverrides.GetHashCode();
      if (passMetaData_ != null) hash ^= PassMetaData.GetHashCode();
      if (created_ != null) hash ^= Created.GetHashCode();
      if (updated_ != null) hash ^= Updated.GetHashCode();
      hash ^= (int) eventInfoCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (eventInfoCase_ == EventInfoOneofCase.EventId) {
        output.WriteRawTag(10);
        output.WriteString(EventId);
      }
      if (eventInfoCase_ == EventInfoOneofCase.Event) {
        output.WriteRawTag(18);
        output.WriteMessage(Event);
      }
      if (TicketTypeId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TicketTypeId);
      }
      if (TicketNumber.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TicketNumber);
      }
      if (OrderNumber.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(OrderNumber);
      }
      if (GroupingId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(GroupingId);
      }
      if (BarcodeContents.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(BarcodeContents);
      }
      if (seatInfo_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(SeatInfo);
      }
      if (faceValue_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(FaceValue);
      }
      if (person_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Person);
      }
      metaData_.WriteTo(output, _map_metaData_codec);
      if (OptOut != false) {
        output.WriteRawTag(96);
        output.WriteBool(OptOut);
      }
      if (Status != global::PassKitGrpcSDK.EventTickets.TicketStatus.StatusNone) {
        output.WriteRawTag(104);
        output.WriteEnum((int) Status);
      }
      if (expiryDate_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(ExpiryDate);
      }
      if (redemptionDetails_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(RedemptionDetails);
      }
      validateDetails_.WriteTo(output, _repeated_validateDetails_codec);
      if (passOverrides_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(PassOverrides);
      }
      if (passMetaData_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(PassMetaData);
      }
      if (created_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Created);
      }
      if (updated_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(Updated);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (eventInfoCase_ == EventInfoOneofCase.EventId) {
        output.WriteRawTag(10);
        output.WriteString(EventId);
      }
      if (eventInfoCase_ == EventInfoOneofCase.Event) {
        output.WriteRawTag(18);
        output.WriteMessage(Event);
      }
      if (TicketTypeId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TicketTypeId);
      }
      if (TicketNumber.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TicketNumber);
      }
      if (OrderNumber.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(OrderNumber);
      }
      if (GroupingId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(GroupingId);
      }
      if (BarcodeContents.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(BarcodeContents);
      }
      if (seatInfo_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(SeatInfo);
      }
      if (faceValue_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(FaceValue);
      }
      if (person_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Person);
      }
      metaData_.WriteTo(ref output, _map_metaData_codec);
      if (OptOut != false) {
        output.WriteRawTag(96);
        output.WriteBool(OptOut);
      }
      if (Status != global::PassKitGrpcSDK.EventTickets.TicketStatus.StatusNone) {
        output.WriteRawTag(104);
        output.WriteEnum((int) Status);
      }
      if (expiryDate_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(ExpiryDate);
      }
      if (redemptionDetails_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(RedemptionDetails);
      }
      validateDetails_.WriteTo(ref output, _repeated_validateDetails_codec);
      if (passOverrides_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(PassOverrides);
      }
      if (passMetaData_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(PassMetaData);
      }
      if (created_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Created);
      }
      if (updated_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(Updated);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (eventInfoCase_ == EventInfoOneofCase.EventId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventId);
      }
      if (eventInfoCase_ == EventInfoOneofCase.Event) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Event);
      }
      if (TicketTypeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TicketTypeId);
      }
      if (TicketNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TicketNumber);
      }
      if (OrderNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderNumber);
      }
      if (GroupingId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupingId);
      }
      if (BarcodeContents.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BarcodeContents);
      }
      if (seatInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SeatInfo);
      }
      if (faceValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FaceValue);
      }
      if (person_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Person);
      }
      size += metaData_.CalculateSize(_map_metaData_codec);
      if (OptOut != false) {
        size += 1 + 1;
      }
      if (Status != global::PassKitGrpcSDK.EventTickets.TicketStatus.StatusNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (expiryDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExpiryDate);
      }
      if (redemptionDetails_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RedemptionDetails);
      }
      size += validateDetails_.CalculateSize(_repeated_validateDetails_codec);
      if (passOverrides_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PassOverrides);
      }
      if (passMetaData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PassMetaData);
      }
      if (created_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Created);
      }
      if (updated_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Updated);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IssueTicketRequest other) {
      if (other == null) {
        return;
      }
      if (other.TicketTypeId.Length != 0) {
        TicketTypeId = other.TicketTypeId;
      }
      if (other.TicketNumber.Length != 0) {
        TicketNumber = other.TicketNumber;
      }
      if (other.OrderNumber.Length != 0) {
        OrderNumber = other.OrderNumber;
      }
      if (other.GroupingId.Length != 0) {
        GroupingId = other.GroupingId;
      }
      if (other.BarcodeContents.Length != 0) {
        BarcodeContents = other.BarcodeContents;
      }
      if (other.seatInfo_ != null) {
        if (seatInfo_ == null) {
          SeatInfo = new global::PassKitGrpcSDK.EventTickets.Seat();
        }
        SeatInfo.MergeFrom(other.SeatInfo);
      }
      if (other.faceValue_ != null) {
        if (faceValue_ == null) {
          FaceValue = new global::PassKitGrpcSDK.EventTickets.FaceValue();
        }
        FaceValue.MergeFrom(other.FaceValue);
      }
      if (other.person_ != null) {
        if (person_ == null) {
          Person = new global::PassKitGrpcSDK.Person();
        }
        Person.MergeFrom(other.Person);
      }
      metaData_.Add(other.metaData_);
      if (other.OptOut != false) {
        OptOut = other.OptOut;
      }
      if (other.Status != global::PassKitGrpcSDK.EventTickets.TicketStatus.StatusNone) {
        Status = other.Status;
      }
      if (other.expiryDate_ != null) {
        if (expiryDate_ == null) {
          ExpiryDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ExpiryDate.MergeFrom(other.ExpiryDate);
      }
      if (other.redemptionDetails_ != null) {
        if (redemptionDetails_ == null) {
          RedemptionDetails = new global::PassKitGrpcSDK.EventTickets.RedemptionDetails();
        }
        RedemptionDetails.MergeFrom(other.RedemptionDetails);
      }
      validateDetails_.Add(other.validateDetails_);
      if (other.passOverrides_ != null) {
        if (passOverrides_ == null) {
          PassOverrides = new global::PassKitGrpcSDK.PassOverrides();
        }
        PassOverrides.MergeFrom(other.PassOverrides);
      }
      if (other.passMetaData_ != null) {
        if (passMetaData_ == null) {
          PassMetaData = new global::PassKitGrpcSDK.Metadata();
        }
        PassMetaData.MergeFrom(other.PassMetaData);
      }
      if (other.created_ != null) {
        if (created_ == null) {
          Created = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Created.MergeFrom(other.Created);
      }
      if (other.updated_ != null) {
        if (updated_ == null) {
          Updated = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Updated.MergeFrom(other.Updated);
      }
      switch (other.EventInfoCase) {
        case EventInfoOneofCase.EventId:
          EventId = other.EventId;
          break;
        case EventInfoOneofCase.Event:
          if (Event == null) {
            Event = new global::PassKitGrpcSDK.EventTickets.EventLimitedFieldsRequest();
          }
          Event.MergeFrom(other.Event);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EventId = input.ReadString();
            break;
          }
          case 18: {
            global::PassKitGrpcSDK.EventTickets.EventLimitedFieldsRequest subBuilder = new global::PassKitGrpcSDK.EventTickets.EventLimitedFieldsRequest();
            if (eventInfoCase_ == EventInfoOneofCase.Event) {
              subBuilder.MergeFrom(Event);
            }
            input.ReadMessage(subBuilder);
            Event = subBuilder;
            break;
          }
          case 26: {
            TicketTypeId = input.ReadString();
            break;
          }
          case 34: {
            TicketNumber = input.ReadString();
            break;
          }
          case 42: {
            OrderNumber = input.ReadString();
            break;
          }
          case 50: {
            GroupingId = input.ReadString();
            break;
          }
          case 58: {
            BarcodeContents = input.ReadString();
            break;
          }
          case 66: {
            if (seatInfo_ == null) {
              SeatInfo = new global::PassKitGrpcSDK.EventTickets.Seat();
            }
            input.ReadMessage(SeatInfo);
            break;
          }
          case 74: {
            if (faceValue_ == null) {
              FaceValue = new global::PassKitGrpcSDK.EventTickets.FaceValue();
            }
            input.ReadMessage(FaceValue);
            break;
          }
          case 82: {
            if (person_ == null) {
              Person = new global::PassKitGrpcSDK.Person();
            }
            input.ReadMessage(Person);
            break;
          }
          case 90: {
            metaData_.AddEntriesFrom(input, _map_metaData_codec);
            break;
          }
          case 96: {
            OptOut = input.ReadBool();
            break;
          }
          case 104: {
            Status = (global::PassKitGrpcSDK.EventTickets.TicketStatus) input.ReadEnum();
            break;
          }
          case 114: {
            if (expiryDate_ == null) {
              ExpiryDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpiryDate);
            break;
          }
          case 122: {
            if (redemptionDetails_ == null) {
              RedemptionDetails = new global::PassKitGrpcSDK.EventTickets.RedemptionDetails();
            }
            input.ReadMessage(RedemptionDetails);
            break;
          }
          case 130: {
            validateDetails_.AddEntriesFrom(input, _repeated_validateDetails_codec);
            break;
          }
          case 138: {
            if (passOverrides_ == null) {
              PassOverrides = new global::PassKitGrpcSDK.PassOverrides();
            }
            input.ReadMessage(PassOverrides);
            break;
          }
          case 146: {
            if (passMetaData_ == null) {
              PassMetaData = new global::PassKitGrpcSDK.Metadata();
            }
            input.ReadMessage(PassMetaData);
            break;
          }
          case 154: {
            if (created_ == null) {
              Created = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Created);
            break;
          }
          case 162: {
            if (updated_ == null) {
              Updated = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Updated);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            EventId = input.ReadString();
            break;
          }
          case 18: {
            global::PassKitGrpcSDK.EventTickets.EventLimitedFieldsRequest subBuilder = new global::PassKitGrpcSDK.EventTickets.EventLimitedFieldsRequest();
            if (eventInfoCase_ == EventInfoOneofCase.Event) {
              subBuilder.MergeFrom(Event);
            }
            input.ReadMessage(subBuilder);
            Event = subBuilder;
            break;
          }
          case 26: {
            TicketTypeId = input.ReadString();
            break;
          }
          case 34: {
            TicketNumber = input.ReadString();
            break;
          }
          case 42: {
            OrderNumber = input.ReadString();
            break;
          }
          case 50: {
            GroupingId = input.ReadString();
            break;
          }
          case 58: {
            BarcodeContents = input.ReadString();
            break;
          }
          case 66: {
            if (seatInfo_ == null) {
              SeatInfo = new global::PassKitGrpcSDK.EventTickets.Seat();
            }
            input.ReadMessage(SeatInfo);
            break;
          }
          case 74: {
            if (faceValue_ == null) {
              FaceValue = new global::PassKitGrpcSDK.EventTickets.FaceValue();
            }
            input.ReadMessage(FaceValue);
            break;
          }
          case 82: {
            if (person_ == null) {
              Person = new global::PassKitGrpcSDK.Person();
            }
            input.ReadMessage(Person);
            break;
          }
          case 90: {
            metaData_.AddEntriesFrom(ref input, _map_metaData_codec);
            break;
          }
          case 96: {
            OptOut = input.ReadBool();
            break;
          }
          case 104: {
            Status = (global::PassKitGrpcSDK.EventTickets.TicketStatus) input.ReadEnum();
            break;
          }
          case 114: {
            if (expiryDate_ == null) {
              ExpiryDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpiryDate);
            break;
          }
          case 122: {
            if (redemptionDetails_ == null) {
              RedemptionDetails = new global::PassKitGrpcSDK.EventTickets.RedemptionDetails();
            }
            input.ReadMessage(RedemptionDetails);
            break;
          }
          case 130: {
            validateDetails_.AddEntriesFrom(ref input, _repeated_validateDetails_codec);
            break;
          }
          case 138: {
            if (passOverrides_ == null) {
              PassOverrides = new global::PassKitGrpcSDK.PassOverrides();
            }
            input.ReadMessage(PassOverrides);
            break;
          }
          case 146: {
            if (passMetaData_ == null) {
              PassMetaData = new global::PassKitGrpcSDK.Metadata();
            }
            input.ReadMessage(PassMetaData);
            break;
          }
          case 154: {
            if (created_ == null) {
              Created = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Created);
            break;
          }
          case 162: {
            if (updated_ == null) {
              Updated = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Updated);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class IssueTicketResponseIds : pb::IMessage<IssueTicketResponseIds>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<IssueTicketResponseIds> _parser = new pb::MessageParser<IssueTicketResponseIds>(() => new IssueTicketResponseIds());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IssueTicketResponseIds> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKitGrpcSDK.EventTickets.TicketReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IssueTicketResponseIds() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IssueTicketResponseIds(IssueTicketResponseIds other) : this() {
      ticketId_ = other.ticketId_;
      productionId_ = other.productionId_;
      venueId_ = other.venueId_;
      ticketTypeId_ = other.ticketTypeId_;
      eventId_ = other.eventId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IssueTicketResponseIds Clone() {
      return new IssueTicketResponseIds(this);
    }

    /// <summary>Field number for the "ticketId" field.</summary>
    public const int TicketIdFieldNumber = 1;
    private string ticketId_ = "";
    /// <summary>
    /// PassKit generated ticket id (22 characters).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TicketId {
      get { return ticketId_; }
      set {
        ticketId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "productionId" field.</summary>
    public const int ProductionIdFieldNumber = 2;
    private string productionId_ = "";
    /// <summary>
    /// PassKit generated production id (22 characters).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductionId {
      get { return productionId_; }
      set {
        productionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "venueId" field.</summary>
    public const int VenueIdFieldNumber = 3;
    private string venueId_ = "";
    /// <summary>
    /// PassKit generated venue id (22 characters).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VenueId {
      get { return venueId_; }
      set {
        venueId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticketTypeId" field.</summary>
    public const int TicketTypeIdFieldNumber = 4;
    private string ticketTypeId_ = "";
    /// <summary>
    /// PassKit generated ticket type id (22 characters).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TicketTypeId {
      get { return ticketTypeId_; }
      set {
        ticketTypeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "eventId" field.</summary>
    public const int EventIdFieldNumber = 5;
    private string eventId_ = "";
    /// <summary>
    /// PassKit generated event id (22 characters).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventId {
      get { return eventId_; }
      set {
        eventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IssueTicketResponseIds);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IssueTicketResponseIds other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TicketId != other.TicketId) return false;
      if (ProductionId != other.ProductionId) return false;
      if (VenueId != other.VenueId) return false;
      if (TicketTypeId != other.TicketTypeId) return false;
      if (EventId != other.EventId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TicketId.Length != 0) hash ^= TicketId.GetHashCode();
      if (ProductionId.Length != 0) hash ^= ProductionId.GetHashCode();
      if (VenueId.Length != 0) hash ^= VenueId.GetHashCode();
      if (TicketTypeId.Length != 0) hash ^= TicketTypeId.GetHashCode();
      if (EventId.Length != 0) hash ^= EventId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TicketId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TicketId);
      }
      if (ProductionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProductionId);
      }
      if (VenueId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(VenueId);
      }
      if (TicketTypeId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TicketTypeId);
      }
      if (EventId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(EventId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TicketId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TicketId);
      }
      if (ProductionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProductionId);
      }
      if (VenueId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(VenueId);
      }
      if (TicketTypeId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TicketTypeId);
      }
      if (EventId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(EventId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TicketId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TicketId);
      }
      if (ProductionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductionId);
      }
      if (VenueId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VenueId);
      }
      if (TicketTypeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TicketTypeId);
      }
      if (EventId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IssueTicketResponseIds other) {
      if (other == null) {
        return;
      }
      if (other.TicketId.Length != 0) {
        TicketId = other.TicketId;
      }
      if (other.ProductionId.Length != 0) {
        ProductionId = other.ProductionId;
      }
      if (other.VenueId.Length != 0) {
        VenueId = other.VenueId;
      }
      if (other.TicketTypeId.Length != 0) {
        TicketTypeId = other.TicketTypeId;
      }
      if (other.EventId.Length != 0) {
        EventId = other.EventId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TicketId = input.ReadString();
            break;
          }
          case 18: {
            ProductionId = input.ReadString();
            break;
          }
          case 26: {
            VenueId = input.ReadString();
            break;
          }
          case 34: {
            TicketTypeId = input.ReadString();
            break;
          }
          case 42: {
            EventId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            TicketId = input.ReadString();
            break;
          }
          case 18: {
            ProductionId = input.ReadString();
            break;
          }
          case 26: {
            VenueId = input.ReadString();
            break;
          }
          case 34: {
            TicketTypeId = input.ReadString();
            break;
          }
          case 42: {
            EventId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventTicketPassRequest : pb::IMessage<EventTicketPassRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventTicketPassRequest> _parser = new pb::MessageParser<EventTicketPassRequest>(() => new EventTicketPassRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventTicketPassRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKitGrpcSDK.EventTickets.TicketReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTicketPassRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTicketPassRequest(EventTicketPassRequest other) : this() {
      format_ = other.format_.Clone();
      switch (other.RequestCase) {
        case RequestOneofCase.TicketId:
          TicketId = other.TicketId.Clone();
          break;
        case RequestOneofCase.TicketNumber:
          TicketNumber = other.TicketNumber.Clone();
          break;
        case RequestOneofCase.OrderNumber:
          OrderNumber = other.OrderNumber.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTicketPassRequest Clone() {
      return new EventTicketPassRequest(this);
    }

    /// <summary>Field number for the "ticketId" field.</summary>
    public const int TicketIdFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.Id TicketId {
      get { return requestCase_ == RequestOneofCase.TicketId ? (global::PassKitGrpcSDK.Id) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.TicketId;
      }
    }

    /// <summary>Field number for the "ticketNumber" field.</summary>
    public const int TicketNumberFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.EventTickets.TicketNumberRequest TicketNumber {
      get { return requestCase_ == RequestOneofCase.TicketNumber ? (global::PassKitGrpcSDK.EventTickets.TicketNumberRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.TicketNumber;
      }
    }

    /// <summary>Field number for the "orderNumber" field.</summary>
    public const int OrderNumberFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.EventTickets.OrderNumberRequest OrderNumber {
      get { return requestCase_ == RequestOneofCase.OrderNumber ? (global::PassKitGrpcSDK.EventTickets.OrderNumberRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.OrderNumber;
      }
    }

    /// <summary>Field number for the "format" field.</summary>
    public const int FormatFieldNumber = 4;
    private static readonly pb::FieldCodec<global::PassKitGrpcSDK.PassBundleFormat> _repeated_format_codec
        = pb::FieldCodec.ForEnum(34, x => (int) x, x => (global::PassKitGrpcSDK.PassBundleFormat) x);
    private readonly pbc::RepeatedField<global::PassKitGrpcSDK.PassBundleFormat> format_ = new pbc::RepeatedField<global::PassKitGrpcSDK.PassBundleFormat>();
    /// <summary>
    /// Optional. If omitted, return the URL to the web pass landing page. Not used when getting or deleting the underlying boarding pass record.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PassKitGrpcSDK.PassBundleFormat> Format {
      get { return format_; }
    }

    private object request_;
    /// <summary>Enum of possible cases for the "request" oneof.</summary>
    public enum RequestOneofCase {
      None = 0,
      TicketId = 1,
      TicketNumber = 2,
      OrderNumber = 3,
    }
    private RequestOneofCase requestCase_ = RequestOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestOneofCase RequestCase {
      get { return requestCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequest() {
      requestCase_ = RequestOneofCase.None;
      request_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventTicketPassRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventTicketPassRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TicketId, other.TicketId)) return false;
      if (!object.Equals(TicketNumber, other.TicketNumber)) return false;
      if (!object.Equals(OrderNumber, other.OrderNumber)) return false;
      if(!format_.Equals(other.format_)) return false;
      if (RequestCase != other.RequestCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (requestCase_ == RequestOneofCase.TicketId) hash ^= TicketId.GetHashCode();
      if (requestCase_ == RequestOneofCase.TicketNumber) hash ^= TicketNumber.GetHashCode();
      if (requestCase_ == RequestOneofCase.OrderNumber) hash ^= OrderNumber.GetHashCode();
      hash ^= format_.GetHashCode();
      hash ^= (int) requestCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (requestCase_ == RequestOneofCase.TicketId) {
        output.WriteRawTag(10);
        output.WriteMessage(TicketId);
      }
      if (requestCase_ == RequestOneofCase.TicketNumber) {
        output.WriteRawTag(18);
        output.WriteMessage(TicketNumber);
      }
      if (requestCase_ == RequestOneofCase.OrderNumber) {
        output.WriteRawTag(26);
        output.WriteMessage(OrderNumber);
      }
      format_.WriteTo(output, _repeated_format_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (requestCase_ == RequestOneofCase.TicketId) {
        output.WriteRawTag(10);
        output.WriteMessage(TicketId);
      }
      if (requestCase_ == RequestOneofCase.TicketNumber) {
        output.WriteRawTag(18);
        output.WriteMessage(TicketNumber);
      }
      if (requestCase_ == RequestOneofCase.OrderNumber) {
        output.WriteRawTag(26);
        output.WriteMessage(OrderNumber);
      }
      format_.WriteTo(ref output, _repeated_format_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (requestCase_ == RequestOneofCase.TicketId) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TicketId);
      }
      if (requestCase_ == RequestOneofCase.TicketNumber) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TicketNumber);
      }
      if (requestCase_ == RequestOneofCase.OrderNumber) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OrderNumber);
      }
      size += format_.CalculateSize(_repeated_format_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventTicketPassRequest other) {
      if (other == null) {
        return;
      }
      format_.Add(other.format_);
      switch (other.RequestCase) {
        case RequestOneofCase.TicketId:
          if (TicketId == null) {
            TicketId = new global::PassKitGrpcSDK.Id();
          }
          TicketId.MergeFrom(other.TicketId);
          break;
        case RequestOneofCase.TicketNumber:
          if (TicketNumber == null) {
            TicketNumber = new global::PassKitGrpcSDK.EventTickets.TicketNumberRequest();
          }
          TicketNumber.MergeFrom(other.TicketNumber);
          break;
        case RequestOneofCase.OrderNumber:
          if (OrderNumber == null) {
            OrderNumber = new global::PassKitGrpcSDK.EventTickets.OrderNumberRequest();
          }
          OrderNumber.MergeFrom(other.OrderNumber);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::PassKitGrpcSDK.Id subBuilder = new global::PassKitGrpcSDK.Id();
            if (requestCase_ == RequestOneofCase.TicketId) {
              subBuilder.MergeFrom(TicketId);
            }
            input.ReadMessage(subBuilder);
            TicketId = subBuilder;
            break;
          }
          case 18: {
            global::PassKitGrpcSDK.EventTickets.TicketNumberRequest subBuilder = new global::PassKitGrpcSDK.EventTickets.TicketNumberRequest();
            if (requestCase_ == RequestOneofCase.TicketNumber) {
              subBuilder.MergeFrom(TicketNumber);
            }
            input.ReadMessage(subBuilder);
            TicketNumber = subBuilder;
            break;
          }
          case 26: {
            global::PassKitGrpcSDK.EventTickets.OrderNumberRequest subBuilder = new global::PassKitGrpcSDK.EventTickets.OrderNumberRequest();
            if (requestCase_ == RequestOneofCase.OrderNumber) {
              subBuilder.MergeFrom(OrderNumber);
            }
            input.ReadMessage(subBuilder);
            OrderNumber = subBuilder;
            break;
          }
          case 34:
          case 32: {
            format_.AddEntriesFrom(input, _repeated_format_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::PassKitGrpcSDK.Id subBuilder = new global::PassKitGrpcSDK.Id();
            if (requestCase_ == RequestOneofCase.TicketId) {
              subBuilder.MergeFrom(TicketId);
            }
            input.ReadMessage(subBuilder);
            TicketId = subBuilder;
            break;
          }
          case 18: {
            global::PassKitGrpcSDK.EventTickets.TicketNumberRequest subBuilder = new global::PassKitGrpcSDK.EventTickets.TicketNumberRequest();
            if (requestCase_ == RequestOneofCase.TicketNumber) {
              subBuilder.MergeFrom(TicketNumber);
            }
            input.ReadMessage(subBuilder);
            TicketNumber = subBuilder;
            break;
          }
          case 26: {
            global::PassKitGrpcSDK.EventTickets.OrderNumberRequest subBuilder = new global::PassKitGrpcSDK.EventTickets.OrderNumberRequest();
            if (requestCase_ == RequestOneofCase.OrderNumber) {
              subBuilder.MergeFrom(OrderNumber);
            }
            input.ReadMessage(subBuilder);
            OrderNumber = subBuilder;
            break;
          }
          case 34:
          case 32: {
            format_.AddEntriesFrom(ref input, _repeated_format_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EventTicketPerson : pb::IMessage<EventTicketPerson>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventTicketPerson> _parser = new pb::MessageParser<EventTicketPerson>(() => new EventTicketPerson());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventTicketPerson> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKitGrpcSDK.EventTickets.TicketReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTicketPerson() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTicketPerson(EventTicketPerson other) : this() {
      person_ = other.person_ != null ? other.person_.Clone() : null;
      switch (other.RequestCase) {
        case RequestOneofCase.TicketId:
          TicketId = other.TicketId.Clone();
          break;
        case RequestOneofCase.TicketNumber:
          TicketNumber = other.TicketNumber.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTicketPerson Clone() {
      return new EventTicketPerson(this);
    }

    /// <summary>Field number for the "ticketId" field.</summary>
    public const int TicketIdFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.Id TicketId {
      get { return requestCase_ == RequestOneofCase.TicketId ? (global::PassKitGrpcSDK.Id) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.TicketId;
      }
    }

    /// <summary>Field number for the "ticketNumber" field.</summary>
    public const int TicketNumberFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.EventTickets.TicketNumberRequest TicketNumber {
      get { return requestCase_ == RequestOneofCase.TicketNumber ? (global::PassKitGrpcSDK.EventTickets.TicketNumberRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.TicketNumber;
      }
    }

    /// <summary>Field number for the "person" field.</summary>
    public const int PersonFieldNumber = 5;
    private global::PassKitGrpcSDK.Person person_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKitGrpcSDK.Person Person {
      get { return person_; }
      set {
        person_ = value;
      }
    }

    private object request_;
    /// <summary>Enum of possible cases for the "request" oneof.</summary>
    public enum RequestOneofCase {
      None = 0,
      TicketId = 1,
      TicketNumber = 2,
    }
    private RequestOneofCase requestCase_ = RequestOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestOneofCase RequestCase {
      get { return requestCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequest() {
      requestCase_ = RequestOneofCase.None;
      request_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventTicketPerson);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventTicketPerson other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TicketId, other.TicketId)) return false;
      if (!object.Equals(TicketNumber, other.TicketNumber)) return false;
      if (!object.Equals(Person, other.Person)) return false;
      if (RequestCase != other.RequestCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (requestCase_ == RequestOneofCase.TicketId) hash ^= TicketId.GetHashCode();
      if (requestCase_ == RequestOneofCase.TicketNumber) hash ^= TicketNumber.GetHashCode();
      if (person_ != null) hash ^= Person.GetHashCode();
      hash ^= (int) requestCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (requestCase_ == RequestOneofCase.TicketId) {
        output.WriteRawTag(10);
        output.WriteMessage(TicketId);
      }
      if (requestCase_ == RequestOneofCase.TicketNumber) {
        output.WriteRawTag(18);
        output.WriteMessage(TicketNumber);
      }
      if (person_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Person);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (requestCase_ == RequestOneofCase.TicketId) {
        output.WriteRawTag(10);
        output.WriteMessage(TicketId);
      }
      if (requestCase_ == RequestOneofCase.TicketNumber) {
        output.WriteRawTag(18);
        output.WriteMessage(TicketNumber);
      }
      if (person_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Person);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (requestCase_ == RequestOneofCase.TicketId) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TicketId);
      }
      if (requestCase_ == RequestOneofCase.TicketNumber) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TicketNumber);
      }
      if (person_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Person);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventTicketPerson other) {
      if (other == null) {
        return;
      }
      if (other.person_ != null) {
        if (person_ == null) {
          Person = new global::PassKitGrpcSDK.Person();
        }
        Person.MergeFrom(other.Person);
      }
      switch (other.RequestCase) {
        case RequestOneofCase.TicketId:
          if (TicketId == null) {
            TicketId = new global::PassKitGrpcSDK.Id();
          }
          TicketId.MergeFrom(other.TicketId);
          break;
        case RequestOneofCase.TicketNumber:
          if (TicketNumber == null) {
            TicketNumber = new global::PassKitGrpcSDK.EventTickets.TicketNumberRequest();
          }
          TicketNumber.MergeFrom(other.TicketNumber);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::PassKitGrpcSDK.Id subBuilder = new global::PassKitGrpcSDK.Id();
            if (requestCase_ == RequestOneofCase.TicketId) {
              subBuilder.MergeFrom(TicketId);
            }
            input.ReadMessage(subBuilder);
            TicketId = subBuilder;
            break;
          }
          case 18: {
            global::PassKitGrpcSDK.EventTickets.TicketNumberRequest subBuilder = new global::PassKitGrpcSDK.EventTickets.TicketNumberRequest();
            if (requestCase_ == RequestOneofCase.TicketNumber) {
              subBuilder.MergeFrom(TicketNumber);
            }
            input.ReadMessage(subBuilder);
            TicketNumber = subBuilder;
            break;
          }
          case 42: {
            if (person_ == null) {
              Person = new global::PassKitGrpcSDK.Person();
            }
            input.ReadMessage(Person);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::PassKitGrpcSDK.Id subBuilder = new global::PassKitGrpcSDK.Id();
            if (requestCase_ == RequestOneofCase.TicketId) {
              subBuilder.MergeFrom(TicketId);
            }
            input.ReadMessage(subBuilder);
            TicketId = subBuilder;
            break;
          }
          case 18: {
            global::PassKitGrpcSDK.EventTickets.TicketNumberRequest subBuilder = new global::PassKitGrpcSDK.EventTickets.TicketNumberRequest();
            if (requestCase_ == RequestOneofCase.TicketNumber) {
              subBuilder.MergeFrom(TicketNumber);
            }
            input.ReadMessage(subBuilder);
            TicketNumber = subBuilder;
            break;
          }
          case 42: {
            if (person_ == null) {
              Person = new global::PassKitGrpcSDK.Person();
            }
            input.ReadMessage(Person);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
