// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: io/flights/barcode.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PassKit.Grpc.Flights {

  /// <summary>Holder for reflection information generated from io/flights/barcode.proto</summary>
  public static partial class BarcodeReflection {

    #region Descriptor
    /// <summary>File descriptor for io/flights/barcode.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BarcodeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chhpby9mbGlnaHRzL2JhcmNvZGUucHJvdG8SB2ZsaWdodHMaHmlvL2NvbW1v",
            "bi9jb21tb25fb2JqZWN0cy5wcm90bxoucHJvdG9jLWdlbi1vcGVuYXBpdjIv",
            "b3B0aW9ucy9hbm5vdGF0aW9ucy5wcm90byLCCAoQQ29uZGl0aW9uYWxJdGVt",
            "cxI7ChRwYXNzZW5nZXJEZXNjcmlwdGlvbhgBIAEoDjIdLmZsaWdodHMuUGFz",
            "c2VuZ2VyRGVzY3JpcHRpb24SJgoNY2hlY2tJblNvdXJjZRgCIAEoDjIPLmZs",
            "aWdodHMuU291cmNlEjMKGmJvYXJkaW5nUGFzc0lzc3VhbmNlU291cmNlGAMg",
            "ASgOMg8uZmxpZ2h0cy5Tb3VyY2USJwoVYm9hcmRpbmdQYXNzSXNzdWVEYXRl",
            "GAQgASgLMgguaW8uRGF0ZRImCgxkb2N1bWVudFR5cGUYBSABKA4yEC5mbGln",
            "aHRzLkRvY1R5cGUSGgoSYm9hcmRpbmdQYXNzSXNzdWVyGAYgASgJEswEChBi",
            "YWdnYWdlVGFnTnVtYmVyGAcgAygJQrEEkkGtBDKqBFRoaXMgZmllbGQgYWxs",
            "b3dzIGNhcnJpZXJzIHRvIHBvcHVsYXRlIGJhZ2dhZ2UgdGFnIG51bWJlcnMg",
            "YW5kIHRoZSBudW1iZXIgb2YgY29uc2VjdXRpdmUgYmFncy4gSXQgY29udGFp",
            "bnMgMTMgY2hhcmFjdGVycyBjb3JyZXNwb25kaW5nIHRvIHRoZSAxMCBkaWdp",
            "dCBiYWcgdGFnIG51bWJlciwgYXMgcGVyIElBVEEgQkNNIHNwZWNpZmljYXRp",
            "b25zLCBSZXNvbHV0aW9uIDc0MCBhbmQgMyBkaWdpdHMgaWRlbnRpZnlpbmcg",
            "dGhlIG51bWJlciBvZiBjb25zZWN1dGl2ZSB0YWdzLgoxOiBsZWFkaW5nIGRp",
            "Z2l0IOKAkyAwIGZvciBpbnRlcmxpbmUgdGFnLCAxIGZvciBmYWxsLWJhY2sg",
            "dGFnLCAyIGZvciBpbnRlcmxpbmUgcnVzaCB0YWcuCjItNDogY2FycmllciBu",
            "dW1lcmljIGNvZGUuCjUtMTA6IGNhcnJpZXIgaW5pdGlhbCB0YWcgbnVtYmVy",
            "IChsZWFkaW5nIHplcm9zKS4KMTEtMTM6IG51bWJlciBvZiBjb25zZWN1dGl2",
            "ZSB0YWdzIChhbGxvd3MgZm9yIHVwIHRvIDk5OSB0YWdzKS4KVXAgdG8gMiBh",
            "ZGRpdGlvbmFsLCBub24tY29uc2VjdXRpdmUgdGFncyBjYW4gYmUgYWRkZWQu",
            "EjUKEXNlbGVjdGVlSW5kaWNhdG9yGAggASgOMhouZmxpZ2h0cy5TZWxlY3Rl",
            "ZUluZGljYXRvchJLChxpbnRlcm5hdGlvbmFsRG9jVmVyaWZpY2F0aW9uGAkg",
            "ASgOMiUuZmxpZ2h0cy5JbnRlcm5hdGlvbmFsRG9jVmVyaWZpY2F0aW9uEi0K",
            "DWlkYWRJbmRpY2F0b3IYCiABKA4yFi5mbGlnaHRzLklEQURJbmRpY2F0b3IS",
            "JQoJZmFzdFRyYWNrGAsgASgOMhIuZmxpZ2h0cy5GYXN0VHJhY2siogIKDkZs",
            "aWdodFNjaGVkdWxlEiQKBm1vbmRheRgBIAEoCzIULmZsaWdodHMuRmxpZ2h0",
            "VGltZXMSJQoHdHVlc2RheRgCIAEoCzIULmZsaWdodHMuRmxpZ2h0VGltZXMS",
            "JwoJd2VkbmVzZGF5GAMgASgLMhQuZmxpZ2h0cy5GbGlnaHRUaW1lcxImCgh0",
            "aHVyc2RheRgEIAEoCzIULmZsaWdodHMuRmxpZ2h0VGltZXMSJAoGZnJpZGF5",
            "GAUgASgLMhQuZmxpZ2h0cy5GbGlnaHRUaW1lcxImCghzYXR1cmRheRgGIAEo",
            "CzIULmZsaWdodHMuRmxpZ2h0VGltZXMSJAoGc3VuZGF5GAcgASgLMhQuZmxp",
            "Z2h0cy5GbGlnaHRUaW1lcyKiAQoLRmxpZ2h0VGltZXMSKAoWc2NoZWR1bGVk",
            "RGVwYXJ0dXJlVGltZRgBIAEoCzIILmlvLlRpbWUSHgoMYm9hcmRpbmdUaW1l",
            "GAIgASgLMgguaW8uVGltZRIhCg9nYXRlQ2xvc2luZ1RpbWUYAyABKAsyCC5p",
            "by5UaW1lEiYKFHNjaGVkdWxlZEFycml2YWxUaW1lGAQgASgLMgguaW8uVGlt",
            "ZSK1AwoKRmxpZ2h0VVJMcxISCgp1cGdyYWRlVVJMGAEgASgJEhQKDG9yZGVy",
            "Rm9vZFVSTBgCIAEoCRIXCg9wdXJjaGFzZVdpZmlVUkwYAyABKAkSFQoNY2hh",
            "bmdlU2VhdFVSTBgEIAEoCRIYChBlbnRlcnRhaW5tZW50VVJMGAUgASgJEhYK",
            "DnN0YW5kYnlMaXN0VVJMGAYgASgJEiQKHHB1cmNoYXNlQWRkaXRpb25hbEJh",
            "Z2dhZ2VVUkwYByABKAkSHwoXcHVyY2hhc2VMb3VuZ2VBY2Nlc3NVUkwYCCAB",
            "KAkSGAoQcmVwb3J0TG9zdEJhZ1VSTBgJIAEoCRIVCg1tYW5hZ2VtZW50VVJM",
            "GAogASgJEhwKFHJlcXVlc3RXaGVlbGNoYWlyVVJMGAsgASgJEiAKGHJlZ2lz",
            "dGVyU2VydmljZUFuaW1hbFVSTBgMIAEoCRIcChR0cmFuc2l0UHJvdmlkZXJF",
            "bWFpbBgNIAEoCRIhChl0cmFuc2l0UHJvdmlkZXJXZWJzaXRlVVJMGA4gASgJ",
            "EiIKGnRyYW5zaXRQcm92aWRlclBob25lTnVtYmVyGA8gASgJKu8CCg9QYXNz",
            "ZW5nZXJTdGF0dXMSGQoVSVNTVUVEX05PVF9DSEVDS0VEX0lOEAASFQoRSVNT",
            "VUVEX0NIRUNLRURfSU4QARIsCihCQUdHQUdFX0NIRUNLRURfUEFTU0VOR0VS",
            "X05PVF9DSEVDS0VEX0lOEAISKAokQkFHR0FHRV9DSEVDS0VEX1BBU1NFTkdF",
            "Ul9DSEVDS0VEX0lOEAMSIwofUEFTU0VOR0VSX1BBU1NFRF9TRUNVUklUWV9D",
            "SEVDSxAEEhkKFVBBU1NFTkdFUl9QQVNTRURfR0FURRAFEgsKB1RSQU5TSVQQ",
            "BhILCgdTVEFOREJZEAcSIwofQk9BUkRJTkdfREFUQV9SRVZBTElEQVRJT05f",
            "RE9ORRAIEjIKLk9SSUdJTkFMX0JPQVJESU5HX0xJTkVfVVNFRF9BVF9USUNL",
            "RVRfSVNTVUFOQ0UQCRIfChtVUF9PUl9ET1dOX0dSQURJTkdfUkVRVUlSRUQQ",
            "CiqQAQoUUGFzc2VuZ2VyRGVzY3JpcHRpb24SCQoFQURVTFQQABIICgRNQUxF",
            "EAESCgoGRkVNQUxFEAISCQoFQ0hJTEQQAxIKCgZJTkZBTlQQBBIQCgxOT19Q",
            "QVNTRU5HRVIQBRIVChFBRFVMVF9XSVRIX0lORkFOVBAGEhcKE1VOQUNDT01Q",
            "QU5JRURfTUlOT1IQBypACgZTb3VyY2USBQoBVxAAEgUKAUsQARIFCgFYEAIS",
            "BQoBUhADEgUKAU0QBBIFCgFPEAUSBQoBVBAGEgUKAVYQByoXCgdEb2NUeXBl",
            "EgUKAUIQABIFCgFJEAEqTQocSW50ZXJuYXRpb25hbERvY1ZlcmlmaWNhdGlv",
            "bhIQCgxOT1RfUkVRVUlSRUQQABIMCghSRVFVSVJFRBABEg0KCUNPTVBMRVRF",
            "RBACKqsBCg1JREFESW5kaWNhdG9yEggKBE5PTkUQABIICgRJRE4xEAESCAoE",
            "SUROMhACEggKBElEQjEQAxIICgRJREIyEAQSBgoCQUQQBRIGCgJERxAGEgYK",
            "AkRNEAcSBgoCR0UQCBIGCgJJRxAJEgYKAlJHEAoSBgoCVUQQCxIGCgJJRBAM",
            "EgkKBUlERlMxEA0SCQoFSURGUzIQDhIICgRJRFIxEA8SCAoESURSMhAQKkUK",
            "EVNlbGVjdGVlSW5kaWNhdG9yEhAKDE5PVF9TRUxFQ1RFRRAAEgwKCFNFTEVD",
            "VEVFEAESEAoMVFNBX1BSRUNIRUNLEAMqGQoJRmFzdFRyYWNrEgUKAU4QABIF",
            "CgFZEAEqqAEKF0FpcnBvcnRTZWN1cml0eVByb2dyYW1zEhgKFE5PX1NFQ1VS",
            "SVRZX1BST0dSQU1TEAASEQoNVFNBX1BSRV9DSEVDSxABEh4KGlRTQV9QUkVf",
            "Q0hFQ0tfVE9VQ0hMRVNTX0lEEAISCAoEVFdPVhADEgcKA09TUxAEEgcKA0lU",
            "SRAFEgcKA0lURBAGEhAKDEdMT0JBTF9FTlRSWRAHEgkKBUNMRUFSEAgq+gEK",
            "DEZsaWdodFN0YXR1cxILCgdVTktOT1dOEAASDQoJU0NIRURVTEVEEAESDAoI",
            "REVQQVJURUQQAhIJCgVJTkFJUhADEgoKBkxBTkRFRBAEEgsKB0FSUklWRUQQ",
            "BRINCglDQU5DRUxMRUQQBhILCgdERUxBWUVEEAcSFQoRREVQQVJURURfRElW",
            "RVJURUQQCBISCg5JTkFJUl9ESVZFUlRFRBAJEhQKEEFSUklWRURfRElWRVJU",
            "RUQQChIVChFERVBBUlRFRF9SRUNPVkVSWRALEhIKDklOQUlSX1JFQ09WRVJZ",
            "EAwSFAoQQVJSSVZFRF9SRUNPVkVSWRANKj0KEEZsaWdodENyZWF0ZU1vZGUS",
            "DgoKRE9fTk9UX1VTRRAAEgoKBk1BTlVBTBABEg0KCUFVVE9NQVRJQxACKqkB",
            "CgxGbGlnaHRBbGVydHMSDQoJTk9fQUxFUlRTEAASDgoKQUxMX0FMRVJUUxAB",
            "EhgKFERFUEFSVFVSRV9HQVRFX0FMRVJUEAISGAoUREVQQVJUVVJFX1RJTUVf",
            "QUxFUlQQBBIWChJBUlJJVkFMX0dBVEVfQUxFUlQQCBIWChJBUlJJVkFMX1RJ",
            "TUVfQUxFUlQQEBIWChJCQUdHQUdFX0JFTFRfQUxFUlQQICptCg5Cb2FyZGlu",
            "Z1BvbGljeRIfChtCT0FSRElOR19QT0xJQ1lfVU5TUEVDSUZJRUQQABIOCgpa",
            "T05FX0JBU0VEEAESDwoLR1JPVVBfQkFTRUQQAhIZChVCT0FSRElOR19QT0xJ",
            "Q1lfT1RIRVIQAyqDAQoPU2VhdENsYXNzUG9saWN5EiEKHVNFQVRfQ0xBU1Nf",
            "UE9MSUNZX1VOU1BFQ0lGSUVEEAASDwoLQ0FCSU5fQkFTRUQQARIPCgtDTEFT",
            "U19CQVNFRBACEg4KClRJRVJfQkFTRUQQAxIbChdTRUFUX0NMQVNTX1BPTElD",
            "WV9PVEhFUhAEKh8KCUF1dGhvcml0eRIICgRJQVRBEAASCAoESUNBTxABKnYK",
            "FVBhc3NlbmdlckNhcGFiaWxpdGllcxITCg9OT19DQVBBQklMSVRJRVMQABIQ",
            "CgxQUkVfQk9BUkRJTkcQARIVChFQUklPUklUWV9CT0FSRElORxACEgwKCENB",
            "UlJZX09OEAMSEQoNUEVSU09OQUxfSVRFTRAEQl8KGGNvbS5wYXNza2l0Lmdy",
            "cGMuRmxpZ2h0c1osc3Rhc2gucGFzc2tpdC5jb20vaW8vbW9kZWwvc2RrL2dv",
            "L2lvL2ZsaWdodHOqAhRQYXNzS2l0LkdycGMuRmxpZ2h0c2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::PassKit.Grpc.CommonObjectsReflection.Descriptor, global::PassKit.Grpc.Gateway.ProtocGenOpenapiv2.Options.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PassKit.Grpc.Flights.PassengerStatus), typeof(global::PassKit.Grpc.Flights.PassengerDescription), typeof(global::PassKit.Grpc.Flights.Source), typeof(global::PassKit.Grpc.Flights.DocType), typeof(global::PassKit.Grpc.Flights.InternationalDocVerification), typeof(global::PassKit.Grpc.Flights.IDADIndicator), typeof(global::PassKit.Grpc.Flights.SelecteeIndicator), typeof(global::PassKit.Grpc.Flights.FastTrack), typeof(global::PassKit.Grpc.Flights.AirportSecurityPrograms), typeof(global::PassKit.Grpc.Flights.FlightStatus), typeof(global::PassKit.Grpc.Flights.FlightCreateMode), typeof(global::PassKit.Grpc.Flights.FlightAlerts), typeof(global::PassKit.Grpc.Flights.BoardingPolicy), typeof(global::PassKit.Grpc.Flights.SeatClassPolicy), typeof(global::PassKit.Grpc.Flights.Authority), typeof(global::PassKit.Grpc.Flights.PassengerCapabilities), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.Flights.ConditionalItems), global::PassKit.Grpc.Flights.ConditionalItems.Parser, new[]{ "PassengerDescription", "CheckInSource", "BoardingPassIssuanceSource", "BoardingPassIssueDate", "DocumentType", "BoardingPassIssuer", "BaggageTagNumber", "SelecteeIndicator", "InternationalDocVerification", "IdadIndicator", "FastTrack" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.Flights.FlightSchedule), global::PassKit.Grpc.Flights.FlightSchedule.Parser, new[]{ "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.Flights.FlightTimes), global::PassKit.Grpc.Flights.FlightTimes.Parser, new[]{ "ScheduledDepartureTime", "BoardingTime", "GateClosingTime", "ScheduledArrivalTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.Flights.FlightURLs), global::PassKit.Grpc.Flights.FlightURLs.Parser, new[]{ "UpgradeURL", "OrderFoodURL", "PurchaseWifiURL", "ChangeSeatURL", "EntertainmentURL", "StandbyListURL", "PurchaseAdditionalBaggageURL", "PurchaseLoungeAccessURL", "ReportLostBagURL", "ManagementURL", "RequestWheelchairURL", "RegisterServiceAnimalURL", "TransitProviderEmail", "TransitProviderWebsiteURL", "TransitProviderPhoneNumber" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Passenger Status as detailed in IATA PSC Resolution 792 Attachment 'C'. Note: all values other than 0 indicate that the passenger has checked in.
  /// </summary>
  public enum PassengerStatus {
    /// <summary>
    /// Ticket issuance/passenger not checked in
    /// </summary>
    [pbr::OriginalName("ISSUED_NOT_CHECKED_IN")] IssuedNotCheckedIn = 0,
    /// <summary>
    /// Ticket issuance/passenger checked in
    /// </summary>
    [pbr::OriginalName("ISSUED_CHECKED_IN")] IssuedCheckedIn = 1,
    /// <summary>
    /// Baggage checked - passenger not checked in
    /// </summary>
    [pbr::OriginalName("BAGGAGE_CHECKED_PASSENGER_NOT_CHECKED_IN")] BaggageCheckedPassengerNotCheckedIn = 2,
    /// <summary>
    /// Baggage checked - passenger checked in
    /// </summary>
    [pbr::OriginalName("BAGGAGE_CHECKED_PASSENGER_CHECKED_IN")] BaggageCheckedPassengerCheckedIn = 3,
    /// <summary>
    /// Passenger passed security check
    /// </summary>
    [pbr::OriginalName("PASSENGER_PASSED_SECURITY_CHECK")] PassengerPassedSecurityCheck = 4,
    /// <summary>
    /// Passenger passed gate and exit (coupon used)
    /// </summary>
    [pbr::OriginalName("PASSENGER_PASSED_GATE")] PassengerPassedGate = 5,
    /// <summary>
    /// Transit
    /// </summary>
    [pbr::OriginalName("TRANSIT")] Transit = 6,
    /// <summary>
    /// Standby. Seat number not printed on boarding pass at time of check in
    /// </summary>
    [pbr::OriginalName("STANDBY")] Standby = 7,
    /// <summary>
    /// Boarding data re-validation done
    /// </summary>
    [pbr::OriginalName("BOARDING_DATA_REVALIDATION_DONE")] BoardingDataRevalidationDone = 8,
    /// <summary>
    /// Original boarding line used at time of ticket issuance
    /// </summary>
    [pbr::OriginalName("ORIGINAL_BOARDING_LINE_USED_AT_TICKET_ISSUANCE")] OriginalBoardingLineUsedAtTicketIssuance = 9,
    /// <summary>
    /// Up or down grading required
    /// </summary>
    [pbr::OriginalName("UP_OR_DOWN_GRADING_REQUIRED")] UpOrDownGradingRequired = 10,
  }

  /// <summary>
  /// Passenger Description as detailed in IATA PSC Resolution 792 Attachment 'C'.
  /// </summary>
  public enum PassengerDescription {
    /// <summary>
    /// Adult
    /// </summary>
    [pbr::OriginalName("ADULT")] Adult = 0,
    /// <summary>
    /// Adult male
    /// </summary>
    [pbr::OriginalName("MALE")] Male = 1,
    /// <summary>
    /// Adult female
    /// </summary>
    [pbr::OriginalName("FEMALE")] Female = 2,
    /// <summary>
    /// Child
    /// </summary>
    [pbr::OriginalName("CHILD")] Child = 3,
    /// <summary>
    /// Infant
    /// </summary>
    [pbr::OriginalName("INFANT")] Infant = 4,
    /// <summary>
    /// No passenger (cabin baggage)
    /// </summary>
    [pbr::OriginalName("NO_PASSENGER")] NoPassenger = 5,
    /// <summary>
    /// Adult travelling with infant
    /// </summary>
    [pbr::OriginalName("ADULT_WITH_INFANT")] AdultWithInfant = 6,
    /// <summary>
    /// Unaccompanied minor
    /// </summary>
    [pbr::OriginalName("UNACCOMPANIED_MINOR")] UnaccompaniedMinor = 7,
  }

  /// <summary>
  /// Source of transaction.
  /// </summary>
  public enum Source {
    /// <summary>
    /// Web
    /// </summary>
    [pbr::OriginalName("W")] W = 0,
    /// <summary>
    /// Airport Kiosk
    /// </summary>
    [pbr::OriginalName("K")] K = 1,
    /// <summary>
    /// Transfer kiosk
    /// </summary>
    [pbr::OriginalName("X")] X = 2,
    /// <summary>
    /// Remote / off-site kiosk
    /// </summary>
    [pbr::OriginalName("R")] R = 3,
    /// <summary>
    /// Mobile device
    /// </summary>
    [pbr::OriginalName("M")] M = 4,
    /// <summary>
    /// Airport agent
    /// </summary>
    [pbr::OriginalName("O")] O = 5,
    /// <summary>
    /// Town agent
    /// </summary>
    [pbr::OriginalName("T")] T = 6,
    /// <summary>
    /// Third party vendor
    /// </summary>
    [pbr::OriginalName("V")] V = 7,
  }

  /// <summary>
  /// Document type that the barcode represents.
  /// </summary>
  public enum DocType {
    /// <summary>
    /// Boarding pass
    /// </summary>
    [pbr::OriginalName("B")] B = 0,
    /// <summary>
    /// Itinerary receipt
    /// </summary>
    [pbr::OriginalName("I")] I = 1,
  }

  /// <summary>
  /// International Documentation Verification.
  /// </summary>
  public enum InternationalDocVerification {
    /// <summary>
    /// No travel document verification required
    /// </summary>
    [pbr::OriginalName("NOT_REQUIRED")] NotRequired = 0,
    /// <summary>
    /// Travel document verification required before boarding
    /// </summary>
    [pbr::OriginalName("REQUIRED")] Required = 1,
    /// <summary>
    /// Travel document verification successfully completed
    /// </summary>
    [pbr::OriginalName("COMPLETED")] Completed = 2,
  }

  /// <summary>
  /// Industry Discount / Airline Discount codes. See IATA Recommended Practice 1788.
  /// </summary>
  public enum IDADIndicator {
    /// <summary>
    /// No Industry discount
    /// </summary>
    [pbr::OriginalName("NONE")] None = 0,
    /// <summary>
    /// Industry discount, other carrier employee/all other eligible persons, firm reservation
    /// </summary>
    [pbr::OriginalName("IDN1")] Idn1 = 1,
    /// <summary>
    /// Industry discount, other carrier employee/all other eligible persons, space available
    /// </summary>
    [pbr::OriginalName("IDN2")] Idn2 = 2,
    /// <summary>
    /// Industry discount, other carrier employee travelling on duty, firm reservation
    /// </summary>
    [pbr::OriginalName("IDB1")] Idb1 = 3,
    /// <summary>
    /// Industry discount, other carrier employee travelling on duty, pace available
    /// </summary>
    [pbr::OriginalName("IDB2")] Idb2 = 4,
    /// <summary>
    /// Ticket issued pursuant to Resolution 880
    /// </summary>
    [pbr::OriginalName("AD")] Ad = 5,
    /// <summary>
    /// Ticket issued pursuant to Resolution 200g
    /// </summary>
    [pbr::OriginalName("DG")] Dg = 6,
    /// <summary>
    /// Discount not covered by industry regulations (for online use only)
    /// </summary>
    [pbr::OriginalName("DM")] Dm = 7,
    /// <summary>
    /// Ticket issued pursuant to Resolution 886
    /// </summary>
    [pbr::OriginalName("GE")] Ge = 8,
    /// <summary>
    /// Ticket issued pursuant to Resolution 788
    /// </summary>
    [pbr::OriginalName("IG")] Ig = 9,
    /// <summary>
    /// Ticket issued pursuant to Resolution 888
    /// </summary>
    [pbr::OriginalName("RG")] Rg = 10,
    /// <summary>
    /// Ticket issued pursuant to Resolution 884
    /// </summary>
    [pbr::OriginalName("UD")] Ud = 11,
    /// <summary>
    /// Industry discount ticket - no classification designator
    /// </summary>
    [pbr::OriginalName("ID")] Id = 12,
    /// <summary>
    /// Industry discount, member's own employee travelling on duty, firm reservation
    /// </summary>
    [pbr::OriginalName("IDFS1")] Idfs1 = 13,
    /// <summary>
    /// Industry discount, member's own employee travelling on duty, space available
    /// </summary>
    [pbr::OriginalName("IDFS2")] Idfs2 = 14,
    /// <summary>
    /// Industry discount, member's own employee/dependant, firm reservation
    /// </summary>
    [pbr::OriginalName("IDR1")] Idr1 = 15,
    /// <summary>
    /// Industry discount, member's own employee/dependant, space available
    /// </summary>
    [pbr::OriginalName("IDR2")] Idr2 = 16,
  }

  /// <summary>
  /// Passenger security status. Note: in practical terms, this is always likely to be NOT_SELECTEE or TSA_PRECHECK since current DHS Pre-Departure Regulations only allow on-site printing of boarding passes. It is mandatory when US travel is involved.
  /// </summary>
  public enum SelecteeIndicator {
    /// <summary>
    /// Not selected for special security screening
    /// </summary>
    [pbr::OriginalName("NOT_SELECTEE")] NotSelectee = 0,
    /// <summary>
    /// Selected for special security screening
    /// </summary>
    [pbr::OriginalName("SELECTEE")] Selectee = 1,
    /// <summary>
    /// Passenger eligible for TSA PreCheck®
    /// </summary>
    [pbr::OriginalName("TSA_PRECHECK")] TsaPrecheck = 3,
  }

  /// <summary>
  /// Passenger eligibility for Fast-track privileges.
  /// </summary>
  public enum FastTrack {
    /// <summary>
    /// Not Eligible
    /// </summary>
    [pbr::OriginalName("N")] N = 0,
    /// <summary>
    /// Eligible
    /// </summary>
    [pbr::OriginalName("Y")] Y = 1,
  }

  /// <summary>
  /// A set of values that indicate the security programs and clearances that are supported by an airport and of which the passenger is eligible to be displayed on the boarding pass.
  /// </summary>
  public enum AirportSecurityPrograms {
    /// <summary>
    /// Default, no programs available, or programs are unknown.
    /// </summary>
    [pbr::OriginalName("NO_SECURITY_PROGRAMS")] NoSecurityPrograms = 0,
    /// <summary>
    /// TSA PreCheck®.
    /// </summary>
    [pbr::OriginalName("TSA_PRE_CHECK")] TsaPreCheck = 1,
    /// <summary>
    /// TSA PreCheck® Touchless ID.
    /// </summary>
    [pbr::OriginalName("TSA_PRE_CHECK_TOUCHLESS_ID")] TsaPreCheckTouchlessId = 2,
    /// <summary>
    /// Transit Without Visa.
    /// </summary>
    [pbr::OriginalName("TWOV")] Twov = 3,
    /// <summary>
    /// One Stop Security.
    /// </summary>
    [pbr::OriginalName("OSS")] Oss = 4,
    /// <summary>
    /// International to International.
    /// </summary>
    [pbr::OriginalName("ITI")] Iti = 5,
    /// <summary>
    /// International to Domestic.
    /// </summary>
    [pbr::OriginalName("ITD")] Itd = 6,
    /// <summary>
    /// Global Entry.
    /// </summary>
    [pbr::OriginalName("GLOBAL_ENTRY")] GlobalEntry = 7,
    /// <summary>
    /// CLEAR Secure.
    /// </summary>
    [pbr::OriginalName("CLEAR")] Clear = 8,
  }

  /// <summary>
  /// For customers subscribing to automatic updates, the flight status will be automatically updated. Status is also writable for manual updates.
  /// </summary>
  public enum FlightStatus {
    /// <summary>
    /// No status is known, or flight is not yet scheduled.
    /// </summary>
    [pbr::OriginalName("UNKNOWN")] Unknown = 0,
    /// <summary>
    /// Flight is scheduled to depart.
    /// </summary>
    [pbr::OriginalName("SCHEDULED")] Scheduled = 1,
    /// <summary>
    /// Flight has left the departure gate, but may not be airborne yet.
    /// </summary>
    [pbr::OriginalName("DEPARTED")] Departed = 2,
    /// <summary>
    /// Flight is airborne.
    /// </summary>
    [pbr::OriginalName("INAIR")] Inair = 3,
    /// <summary>
    /// Flight has landed, but may not yet be at the arrival gate.
    /// </summary>
    [pbr::OriginalName("LANDED")] Landed = 4,
    /// <summary>
    /// Flight has arrived at the destination gate.
    /// </summary>
    [pbr::OriginalName("ARRIVED")] Arrived = 5,
    /// <summary>
    /// Flight has been cancelled.
    /// </summary>
    [pbr::OriginalName("CANCELLED")] Cancelled = 6,
    /// <summary>
    /// Flight is delayed to depart by at least 15 minutes.
    /// </summary>
    [pbr::OriginalName("DELAYED")] Delayed = 7,
    /// <summary>
    /// Flight has been diverted from its scheduled destination and has left the departure gate.
    /// </summary>
    [pbr::OriginalName("DEPARTED_DIVERTED")] DepartedDiverted = 8,
    /// <summary>
    /// Flight has been diverted from its scheduled destination and is airborne.
    /// </summary>
    [pbr::OriginalName("INAIR_DIVERTED")] InairDiverted = 9,
    /// <summary>
    /// Flight has arrived at a location different to its scheduled destination.
    /// </summary>
    [pbr::OriginalName("ARRIVED_DIVERTED")] ArrivedDiverted = 10,
    /// <summary>
    /// Flight has left its diverted destination en-route to its original destination.
    /// </summary>
    [pbr::OriginalName("DEPARTED_RECOVERY")] DepartedRecovery = 11,
    /// <summary>
    /// Flight has left its diverted destination airborne en-route to its original destination.
    /// </summary>
    [pbr::OriginalName("INAIR_RECOVERY")] InairRecovery = 12,
    /// <summary>
    /// Flight has landed at is original scheduled destination.
    /// </summary>
    [pbr::OriginalName("ARRIVED_RECOVERY")] ArrivedRecovery = 13,
  }

  public enum FlightCreateMode {
    [pbr::OriginalName("DO_NOT_USE")] DoNotUse = 0,
    [pbr::OriginalName("MANUAL")] Manual = 1,
    [pbr::OriginalName("AUTOMATIC")] Automatic = 2,
  }

  /// <summary>
  /// Flight alerts automatically update boarding passes as information becomes available or changes. Note that these services may incur additional usage charges.
  /// </summary>
  public enum FlightAlerts {
    /// <summary>
    /// Boarding passes will not automatically update.
    /// </summary>
    [pbr::OriginalName("NO_ALERTS")] NoAlerts = 0,
    /// <summary>
    /// Boarding passes will automatically update whenever a change to the departure gate/time, arrival gate/time or baggage belt information is detected.
    /// </summary>
    [pbr::OriginalName("ALL_ALERTS")] AllAlerts = 1,
    /// <summary>
    /// Boarding passes will automatically update whenever a change to the departure gate is detected.
    /// </summary>
    [pbr::OriginalName("DEPARTURE_GATE_ALERT")] DepartureGateAlert = 2,
    /// <summary>
    /// Boarding passes will automatically update whenever a change to the estimated departure gate is detected.
    /// </summary>
    [pbr::OriginalName("DEPARTURE_TIME_ALERT")] DepartureTimeAlert = 4,
    /// <summary>
    /// Boarding passes will automatically update whenever a change to the arrival gate is detected.
    /// </summary>
    [pbr::OriginalName("ARRIVAL_GATE_ALERT")] ArrivalGateAlert = 8,
    /// <summary>
    /// Boarding passes will automatically update whenever a change to the estimated arrival time is detected.
    /// </summary>
    [pbr::OriginalName("ARRIVAL_TIME_ALERT")] ArrivalTimeAlert = 16,
    /// <summary>
    /// Boarding passes will automatically update whenever the baggage collection belt or area is known or changes.
    /// </summary>
    [pbr::OriginalName("BAGGAGE_BELT_ALERT")] BaggageBeltAlert = 32,
  }

  /// <summary>
  /// The Boarding Policy is used to determine informational labels on the pass.
  /// </summary>
  public enum BoardingPolicy {
    [pbr::OriginalName("BOARDING_POLICY_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    /// Boarding is managed by zone.
    /// </summary>
    [pbr::OriginalName("ZONE_BASED")] ZoneBased = 1,
    /// <summary>
    /// Boarding is managed by group.
    /// </summary>
    [pbr::OriginalName("GROUP_BASED")] GroupBased = 2,
    /// <summary>
    /// Another, or No boarding policy is in place.
    /// </summary>
    [pbr::OriginalName("BOARDING_POLICY_OTHER")] Other = 3,
  }

  /// <summary>
  /// The Seat Class Policy is used to determine informational labels on the pass.
  /// </summary>
  public enum SeatClassPolicy {
    [pbr::OriginalName("SEAT_CLASS_POLICY_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    /// Seats groups are determined by cabin. "Cabin" will be used as the label on the pass.
    /// </summary>
    [pbr::OriginalName("CABIN_BASED")] CabinBased = 1,
    /// <summary>
    /// Seats groups are determined by class of travel. "Class" will be used as the label on the pass.
    /// </summary>
    [pbr::OriginalName("CLASS_BASED")] ClassBased = 2,
    /// <summary>
    /// Seat groups are determined by tier. "Tier" will be used as the label on the pass.
    /// </summary>
    [pbr::OriginalName("TIER_BASED")] TierBased = 3,
    /// <summary>
    /// Another, or no seat policy is in place. No label will be used on the pass.
    /// </summary>
    [pbr::OriginalName("SEAT_CLASS_POLICY_OTHER")] Other = 4,
  }

  /// <summary>
  /// The authority of an identifier (carrier code, airport code, etc.).
  /// </summary>
  public enum Authority {
    /// <summary>
    /// International Air Transport Association (IATA).
    /// </summary>
    [pbr::OriginalName("IATA")] Iata = 0,
    /// <summary>
    /// International Civil Aviation Organization (ICAO).
    /// </summary>
    [pbr::OriginalName("ICAO")] Icao = 1,
  }

  /// <summary>
  /// Passenger Capabilities are used with Apple Semantic boarding passes to visibly show information useful at the boarding gate.
  /// </summary>
  public enum PassengerCapabilities {
    [pbr::OriginalName("NO_CAPABILITIES")] NoCapabilities = 0,
    [pbr::OriginalName("PRE_BOARDING")] PreBoarding = 1,
    [pbr::OriginalName("PRIORITY_BOARDING")] PriorityBoarding = 2,
    [pbr::OriginalName("CARRY_ON")] CarryOn = 3,
    [pbr::OriginalName("PERSONAL_ITEM")] PersonalItem = 4,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Conditional items for the flight segment as described in IATA PSC Resolution 792.  Note: items supplied or derived through other objects (E.g. Frequent Flyer information) are not supplied here.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ConditionalItems : pb::IMessage<ConditionalItems>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ConditionalItems> _parser = new pb::MessageParser<ConditionalItems>(() => new ConditionalItems());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ConditionalItems> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.Flights.BarcodeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ConditionalItems() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ConditionalItems(ConditionalItems other) : this() {
      passengerDescription_ = other.passengerDescription_;
      checkInSource_ = other.checkInSource_;
      boardingPassIssuanceSource_ = other.boardingPassIssuanceSource_;
      boardingPassIssueDate_ = other.boardingPassIssueDate_ != null ? other.boardingPassIssueDate_.Clone() : null;
      documentType_ = other.documentType_;
      boardingPassIssuer_ = other.boardingPassIssuer_;
      baggageTagNumber_ = other.baggageTagNumber_.Clone();
      selecteeIndicator_ = other.selecteeIndicator_;
      internationalDocVerification_ = other.internationalDocVerification_;
      idadIndicator_ = other.idadIndicator_;
      fastTrack_ = other.fastTrack_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ConditionalItems Clone() {
      return new ConditionalItems(this);
    }

    /// <summary>Field number for the "passengerDescription" field.</summary>
    public const int PassengerDescriptionFieldNumber = 1;
    private global::PassKit.Grpc.Flights.PassengerDescription passengerDescription_ = global::PassKit.Grpc.Flights.PassengerDescription.Adult;
    /// <summary>
    /// Passenger Status as detailed in IATA PSC Resolution 792 Attachment 'C'. Note: all values other than 0 indicate that the passenger has checked in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Flights.PassengerDescription PassengerDescription {
      get { return passengerDescription_; }
      set {
        passengerDescription_ = value;
      }
    }

    /// <summary>Field number for the "checkInSource" field.</summary>
    public const int CheckInSourceFieldNumber = 2;
    private global::PassKit.Grpc.Flights.Source checkInSource_ = global::PassKit.Grpc.Flights.Source.W;
    /// <summary>
    /// Source of checkin as detailed in IATA PSC Resolution 792 Attachment 'C'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Flights.Source CheckInSource {
      get { return checkInSource_; }
      set {
        checkInSource_ = value;
      }
    }

    /// <summary>Field number for the "boardingPassIssuanceSource" field.</summary>
    public const int BoardingPassIssuanceSourceFieldNumber = 3;
    private global::PassKit.Grpc.Flights.Source boardingPassIssuanceSource_ = global::PassKit.Grpc.Flights.Source.W;
    /// <summary>
    /// Source of boarding pass issuance as detailed in IATA PSC Resolution 792 Attachment 'C'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Flights.Source BoardingPassIssuanceSource {
      get { return boardingPassIssuanceSource_; }
      set {
        boardingPassIssuanceSource_ = value;
      }
    }

    /// <summary>Field number for the "boardingPassIssueDate" field.</summary>
    public const int BoardingPassIssueDateFieldNumber = 4;
    private global::PassKit.Grpc.Date boardingPassIssueDate_;
    /// <summary>
    /// Date of boarding pass issuance, local to the boarding point.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Date BoardingPassIssueDate {
      get { return boardingPassIssueDate_; }
      set {
        boardingPassIssueDate_ = value;
      }
    }

    /// <summary>Field number for the "documentType" field.</summary>
    public const int DocumentTypeFieldNumber = 5;
    private global::PassKit.Grpc.Flights.DocType documentType_ = global::PassKit.Grpc.Flights.DocType.B;
    /// <summary>
    /// Document type that the barcode represents.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Flights.DocType DocumentType {
      get { return documentType_; }
      set {
        documentType_ = value;
      }
    }

    /// <summary>Field number for the "boardingPassIssuer" field.</summary>
    public const int BoardingPassIssuerFieldNumber = 6;
    private string boardingPassIssuer_ = "";
    /// <summary>
    /// IATA or ICAO designator of boarding pass issuer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BoardingPassIssuer {
      get { return boardingPassIssuer_; }
      set {
        boardingPassIssuer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "baggageTagNumber" field.</summary>
    public const int BaggageTagNumberFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_baggageTagNumber_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> baggageTagNumber_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// This field allows carriers to populate baggage tag numbers and the number of consecutive bags. It contains 13 characters corresponding to the 10 digit bag tag number, as per IATA BCM specifications, Resolution 740 and 3 digits identifying the number of consecutive tags.\n1: leading digit – 0 for interline tag, 1 for fall-back tag, 2 for interline rush tag.\n2-4: carrier numeric code.\n5-10: carrier initial tag number (leading zeros).\n11-13: number of consecutive tags (allows for up to 999 tags).\nUp to 2 additional, non-consecutive tags can be added.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> BaggageTagNumber {
      get { return baggageTagNumber_; }
    }

    /// <summary>Field number for the "selecteeIndicator" field.</summary>
    public const int SelecteeIndicatorFieldNumber = 8;
    private global::PassKit.Grpc.Flights.SelecteeIndicator selecteeIndicator_ = global::PassKit.Grpc.Flights.SelecteeIndicator.NotSelectee;
    /// <summary>
    /// Passenger security status. Note: in practical terms, this is always likely to be NOT_SELECTEE or TSA_PRECHECK since current DHS Pre-Departure Regulations only allow on-site printing of boarding passes. It is mandatory when US travel is involved.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Flights.SelecteeIndicator SelecteeIndicator {
      get { return selecteeIndicator_; }
      set {
        selecteeIndicator_ = value;
      }
    }

    /// <summary>Field number for the "internationalDocVerification" field.</summary>
    public const int InternationalDocVerificationFieldNumber = 9;
    private global::PassKit.Grpc.Flights.InternationalDocVerification internationalDocVerification_ = global::PassKit.Grpc.Flights.InternationalDocVerification.NotRequired;
    /// <summary>
    /// International Documentation Verification status as detailed in IATA PSC Resolution 792 Attachment 'C'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Flights.InternationalDocVerification InternationalDocVerification {
      get { return internationalDocVerification_; }
      set {
        internationalDocVerification_ = value;
      }
    }

    /// <summary>Field number for the "idadIndicator" field.</summary>
    public const int IdadIndicatorFieldNumber = 10;
    private global::PassKit.Grpc.Flights.IDADIndicator idadIndicator_ = global::PassKit.Grpc.Flights.IDADIndicator.None;
    /// <summary>
    /// Industry Discount / Airline Discount codes. See IATA Recommended Practice 1788.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Flights.IDADIndicator IdadIndicator {
      get { return idadIndicator_; }
      set {
        idadIndicator_ = value;
      }
    }

    /// <summary>Field number for the "fastTrack" field.</summary>
    public const int FastTrackFieldNumber = 11;
    private global::PassKit.Grpc.Flights.FastTrack fastTrack_ = global::PassKit.Grpc.Flights.FastTrack.N;
    /// <summary>
    /// Passenger eligibility for Fast-track privileges.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Flights.FastTrack FastTrack {
      get { return fastTrack_; }
      set {
        fastTrack_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ConditionalItems);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ConditionalItems other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PassengerDescription != other.PassengerDescription) return false;
      if (CheckInSource != other.CheckInSource) return false;
      if (BoardingPassIssuanceSource != other.BoardingPassIssuanceSource) return false;
      if (!object.Equals(BoardingPassIssueDate, other.BoardingPassIssueDate)) return false;
      if (DocumentType != other.DocumentType) return false;
      if (BoardingPassIssuer != other.BoardingPassIssuer) return false;
      if(!baggageTagNumber_.Equals(other.baggageTagNumber_)) return false;
      if (SelecteeIndicator != other.SelecteeIndicator) return false;
      if (InternationalDocVerification != other.InternationalDocVerification) return false;
      if (IdadIndicator != other.IdadIndicator) return false;
      if (FastTrack != other.FastTrack) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (PassengerDescription != global::PassKit.Grpc.Flights.PassengerDescription.Adult) hash ^= PassengerDescription.GetHashCode();
      if (CheckInSource != global::PassKit.Grpc.Flights.Source.W) hash ^= CheckInSource.GetHashCode();
      if (BoardingPassIssuanceSource != global::PassKit.Grpc.Flights.Source.W) hash ^= BoardingPassIssuanceSource.GetHashCode();
      if (boardingPassIssueDate_ != null) hash ^= BoardingPassIssueDate.GetHashCode();
      if (DocumentType != global::PassKit.Grpc.Flights.DocType.B) hash ^= DocumentType.GetHashCode();
      if (BoardingPassIssuer.Length != 0) hash ^= BoardingPassIssuer.GetHashCode();
      hash ^= baggageTagNumber_.GetHashCode();
      if (SelecteeIndicator != global::PassKit.Grpc.Flights.SelecteeIndicator.NotSelectee) hash ^= SelecteeIndicator.GetHashCode();
      if (InternationalDocVerification != global::PassKit.Grpc.Flights.InternationalDocVerification.NotRequired) hash ^= InternationalDocVerification.GetHashCode();
      if (IdadIndicator != global::PassKit.Grpc.Flights.IDADIndicator.None) hash ^= IdadIndicator.GetHashCode();
      if (FastTrack != global::PassKit.Grpc.Flights.FastTrack.N) hash ^= FastTrack.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PassengerDescription != global::PassKit.Grpc.Flights.PassengerDescription.Adult) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PassengerDescription);
      }
      if (CheckInSource != global::PassKit.Grpc.Flights.Source.W) {
        output.WriteRawTag(16);
        output.WriteEnum((int) CheckInSource);
      }
      if (BoardingPassIssuanceSource != global::PassKit.Grpc.Flights.Source.W) {
        output.WriteRawTag(24);
        output.WriteEnum((int) BoardingPassIssuanceSource);
      }
      if (boardingPassIssueDate_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BoardingPassIssueDate);
      }
      if (DocumentType != global::PassKit.Grpc.Flights.DocType.B) {
        output.WriteRawTag(40);
        output.WriteEnum((int) DocumentType);
      }
      if (BoardingPassIssuer.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BoardingPassIssuer);
      }
      baggageTagNumber_.WriteTo(output, _repeated_baggageTagNumber_codec);
      if (SelecteeIndicator != global::PassKit.Grpc.Flights.SelecteeIndicator.NotSelectee) {
        output.WriteRawTag(64);
        output.WriteEnum((int) SelecteeIndicator);
      }
      if (InternationalDocVerification != global::PassKit.Grpc.Flights.InternationalDocVerification.NotRequired) {
        output.WriteRawTag(72);
        output.WriteEnum((int) InternationalDocVerification);
      }
      if (IdadIndicator != global::PassKit.Grpc.Flights.IDADIndicator.None) {
        output.WriteRawTag(80);
        output.WriteEnum((int) IdadIndicator);
      }
      if (FastTrack != global::PassKit.Grpc.Flights.FastTrack.N) {
        output.WriteRawTag(88);
        output.WriteEnum((int) FastTrack);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PassengerDescription != global::PassKit.Grpc.Flights.PassengerDescription.Adult) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PassengerDescription);
      }
      if (CheckInSource != global::PassKit.Grpc.Flights.Source.W) {
        output.WriteRawTag(16);
        output.WriteEnum((int) CheckInSource);
      }
      if (BoardingPassIssuanceSource != global::PassKit.Grpc.Flights.Source.W) {
        output.WriteRawTag(24);
        output.WriteEnum((int) BoardingPassIssuanceSource);
      }
      if (boardingPassIssueDate_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BoardingPassIssueDate);
      }
      if (DocumentType != global::PassKit.Grpc.Flights.DocType.B) {
        output.WriteRawTag(40);
        output.WriteEnum((int) DocumentType);
      }
      if (BoardingPassIssuer.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BoardingPassIssuer);
      }
      baggageTagNumber_.WriteTo(ref output, _repeated_baggageTagNumber_codec);
      if (SelecteeIndicator != global::PassKit.Grpc.Flights.SelecteeIndicator.NotSelectee) {
        output.WriteRawTag(64);
        output.WriteEnum((int) SelecteeIndicator);
      }
      if (InternationalDocVerification != global::PassKit.Grpc.Flights.InternationalDocVerification.NotRequired) {
        output.WriteRawTag(72);
        output.WriteEnum((int) InternationalDocVerification);
      }
      if (IdadIndicator != global::PassKit.Grpc.Flights.IDADIndicator.None) {
        output.WriteRawTag(80);
        output.WriteEnum((int) IdadIndicator);
      }
      if (FastTrack != global::PassKit.Grpc.Flights.FastTrack.N) {
        output.WriteRawTag(88);
        output.WriteEnum((int) FastTrack);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (PassengerDescription != global::PassKit.Grpc.Flights.PassengerDescription.Adult) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PassengerDescription);
      }
      if (CheckInSource != global::PassKit.Grpc.Flights.Source.W) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CheckInSource);
      }
      if (BoardingPassIssuanceSource != global::PassKit.Grpc.Flights.Source.W) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BoardingPassIssuanceSource);
      }
      if (boardingPassIssueDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BoardingPassIssueDate);
      }
      if (DocumentType != global::PassKit.Grpc.Flights.DocType.B) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DocumentType);
      }
      if (BoardingPassIssuer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BoardingPassIssuer);
      }
      size += baggageTagNumber_.CalculateSize(_repeated_baggageTagNumber_codec);
      if (SelecteeIndicator != global::PassKit.Grpc.Flights.SelecteeIndicator.NotSelectee) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SelecteeIndicator);
      }
      if (InternationalDocVerification != global::PassKit.Grpc.Flights.InternationalDocVerification.NotRequired) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) InternationalDocVerification);
      }
      if (IdadIndicator != global::PassKit.Grpc.Flights.IDADIndicator.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IdadIndicator);
      }
      if (FastTrack != global::PassKit.Grpc.Flights.FastTrack.N) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FastTrack);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ConditionalItems other) {
      if (other == null) {
        return;
      }
      if (other.PassengerDescription != global::PassKit.Grpc.Flights.PassengerDescription.Adult) {
        PassengerDescription = other.PassengerDescription;
      }
      if (other.CheckInSource != global::PassKit.Grpc.Flights.Source.W) {
        CheckInSource = other.CheckInSource;
      }
      if (other.BoardingPassIssuanceSource != global::PassKit.Grpc.Flights.Source.W) {
        BoardingPassIssuanceSource = other.BoardingPassIssuanceSource;
      }
      if (other.boardingPassIssueDate_ != null) {
        if (boardingPassIssueDate_ == null) {
          BoardingPassIssueDate = new global::PassKit.Grpc.Date();
        }
        BoardingPassIssueDate.MergeFrom(other.BoardingPassIssueDate);
      }
      if (other.DocumentType != global::PassKit.Grpc.Flights.DocType.B) {
        DocumentType = other.DocumentType;
      }
      if (other.BoardingPassIssuer.Length != 0) {
        BoardingPassIssuer = other.BoardingPassIssuer;
      }
      baggageTagNumber_.Add(other.baggageTagNumber_);
      if (other.SelecteeIndicator != global::PassKit.Grpc.Flights.SelecteeIndicator.NotSelectee) {
        SelecteeIndicator = other.SelecteeIndicator;
      }
      if (other.InternationalDocVerification != global::PassKit.Grpc.Flights.InternationalDocVerification.NotRequired) {
        InternationalDocVerification = other.InternationalDocVerification;
      }
      if (other.IdadIndicator != global::PassKit.Grpc.Flights.IDADIndicator.None) {
        IdadIndicator = other.IdadIndicator;
      }
      if (other.FastTrack != global::PassKit.Grpc.Flights.FastTrack.N) {
        FastTrack = other.FastTrack;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PassengerDescription = (global::PassKit.Grpc.Flights.PassengerDescription) input.ReadEnum();
            break;
          }
          case 16: {
            CheckInSource = (global::PassKit.Grpc.Flights.Source) input.ReadEnum();
            break;
          }
          case 24: {
            BoardingPassIssuanceSource = (global::PassKit.Grpc.Flights.Source) input.ReadEnum();
            break;
          }
          case 34: {
            if (boardingPassIssueDate_ == null) {
              BoardingPassIssueDate = new global::PassKit.Grpc.Date();
            }
            input.ReadMessage(BoardingPassIssueDate);
            break;
          }
          case 40: {
            DocumentType = (global::PassKit.Grpc.Flights.DocType) input.ReadEnum();
            break;
          }
          case 50: {
            BoardingPassIssuer = input.ReadString();
            break;
          }
          case 58: {
            baggageTagNumber_.AddEntriesFrom(input, _repeated_baggageTagNumber_codec);
            break;
          }
          case 64: {
            SelecteeIndicator = (global::PassKit.Grpc.Flights.SelecteeIndicator) input.ReadEnum();
            break;
          }
          case 72: {
            InternationalDocVerification = (global::PassKit.Grpc.Flights.InternationalDocVerification) input.ReadEnum();
            break;
          }
          case 80: {
            IdadIndicator = (global::PassKit.Grpc.Flights.IDADIndicator) input.ReadEnum();
            break;
          }
          case 88: {
            FastTrack = (global::PassKit.Grpc.Flights.FastTrack) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PassengerDescription = (global::PassKit.Grpc.Flights.PassengerDescription) input.ReadEnum();
            break;
          }
          case 16: {
            CheckInSource = (global::PassKit.Grpc.Flights.Source) input.ReadEnum();
            break;
          }
          case 24: {
            BoardingPassIssuanceSource = (global::PassKit.Grpc.Flights.Source) input.ReadEnum();
            break;
          }
          case 34: {
            if (boardingPassIssueDate_ == null) {
              BoardingPassIssueDate = new global::PassKit.Grpc.Date();
            }
            input.ReadMessage(BoardingPassIssueDate);
            break;
          }
          case 40: {
            DocumentType = (global::PassKit.Grpc.Flights.DocType) input.ReadEnum();
            break;
          }
          case 50: {
            BoardingPassIssuer = input.ReadString();
            break;
          }
          case 58: {
            baggageTagNumber_.AddEntriesFrom(ref input, _repeated_baggageTagNumber_codec);
            break;
          }
          case 64: {
            SelecteeIndicator = (global::PassKit.Grpc.Flights.SelecteeIndicator) input.ReadEnum();
            break;
          }
          case 72: {
            InternationalDocVerification = (global::PassKit.Grpc.Flights.InternationalDocVerification) input.ReadEnum();
            break;
          }
          case 80: {
            IdadIndicator = (global::PassKit.Grpc.Flights.IDADIndicator) input.ReadEnum();
            break;
          }
          case 88: {
            FastTrack = (global::PassKit.Grpc.Flights.FastTrack) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// If there are no departures on a given day (E.g. flight only operates on Tuesdays and Thursdays), the days with no departures should be nil.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class FlightSchedule : pb::IMessage<FlightSchedule>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FlightSchedule> _parser = new pb::MessageParser<FlightSchedule>(() => new FlightSchedule());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FlightSchedule> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.Flights.BarcodeReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FlightSchedule() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FlightSchedule(FlightSchedule other) : this() {
      monday_ = other.monday_ != null ? other.monday_.Clone() : null;
      tuesday_ = other.tuesday_ != null ? other.tuesday_.Clone() : null;
      wednesday_ = other.wednesday_ != null ? other.wednesday_.Clone() : null;
      thursday_ = other.thursday_ != null ? other.thursday_.Clone() : null;
      friday_ = other.friday_ != null ? other.friday_.Clone() : null;
      saturday_ = other.saturday_ != null ? other.saturday_.Clone() : null;
      sunday_ = other.sunday_ != null ? other.sunday_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FlightSchedule Clone() {
      return new FlightSchedule(this);
    }

    /// <summary>Field number for the "monday" field.</summary>
    public const int MondayFieldNumber = 1;
    private global::PassKit.Grpc.Flights.FlightTimes monday_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Flights.FlightTimes Monday {
      get { return monday_; }
      set {
        monday_ = value;
      }
    }

    /// <summary>Field number for the "tuesday" field.</summary>
    public const int TuesdayFieldNumber = 2;
    private global::PassKit.Grpc.Flights.FlightTimes tuesday_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Flights.FlightTimes Tuesday {
      get { return tuesday_; }
      set {
        tuesday_ = value;
      }
    }

    /// <summary>Field number for the "wednesday" field.</summary>
    public const int WednesdayFieldNumber = 3;
    private global::PassKit.Grpc.Flights.FlightTimes wednesday_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Flights.FlightTimes Wednesday {
      get { return wednesday_; }
      set {
        wednesday_ = value;
      }
    }

    /// <summary>Field number for the "thursday" field.</summary>
    public const int ThursdayFieldNumber = 4;
    private global::PassKit.Grpc.Flights.FlightTimes thursday_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Flights.FlightTimes Thursday {
      get { return thursday_; }
      set {
        thursday_ = value;
      }
    }

    /// <summary>Field number for the "friday" field.</summary>
    public const int FridayFieldNumber = 5;
    private global::PassKit.Grpc.Flights.FlightTimes friday_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Flights.FlightTimes Friday {
      get { return friday_; }
      set {
        friday_ = value;
      }
    }

    /// <summary>Field number for the "saturday" field.</summary>
    public const int SaturdayFieldNumber = 6;
    private global::PassKit.Grpc.Flights.FlightTimes saturday_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Flights.FlightTimes Saturday {
      get { return saturday_; }
      set {
        saturday_ = value;
      }
    }

    /// <summary>Field number for the "sunday" field.</summary>
    public const int SundayFieldNumber = 7;
    private global::PassKit.Grpc.Flights.FlightTimes sunday_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Flights.FlightTimes Sunday {
      get { return sunday_; }
      set {
        sunday_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FlightSchedule);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FlightSchedule other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Monday, other.Monday)) return false;
      if (!object.Equals(Tuesday, other.Tuesday)) return false;
      if (!object.Equals(Wednesday, other.Wednesday)) return false;
      if (!object.Equals(Thursday, other.Thursday)) return false;
      if (!object.Equals(Friday, other.Friday)) return false;
      if (!object.Equals(Saturday, other.Saturday)) return false;
      if (!object.Equals(Sunday, other.Sunday)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (monday_ != null) hash ^= Monday.GetHashCode();
      if (tuesday_ != null) hash ^= Tuesday.GetHashCode();
      if (wednesday_ != null) hash ^= Wednesday.GetHashCode();
      if (thursday_ != null) hash ^= Thursday.GetHashCode();
      if (friday_ != null) hash ^= Friday.GetHashCode();
      if (saturday_ != null) hash ^= Saturday.GetHashCode();
      if (sunday_ != null) hash ^= Sunday.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (monday_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Monday);
      }
      if (tuesday_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Tuesday);
      }
      if (wednesday_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Wednesday);
      }
      if (thursday_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Thursday);
      }
      if (friday_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Friday);
      }
      if (saturday_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Saturday);
      }
      if (sunday_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Sunday);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (monday_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Monday);
      }
      if (tuesday_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Tuesday);
      }
      if (wednesday_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Wednesday);
      }
      if (thursday_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Thursday);
      }
      if (friday_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Friday);
      }
      if (saturday_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Saturday);
      }
      if (sunday_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Sunday);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (monday_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Monday);
      }
      if (tuesday_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tuesday);
      }
      if (wednesday_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Wednesday);
      }
      if (thursday_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Thursday);
      }
      if (friday_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Friday);
      }
      if (saturday_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Saturday);
      }
      if (sunday_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sunday);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FlightSchedule other) {
      if (other == null) {
        return;
      }
      if (other.monday_ != null) {
        if (monday_ == null) {
          Monday = new global::PassKit.Grpc.Flights.FlightTimes();
        }
        Monday.MergeFrom(other.Monday);
      }
      if (other.tuesday_ != null) {
        if (tuesday_ == null) {
          Tuesday = new global::PassKit.Grpc.Flights.FlightTimes();
        }
        Tuesday.MergeFrom(other.Tuesday);
      }
      if (other.wednesday_ != null) {
        if (wednesday_ == null) {
          Wednesday = new global::PassKit.Grpc.Flights.FlightTimes();
        }
        Wednesday.MergeFrom(other.Wednesday);
      }
      if (other.thursday_ != null) {
        if (thursday_ == null) {
          Thursday = new global::PassKit.Grpc.Flights.FlightTimes();
        }
        Thursday.MergeFrom(other.Thursday);
      }
      if (other.friday_ != null) {
        if (friday_ == null) {
          Friday = new global::PassKit.Grpc.Flights.FlightTimes();
        }
        Friday.MergeFrom(other.Friday);
      }
      if (other.saturday_ != null) {
        if (saturday_ == null) {
          Saturday = new global::PassKit.Grpc.Flights.FlightTimes();
        }
        Saturday.MergeFrom(other.Saturday);
      }
      if (other.sunday_ != null) {
        if (sunday_ == null) {
          Sunday = new global::PassKit.Grpc.Flights.FlightTimes();
        }
        Sunday.MergeFrom(other.Sunday);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (monday_ == null) {
              Monday = new global::PassKit.Grpc.Flights.FlightTimes();
            }
            input.ReadMessage(Monday);
            break;
          }
          case 18: {
            if (tuesday_ == null) {
              Tuesday = new global::PassKit.Grpc.Flights.FlightTimes();
            }
            input.ReadMessage(Tuesday);
            break;
          }
          case 26: {
            if (wednesday_ == null) {
              Wednesday = new global::PassKit.Grpc.Flights.FlightTimes();
            }
            input.ReadMessage(Wednesday);
            break;
          }
          case 34: {
            if (thursday_ == null) {
              Thursday = new global::PassKit.Grpc.Flights.FlightTimes();
            }
            input.ReadMessage(Thursday);
            break;
          }
          case 42: {
            if (friday_ == null) {
              Friday = new global::PassKit.Grpc.Flights.FlightTimes();
            }
            input.ReadMessage(Friday);
            break;
          }
          case 50: {
            if (saturday_ == null) {
              Saturday = new global::PassKit.Grpc.Flights.FlightTimes();
            }
            input.ReadMessage(Saturday);
            break;
          }
          case 58: {
            if (sunday_ == null) {
              Sunday = new global::PassKit.Grpc.Flights.FlightTimes();
            }
            input.ReadMessage(Sunday);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (monday_ == null) {
              Monday = new global::PassKit.Grpc.Flights.FlightTimes();
            }
            input.ReadMessage(Monday);
            break;
          }
          case 18: {
            if (tuesday_ == null) {
              Tuesday = new global::PassKit.Grpc.Flights.FlightTimes();
            }
            input.ReadMessage(Tuesday);
            break;
          }
          case 26: {
            if (wednesday_ == null) {
              Wednesday = new global::PassKit.Grpc.Flights.FlightTimes();
            }
            input.ReadMessage(Wednesday);
            break;
          }
          case 34: {
            if (thursday_ == null) {
              Thursday = new global::PassKit.Grpc.Flights.FlightTimes();
            }
            input.ReadMessage(Thursday);
            break;
          }
          case 42: {
            if (friday_ == null) {
              Friday = new global::PassKit.Grpc.Flights.FlightTimes();
            }
            input.ReadMessage(Friday);
            break;
          }
          case 50: {
            if (saturday_ == null) {
              Saturday = new global::PassKit.Grpc.Flights.FlightTimes();
            }
            input.ReadMessage(Saturday);
            break;
          }
          case 58: {
            if (sunday_ == null) {
              Sunday = new global::PassKit.Grpc.Flights.FlightTimes();
            }
            input.ReadMessage(Sunday);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class FlightTimes : pb::IMessage<FlightTimes>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FlightTimes> _parser = new pb::MessageParser<FlightTimes>(() => new FlightTimes());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FlightTimes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.Flights.BarcodeReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FlightTimes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FlightTimes(FlightTimes other) : this() {
      scheduledDepartureTime_ = other.scheduledDepartureTime_ != null ? other.scheduledDepartureTime_.Clone() : null;
      boardingTime_ = other.boardingTime_ != null ? other.boardingTime_.Clone() : null;
      gateClosingTime_ = other.gateClosingTime_ != null ? other.gateClosingTime_.Clone() : null;
      scheduledArrivalTime_ = other.scheduledArrivalTime_ != null ? other.scheduledArrivalTime_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FlightTimes Clone() {
      return new FlightTimes(this);
    }

    /// <summary>Field number for the "scheduledDepartureTime" field.</summary>
    public const int ScheduledDepartureTimeFieldNumber = 1;
    private global::PassKit.Grpc.Time scheduledDepartureTime_;
    /// <summary>
    /// The published departure time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Time ScheduledDepartureTime {
      get { return scheduledDepartureTime_; }
      set {
        scheduledDepartureTime_ = value;
      }
    }

    /// <summary>Field number for the "boardingTime" field.</summary>
    public const int BoardingTimeFieldNumber = 2;
    private global::PassKit.Grpc.Time boardingTime_;
    /// <summary>
    /// The published boarding time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Time BoardingTime {
      get { return boardingTime_; }
      set {
        boardingTime_ = value;
      }
    }

    /// <summary>Field number for the "gateClosingTime" field.</summary>
    public const int GateClosingTimeFieldNumber = 3;
    private global::PassKit.Grpc.Time gateClosingTime_;
    /// <summary>
    /// The point after which passengers will be denied boarding.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Time GateClosingTime {
      get { return gateClosingTime_; }
      set {
        gateClosingTime_ = value;
      }
    }

    /// <summary>Field number for the "scheduledArrivalTime" field.</summary>
    public const int ScheduledArrivalTimeFieldNumber = 4;
    private global::PassKit.Grpc.Time scheduledArrivalTime_;
    /// <summary>
    /// The published, scheduled arrival time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Time ScheduledArrivalTime {
      get { return scheduledArrivalTime_; }
      set {
        scheduledArrivalTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FlightTimes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FlightTimes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ScheduledDepartureTime, other.ScheduledDepartureTime)) return false;
      if (!object.Equals(BoardingTime, other.BoardingTime)) return false;
      if (!object.Equals(GateClosingTime, other.GateClosingTime)) return false;
      if (!object.Equals(ScheduledArrivalTime, other.ScheduledArrivalTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (scheduledDepartureTime_ != null) hash ^= ScheduledDepartureTime.GetHashCode();
      if (boardingTime_ != null) hash ^= BoardingTime.GetHashCode();
      if (gateClosingTime_ != null) hash ^= GateClosingTime.GetHashCode();
      if (scheduledArrivalTime_ != null) hash ^= ScheduledArrivalTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (scheduledDepartureTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ScheduledDepartureTime);
      }
      if (boardingTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BoardingTime);
      }
      if (gateClosingTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(GateClosingTime);
      }
      if (scheduledArrivalTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ScheduledArrivalTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (scheduledDepartureTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ScheduledDepartureTime);
      }
      if (boardingTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BoardingTime);
      }
      if (gateClosingTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(GateClosingTime);
      }
      if (scheduledArrivalTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ScheduledArrivalTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (scheduledDepartureTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScheduledDepartureTime);
      }
      if (boardingTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BoardingTime);
      }
      if (gateClosingTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GateClosingTime);
      }
      if (scheduledArrivalTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScheduledArrivalTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FlightTimes other) {
      if (other == null) {
        return;
      }
      if (other.scheduledDepartureTime_ != null) {
        if (scheduledDepartureTime_ == null) {
          ScheduledDepartureTime = new global::PassKit.Grpc.Time();
        }
        ScheduledDepartureTime.MergeFrom(other.ScheduledDepartureTime);
      }
      if (other.boardingTime_ != null) {
        if (boardingTime_ == null) {
          BoardingTime = new global::PassKit.Grpc.Time();
        }
        BoardingTime.MergeFrom(other.BoardingTime);
      }
      if (other.gateClosingTime_ != null) {
        if (gateClosingTime_ == null) {
          GateClosingTime = new global::PassKit.Grpc.Time();
        }
        GateClosingTime.MergeFrom(other.GateClosingTime);
      }
      if (other.scheduledArrivalTime_ != null) {
        if (scheduledArrivalTime_ == null) {
          ScheduledArrivalTime = new global::PassKit.Grpc.Time();
        }
        ScheduledArrivalTime.MergeFrom(other.ScheduledArrivalTime);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (scheduledDepartureTime_ == null) {
              ScheduledDepartureTime = new global::PassKit.Grpc.Time();
            }
            input.ReadMessage(ScheduledDepartureTime);
            break;
          }
          case 18: {
            if (boardingTime_ == null) {
              BoardingTime = new global::PassKit.Grpc.Time();
            }
            input.ReadMessage(BoardingTime);
            break;
          }
          case 26: {
            if (gateClosingTime_ == null) {
              GateClosingTime = new global::PassKit.Grpc.Time();
            }
            input.ReadMessage(GateClosingTime);
            break;
          }
          case 34: {
            if (scheduledArrivalTime_ == null) {
              ScheduledArrivalTime = new global::PassKit.Grpc.Time();
            }
            input.ReadMessage(ScheduledArrivalTime);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (scheduledDepartureTime_ == null) {
              ScheduledDepartureTime = new global::PassKit.Grpc.Time();
            }
            input.ReadMessage(ScheduledDepartureTime);
            break;
          }
          case 18: {
            if (boardingTime_ == null) {
              BoardingTime = new global::PassKit.Grpc.Time();
            }
            input.ReadMessage(BoardingTime);
            break;
          }
          case 26: {
            if (gateClosingTime_ == null) {
              GateClosingTime = new global::PassKit.Grpc.Time();
            }
            input.ReadMessage(GateClosingTime);
            break;
          }
          case 34: {
            if (scheduledArrivalTime_ == null) {
              ScheduledArrivalTime = new global::PassKit.Grpc.Time();
            }
            input.ReadMessage(ScheduledArrivalTime);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// FlightUrls add utility to Semantic Boarding Passes.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class FlightURLs : pb::IMessage<FlightURLs>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FlightURLs> _parser = new pb::MessageParser<FlightURLs>(() => new FlightURLs());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FlightURLs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.Flights.BarcodeReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FlightURLs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FlightURLs(FlightURLs other) : this() {
      upgradeURL_ = other.upgradeURL_;
      orderFoodURL_ = other.orderFoodURL_;
      purchaseWifiURL_ = other.purchaseWifiURL_;
      changeSeatURL_ = other.changeSeatURL_;
      entertainmentURL_ = other.entertainmentURL_;
      standbyListURL_ = other.standbyListURL_;
      purchaseAdditionalBaggageURL_ = other.purchaseAdditionalBaggageURL_;
      purchaseLoungeAccessURL_ = other.purchaseLoungeAccessURL_;
      reportLostBagURL_ = other.reportLostBagURL_;
      managementURL_ = other.managementURL_;
      requestWheelchairURL_ = other.requestWheelchairURL_;
      registerServiceAnimalURL_ = other.registerServiceAnimalURL_;
      transitProviderEmail_ = other.transitProviderEmail_;
      transitProviderWebsiteURL_ = other.transitProviderWebsiteURL_;
      transitProviderPhoneNumber_ = other.transitProviderPhoneNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FlightURLs Clone() {
      return new FlightURLs(this);
    }

    /// <summary>Field number for the "upgradeURL" field.</summary>
    public const int UpgradeURLFieldNumber = 1;
    private string upgradeURL_ = "";
    /// <summary>
    /// A link to upgrade the flight.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UpgradeURL {
      get { return upgradeURL_; }
      set {
        upgradeURL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "orderFoodURL" field.</summary>
    public const int OrderFoodURLFieldNumber = 2;
    private string orderFoodURL_ = "";
    /// <summary>
    /// A link to order food, either before or during the flight.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OrderFoodURL {
      get { return orderFoodURL_; }
      set {
        orderFoodURL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "purchaseWifiURL" field.</summary>
    public const int PurchaseWifiURLFieldNumber = 3;
    private string purchaseWifiURL_ = "";
    /// <summary>
    /// A link to purchase in-flight wifi.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PurchaseWifiURL {
      get { return purchaseWifiURL_; }
      set {
        purchaseWifiURL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "changeSeatURL" field.</summary>
    public const int ChangeSeatURLFieldNumber = 4;
    private string changeSeatURL_ = "";
    /// <summary>
    /// A link to change the seat for this ticket.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ChangeSeatURL {
      get { return changeSeatURL_; }
      set {
        changeSeatURL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "entertainmentURL" field.</summary>
    public const int EntertainmentURLFieldNumber = 5;
    private string entertainmentURL_ = "";
    /// <summary>
    /// A link to in-flight entertainment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string EntertainmentURL {
      get { return entertainmentURL_; }
      set {
        entertainmentURL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "standbyListURL" field.</summary>
    public const int StandbyListURLFieldNumber = 6;
    private string standbyListURL_ = "";
    /// <summary>
    /// A link to the stand-by list for this flight.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string StandbyListURL {
      get { return standbyListURL_; }
      set {
        standbyListURL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "purchaseAdditionalBaggageURL" field.</summary>
    public const int PurchaseAdditionalBaggageURLFieldNumber = 7;
    private string purchaseAdditionalBaggageURL_ = "";
    /// <summary>
    ///A link to add checked bags for this ticket.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PurchaseAdditionalBaggageURL {
      get { return purchaseAdditionalBaggageURL_; }
      set {
        purchaseAdditionalBaggageURL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "purchaseLoungeAccessURL" field.</summary>
    public const int PurchaseLoungeAccessURLFieldNumber = 8;
    private string purchaseLoungeAccessURL_ = "";
    /// <summary>
    /// A link to purchase lounge access
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PurchaseLoungeAccessURL {
      get { return purchaseLoungeAccessURL_; }
      set {
        purchaseLoungeAccessURL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reportLostBagURL" field.</summary>
    public const int ReportLostBagURLFieldNumber = 9;
    private string reportLostBagURL_ = "";
    /// <summary>
    /// A link to report lost luggage.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ReportLostBagURL {
      get { return reportLostBagURL_; }
      set {
        reportLostBagURL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "managementURL" field.</summary>
    public const int ManagementURLFieldNumber = 10;
    private string managementURL_ = "";
    /// <summary>
    /// A link for managing the booking.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ManagementURL {
      get { return managementURL_; }
      set {
        managementURL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "requestWheelchairURL" field.</summary>
    public const int RequestWheelchairURLFieldNumber = 11;
    private string requestWheelchairURL_ = "";
    /// <summary>
    /// A link to request a wheel chair.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RequestWheelchairURL {
      get { return requestWheelchairURL_; }
      set {
        requestWheelchairURL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "registerServiceAnimalURL" field.</summary>
    public const int RegisterServiceAnimalURLFieldNumber = 12;
    private string registerServiceAnimalURL_ = "";
    /// <summary>
    /// A link for registering a service animal.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RegisterServiceAnimalURL {
      get { return registerServiceAnimalURL_; }
      set {
        registerServiceAnimalURL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "transitProviderEmail" field.</summary>
    public const int TransitProviderEmailFieldNumber = 13;
    private string transitProviderEmail_ = "";
    /// <summary>
    /// The email for the transit provider.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TransitProviderEmail {
      get { return transitProviderEmail_; }
      set {
        transitProviderEmail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "transitProviderWebsiteURL" field.</summary>
    public const int TransitProviderWebsiteURLFieldNumber = 14;
    private string transitProviderWebsiteURL_ = "";
    /// <summary>
    /// A link for the transit provider.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TransitProviderWebsiteURL {
      get { return transitProviderWebsiteURL_; }
      set {
        transitProviderWebsiteURL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "transitProviderPhoneNumber" field.</summary>
    public const int TransitProviderPhoneNumberFieldNumber = 15;
    private string transitProviderPhoneNumber_ = "";
    /// <summary>
    /// A phone number for the transit provider.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TransitProviderPhoneNumber {
      get { return transitProviderPhoneNumber_; }
      set {
        transitProviderPhoneNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FlightURLs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FlightURLs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UpgradeURL != other.UpgradeURL) return false;
      if (OrderFoodURL != other.OrderFoodURL) return false;
      if (PurchaseWifiURL != other.PurchaseWifiURL) return false;
      if (ChangeSeatURL != other.ChangeSeatURL) return false;
      if (EntertainmentURL != other.EntertainmentURL) return false;
      if (StandbyListURL != other.StandbyListURL) return false;
      if (PurchaseAdditionalBaggageURL != other.PurchaseAdditionalBaggageURL) return false;
      if (PurchaseLoungeAccessURL != other.PurchaseLoungeAccessURL) return false;
      if (ReportLostBagURL != other.ReportLostBagURL) return false;
      if (ManagementURL != other.ManagementURL) return false;
      if (RequestWheelchairURL != other.RequestWheelchairURL) return false;
      if (RegisterServiceAnimalURL != other.RegisterServiceAnimalURL) return false;
      if (TransitProviderEmail != other.TransitProviderEmail) return false;
      if (TransitProviderWebsiteURL != other.TransitProviderWebsiteURL) return false;
      if (TransitProviderPhoneNumber != other.TransitProviderPhoneNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (UpgradeURL.Length != 0) hash ^= UpgradeURL.GetHashCode();
      if (OrderFoodURL.Length != 0) hash ^= OrderFoodURL.GetHashCode();
      if (PurchaseWifiURL.Length != 0) hash ^= PurchaseWifiURL.GetHashCode();
      if (ChangeSeatURL.Length != 0) hash ^= ChangeSeatURL.GetHashCode();
      if (EntertainmentURL.Length != 0) hash ^= EntertainmentURL.GetHashCode();
      if (StandbyListURL.Length != 0) hash ^= StandbyListURL.GetHashCode();
      if (PurchaseAdditionalBaggageURL.Length != 0) hash ^= PurchaseAdditionalBaggageURL.GetHashCode();
      if (PurchaseLoungeAccessURL.Length != 0) hash ^= PurchaseLoungeAccessURL.GetHashCode();
      if (ReportLostBagURL.Length != 0) hash ^= ReportLostBagURL.GetHashCode();
      if (ManagementURL.Length != 0) hash ^= ManagementURL.GetHashCode();
      if (RequestWheelchairURL.Length != 0) hash ^= RequestWheelchairURL.GetHashCode();
      if (RegisterServiceAnimalURL.Length != 0) hash ^= RegisterServiceAnimalURL.GetHashCode();
      if (TransitProviderEmail.Length != 0) hash ^= TransitProviderEmail.GetHashCode();
      if (TransitProviderWebsiteURL.Length != 0) hash ^= TransitProviderWebsiteURL.GetHashCode();
      if (TransitProviderPhoneNumber.Length != 0) hash ^= TransitProviderPhoneNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UpgradeURL.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UpgradeURL);
      }
      if (OrderFoodURL.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OrderFoodURL);
      }
      if (PurchaseWifiURL.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PurchaseWifiURL);
      }
      if (ChangeSeatURL.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ChangeSeatURL);
      }
      if (EntertainmentURL.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(EntertainmentURL);
      }
      if (StandbyListURL.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(StandbyListURL);
      }
      if (PurchaseAdditionalBaggageURL.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PurchaseAdditionalBaggageURL);
      }
      if (PurchaseLoungeAccessURL.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(PurchaseLoungeAccessURL);
      }
      if (ReportLostBagURL.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ReportLostBagURL);
      }
      if (ManagementURL.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ManagementURL);
      }
      if (RequestWheelchairURL.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(RequestWheelchairURL);
      }
      if (RegisterServiceAnimalURL.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(RegisterServiceAnimalURL);
      }
      if (TransitProviderEmail.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(TransitProviderEmail);
      }
      if (TransitProviderWebsiteURL.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(TransitProviderWebsiteURL);
      }
      if (TransitProviderPhoneNumber.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(TransitProviderPhoneNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UpgradeURL.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UpgradeURL);
      }
      if (OrderFoodURL.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OrderFoodURL);
      }
      if (PurchaseWifiURL.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PurchaseWifiURL);
      }
      if (ChangeSeatURL.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ChangeSeatURL);
      }
      if (EntertainmentURL.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(EntertainmentURL);
      }
      if (StandbyListURL.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(StandbyListURL);
      }
      if (PurchaseAdditionalBaggageURL.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PurchaseAdditionalBaggageURL);
      }
      if (PurchaseLoungeAccessURL.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(PurchaseLoungeAccessURL);
      }
      if (ReportLostBagURL.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ReportLostBagURL);
      }
      if (ManagementURL.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ManagementURL);
      }
      if (RequestWheelchairURL.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(RequestWheelchairURL);
      }
      if (RegisterServiceAnimalURL.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(RegisterServiceAnimalURL);
      }
      if (TransitProviderEmail.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(TransitProviderEmail);
      }
      if (TransitProviderWebsiteURL.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(TransitProviderWebsiteURL);
      }
      if (TransitProviderPhoneNumber.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(TransitProviderPhoneNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (UpgradeURL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UpgradeURL);
      }
      if (OrderFoodURL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderFoodURL);
      }
      if (PurchaseWifiURL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PurchaseWifiURL);
      }
      if (ChangeSeatURL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChangeSeatURL);
      }
      if (EntertainmentURL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EntertainmentURL);
      }
      if (StandbyListURL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StandbyListURL);
      }
      if (PurchaseAdditionalBaggageURL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PurchaseAdditionalBaggageURL);
      }
      if (PurchaseLoungeAccessURL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PurchaseLoungeAccessURL);
      }
      if (ReportLostBagURL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReportLostBagURL);
      }
      if (ManagementURL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ManagementURL);
      }
      if (RequestWheelchairURL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestWheelchairURL);
      }
      if (RegisterServiceAnimalURL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RegisterServiceAnimalURL);
      }
      if (TransitProviderEmail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TransitProviderEmail);
      }
      if (TransitProviderWebsiteURL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TransitProviderWebsiteURL);
      }
      if (TransitProviderPhoneNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TransitProviderPhoneNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FlightURLs other) {
      if (other == null) {
        return;
      }
      if (other.UpgradeURL.Length != 0) {
        UpgradeURL = other.UpgradeURL;
      }
      if (other.OrderFoodURL.Length != 0) {
        OrderFoodURL = other.OrderFoodURL;
      }
      if (other.PurchaseWifiURL.Length != 0) {
        PurchaseWifiURL = other.PurchaseWifiURL;
      }
      if (other.ChangeSeatURL.Length != 0) {
        ChangeSeatURL = other.ChangeSeatURL;
      }
      if (other.EntertainmentURL.Length != 0) {
        EntertainmentURL = other.EntertainmentURL;
      }
      if (other.StandbyListURL.Length != 0) {
        StandbyListURL = other.StandbyListURL;
      }
      if (other.PurchaseAdditionalBaggageURL.Length != 0) {
        PurchaseAdditionalBaggageURL = other.PurchaseAdditionalBaggageURL;
      }
      if (other.PurchaseLoungeAccessURL.Length != 0) {
        PurchaseLoungeAccessURL = other.PurchaseLoungeAccessURL;
      }
      if (other.ReportLostBagURL.Length != 0) {
        ReportLostBagURL = other.ReportLostBagURL;
      }
      if (other.ManagementURL.Length != 0) {
        ManagementURL = other.ManagementURL;
      }
      if (other.RequestWheelchairURL.Length != 0) {
        RequestWheelchairURL = other.RequestWheelchairURL;
      }
      if (other.RegisterServiceAnimalURL.Length != 0) {
        RegisterServiceAnimalURL = other.RegisterServiceAnimalURL;
      }
      if (other.TransitProviderEmail.Length != 0) {
        TransitProviderEmail = other.TransitProviderEmail;
      }
      if (other.TransitProviderWebsiteURL.Length != 0) {
        TransitProviderWebsiteURL = other.TransitProviderWebsiteURL;
      }
      if (other.TransitProviderPhoneNumber.Length != 0) {
        TransitProviderPhoneNumber = other.TransitProviderPhoneNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UpgradeURL = input.ReadString();
            break;
          }
          case 18: {
            OrderFoodURL = input.ReadString();
            break;
          }
          case 26: {
            PurchaseWifiURL = input.ReadString();
            break;
          }
          case 34: {
            ChangeSeatURL = input.ReadString();
            break;
          }
          case 42: {
            EntertainmentURL = input.ReadString();
            break;
          }
          case 50: {
            StandbyListURL = input.ReadString();
            break;
          }
          case 58: {
            PurchaseAdditionalBaggageURL = input.ReadString();
            break;
          }
          case 66: {
            PurchaseLoungeAccessURL = input.ReadString();
            break;
          }
          case 74: {
            ReportLostBagURL = input.ReadString();
            break;
          }
          case 82: {
            ManagementURL = input.ReadString();
            break;
          }
          case 90: {
            RequestWheelchairURL = input.ReadString();
            break;
          }
          case 98: {
            RegisterServiceAnimalURL = input.ReadString();
            break;
          }
          case 106: {
            TransitProviderEmail = input.ReadString();
            break;
          }
          case 114: {
            TransitProviderWebsiteURL = input.ReadString();
            break;
          }
          case 122: {
            TransitProviderPhoneNumber = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            UpgradeURL = input.ReadString();
            break;
          }
          case 18: {
            OrderFoodURL = input.ReadString();
            break;
          }
          case 26: {
            PurchaseWifiURL = input.ReadString();
            break;
          }
          case 34: {
            ChangeSeatURL = input.ReadString();
            break;
          }
          case 42: {
            EntertainmentURL = input.ReadString();
            break;
          }
          case 50: {
            StandbyListURL = input.ReadString();
            break;
          }
          case 58: {
            PurchaseAdditionalBaggageURL = input.ReadString();
            break;
          }
          case 66: {
            PurchaseLoungeAccessURL = input.ReadString();
            break;
          }
          case 74: {
            ReportLostBagURL = input.ReadString();
            break;
          }
          case 82: {
            ManagementURL = input.ReadString();
            break;
          }
          case 90: {
            RequestWheelchairURL = input.ReadString();
            break;
          }
          case 98: {
            RegisterServiceAnimalURL = input.ReadString();
            break;
          }
          case 106: {
            TransitProviderEmail = input.ReadString();
            break;
          }
          case 114: {
            TransitProviderWebsiteURL = input.ReadString();
            break;
          }
          case 122: {
            TransitProviderPhoneNumber = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
