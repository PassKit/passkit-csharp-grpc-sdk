// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: io/event_tickets/ticket.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PassKit.Grpc.EventTickets {

  /// <summary>Holder for reflection information generated from io/event_tickets/ticket.proto</summary>
  public static partial class TicketReflection {

    #region Descriptor
    /// <summary>File descriptor for io/event_tickets/ticket.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TicketReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1pby9ldmVudF90aWNrZXRzL3RpY2tldC5wcm90bxINZXZlbnRfdGlja2V0",
            "cxofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90bxocaW8vY29tbW9u",
            "L2xvY2FsaXphdGlvbi5wcm90bxoXaW8vY29tbW9uL21ldHJpY3MucHJvdG8a",
            "HmlvL2NvbW1vbi9jb21tb25fb2JqZWN0cy5wcm90bxoUaW8vY29tbW9uL3Bh",
            "c3MucHJvdG8aGGlvL2NvbW1vbi9wZXJzb25hbC5wcm90bxoWaW8vY29tbW9u",
            "L2ZpbHRlci5wcm90bxocaW8vZXZlbnRfdGlja2V0cy92ZW51ZS5wcm90bxoc",
            "aW8vZXZlbnRfdGlja2V0cy9ldmVudC5wcm90bxoiaW8vZXZlbnRfdGlja2V0",
            "cy90aWNrZXRfdHlwZS5wcm90bxohaW8vZXZlbnRfdGlja2V0cy9wcm9kdWN0",
            "aW9uLnByb3RvGi5wcm90b2MtZ2VuLW9wZW5hcGl2Mi9vcHRpb25zL2Fubm90",
            "YXRpb25zLnByb3RvIlkKCFRpY2tldElkEhIKCHRpY2tldElkGAEgASgJSAAS",
            "MwoMdGlja2V0TnVtYmVyGAIgASgLMhsuZXZlbnRfdGlja2V0cy5UaWNrZXRO",
            "dW1iZXJIAEIECgJpZCI6CgxUaWNrZXROdW1iZXISFAoMcHJvZHVjdGlvbklk",
            "GAEgASgJEhQKDHRpY2tldE51bWJlchgCIAEoCSKTCAoGVGlja2V0EhEKAmlk",
            "GAEgASgJQgWSQQJAARIUCgx0aWNrZXROdW1iZXIYAiABKAkSIwoFZXZlbnQY",
            "AyABKAsyFC5ldmVudF90aWNrZXRzLkV2ZW50Ei0KCnRpY2tldFR5cGUYBCAB",
            "KAsyGS5ldmVudF90aWNrZXRzLlRpY2tldFR5cGUSEwoLb3JkZXJOdW1iZXIY",
            "BSABKAkSEgoKZ3JvdXBpbmdJZBgGIAEoCRIXCg9iYXJjb2RlQ29udGVudHMY",
            "ByABKAkSJQoIc2VhdEluZm8YCCABKAsyEy5ldmVudF90aWNrZXRzLlNlYXQS",
            "KwoJZmFjZVZhbHVlGAkgASgLMhguZXZlbnRfdGlja2V0cy5GYWNlVmFsdWUS",
            "GgoGcGVyc29uGAogASgLMgouaW8uUGVyc29uEjUKCG1ldGFEYXRhGAsgAygL",
            "MiMuZXZlbnRfdGlja2V0cy5UaWNrZXQuTWV0YURhdGFFbnRyeRIaCgZvcHRP",
            "dXQYDCABKA4yCi5pby5Ub2dnbGUSMgoGc3RhdHVzGA0gASgOMhsuZXZlbnRf",
            "dGlja2V0cy5UaWNrZXRTdGF0dXNCBZJBAkABEi4KCmV4cGlyeURhdGUYDiAB",
            "KAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEjsKEXJlZGVtcHRpb25E",
            "ZXRhaWxzGA8gASgLMiAuZXZlbnRfdGlja2V0cy5SZWRlbXB0aW9uRGV0YWls",
            "cxI3Cg92YWxpZGF0ZURldGFpbHMYECADKAsyHi5ldmVudF90aWNrZXRzLlZh",
            "bGlkYXRlRGV0YWlscxIoCg1wYXNzT3ZlcnJpZGVzGBEgASgLMhEuaW8uUGFz",
            "c092ZXJyaWRlcxIiCgxwYXNzTWV0YURhdGEYEiABKAsyDC5pby5NZXRhZGF0",
            "YRIyCgdjcmVhdGVkGBMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFt",
            "cEIFkkECQAESMgoHdXBkYXRlZBgUIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5U",
            "aW1lc3RhbXBCBZJBAkABGi8KDU1ldGFEYXRhRW50cnkSCwoDa2V5GAEgASgJ",
            "Eg0KBXZhbHVlGAIgASgJOgI4ATrFAZJBwQEKvgEqBlRpY2tldDKbAVRpY2tl",
            "dCBpcyBhIHVuaXF1ZSB0aWNrZXQgaW5zdGFuY2UgYW5kIGhvbGRzIGRldGFp",
            "bHMgYWJvdXQgdGhlIGV2ZW50IGRhdGVzICYgdGltZXMsIHZlbnVlLCB0aWNr",
            "ZXQgaG9sZGVyIGFuZCBvdGhlciByZWxldmFudCBkZXRhaWxzIHBlcnRhaW5p",
            "bmcgdG8gYSB0aWNrZXQu0gEFZXZlbnTSAQ10aWNrZXRUeXBlVWlkIp0BCg9W",
            "YWxpZGF0ZURldGFpbHMSMAoMdmFsaWRhdGVEYXRlGAEgASgLMhouZ29vZ2xl",
            "LnByb3RvYnVmLlRpbWVzdGFtcBILCgNsYXQYAiABKAESCwoDbG9uGAMgASgB",
            "EgsKA2FsdBgEIAEoBRIWCg52YWxpZGF0ZVNvdXJjZRgGIAEoCRIZChF2YWxp",
            "ZGF0ZVJlZmVyZW5jZRgHIAEoCSKlAQoRUmVkZW1wdGlvbkRldGFpbHMSMgoO",
            "cmVkZW1wdGlvbkRhdGUYASABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0",
            "YW1wEgsKA2xhdBgCIAEoARILCgNsb24YAyABKAESCwoDYWx0GAQgASgFEhgK",
            "EHJlZGVtcHRpb25Tb3VyY2UYBiABKAkSGwoTcmVkZW1wdGlvblJlZmVyZW5j",
            "ZRgHIAEoCSItCglGYWNlVmFsdWUSDgoGYW1vdW50GAEgASgCEhAKCGN1cnJl",
            "bmN5GAIgASgJIr4JCgRTZWF0EgwKBHNlYXQYASABKAkSKgoNbG9jYWxpemVk",
            "U2VhdBgCIAEoCzITLmlvLkxvY2FsaXplZFN0cmluZxILCgNyb3cYAyABKAkS",
            "KQoMbG9jYWxpemVkUm93GAQgASgLMhMuaW8uTG9jYWxpemVkU3RyaW5nEg8K",
            "B3NlY3Rpb24YBSABKAkSLQoQbG9jYWxpemVkU2VjdGlvbhgGIAEoCzITLmlv",
            "LkxvY2FsaXplZFN0cmluZxIMCgRnYXRlGAcgASgJEioKDWxvY2FsaXplZEdh",
            "dGUYCCABKAsyEy5pby5Mb2NhbGl6ZWRTdHJpbmcSEgoKaWRlbnRpZmllchgJ",
            "IAEoCRIwChNsb2NhbGl6ZWRJZGVudGlmaWVyGAogASgLMhMuaW8uTG9jYWxp",
            "emVkU3RyaW5nEhMKC2Rlc2NyaXB0aW9uGAsgASgJEjEKFGxvY2FsaXplZERl",
            "c2NyaXB0aW9uGAwgASgLMhMuaW8uTG9jYWxpemVkU3RyaW5nEgwKBHR5cGUY",
            "DSABKAkSKgoNbG9jYWxpemVkVHlwZRgOIAEoCzITLmlvLkxvY2FsaXplZFN0",
            "cmluZxINCgVsZXZlbBgPIAEoCRIrCg5sb2NhbGl6ZWRMZXZlbBgQIAEoCzIT",
            "LmlvLkxvY2FsaXplZFN0cmluZxINCgVhaXNsZRgRIAEoCRIrCg5sb2NhbGl6",
            "ZWRBaXNsZRgSIAEoCzITLmlvLkxvY2FsaXplZFN0cmluZxIMCgRkb29yGBMg",
            "ASgJEioKDWxvY2FsaXplZERvb3IYFCABKAsyEy5pby5Mb2NhbGl6ZWRTdHJp",
            "bmcSFAoMc2VjdGlvbkNvbG9yGBUgASgJEhEKCXBvcnRhbFVSTBgWIAEoCRIv",
            "ChJsb2NhbGl6ZWRQb3J0YWxVUkwYFyABKAsyEy5pby5Mb2NhbGl6ZWRTdHJp",
            "bmcSFQoNdmVudWVFbnRyYW5jZRgYIAEoCRIzChZsb2NhbGl6ZWRWZW51ZUVu",
            "dHJhbmNlGBkgASgLMhMuaW8uTG9jYWxpemVkU3RyaW5nEhYKDmFkbWlzc2lv",
            "bkxldmVsGBogASgJEjQKF2xvY2FsaXplZEFkbWlzc2lvbkxldmVsGBsgASgL",
            "MhMuaW8uTG9jYWxpemVkU3RyaW5nEiIKGmFkbWlzc2lvbkxldmVsQWJicmV2",
            "aWF0aW9uGBwgASgJEkAKI2xvY2FsaXplZEFkbWlzc2lvbkxldmVsQWJicmV2",
            "aWF0aW9uGB0gASgLMhMuaW8uTG9jYWxpemVkU3RyaW5nEhsKE2VudHJhbmNl",
            "RGVzY3JpcHRpb24YHiABKAkSOQocbG9jYWxpemVkRW50cmFuY2VEZXNjcmlw",
            "dGlvbhgfIAEoCzITLmlvLkxvY2FsaXplZFN0cmluZxIMCgRyb29tGCAgASgJ",
            "EioKDWxvY2FsaXplZFJvb20YISABKAsyEy5pby5Mb2NhbGl6ZWRTdHJpbmcS",
            "IgoaYWRkaXRpb25hbFRpY2tldEF0dHJpYnV0ZXMYIiABKAkSQAojbG9jYWxp",
            "emVkQWRkaXRpb25hbFRpY2tldEF0dHJpYnV0ZXMYIyABKAsyEy5pby5Mb2Nh",
            "bGl6ZWRTdHJpbmci+gIKEVRpY2tldExpc3RSZXF1ZXN0EhYKDHByb2R1Y3Rp",
            "b25JZBgBIAEoCUgAEhcKDXByb2R1Y3Rpb25VaWQYAiABKAlIABIRCgdldmVu",
            "dElkGAMgASgJSAESTwoaZXZlbnRGaWx0ZXJCeVZlbnVlQW5kU3RhcnQYBCAB",
            "KAsyKS5ldmVudF90aWNrZXRzLkV2ZW50RmlsdGVyQnlWZW51ZUFuZFN0YXJ0",
            "SAESFgoMdGlja2V0VHlwZUlkGAUgASgJSAISFwoNdGlja2V0VHlwZVVpZBgG",
            "IAEoCUgCEhwKB2ZpbHRlcnMYByABKAsyCy5pby5GaWx0ZXJzOlySQVkKVyoM",
            "TGlzdCBSZXF1ZXN0MihVc2VkIHRvIGZpbHRlciB0aWNrZXRzIGZvciBhIHBy",
            "b2R1Y3Rpb24u0gEMcHJvZHVjdGlvbklk0gENcHJvZHVjdGlvblVpZEIMCgpw",
            "cm9kdWN0aW9uQgcKBWV2ZW50QgwKCnRpY2tldFR5cGUi4QEKGkV2ZW50Rmls",
            "dGVyQnlWZW51ZUFuZFN0YXJ0Eg8KB3ZlbnVlSWQYASABKAkSEAoIdmVudWVV",
            "aWQYAiABKAkSNgoSc2NoZWR1bGVkU3RhcnREYXRlGAMgASgLMhouZ29vZ2xl",
            "LnByb3RvYnVmLlRpbWVzdGFtcDpokkFlCmMqEkV2ZW50IEZpbHRlciBCeSBJ",
            "ZDIsVXNlZCB0byBmaWx0ZXIgdGlja2V0cyBmb3IgYSBzcGVjaWZpYyBldmVu",
            "dC7SAQd2ZW51ZUlk0gEIdmVudWVVaWTSAQlzdGFydERhdGUiWAoTVGlja2V0",
            "TnVtYmVyUmVxdWVzdBIUCgxwcm9kdWN0aW9uSWQYASABKAkSFQoNcHJvZHVj",
            "dGlvblVpZBgCIAEoCRIUCgx0aWNrZXROdW1iZXIYAyABKAkiVgoST3JkZXJO",
            "dW1iZXJSZXF1ZXN0EhQKDHByb2R1Y3Rpb25JZBgBIAEoCRIVCg1wcm9kdWN0",
            "aW9uVWlkGAIgASgJEhMKC29yZGVyTnVtYmVyGAMgASgJIpQBChNSZWRlZW1C",
            "eU9yZGVyTnVtYmVyEhQKDHByb2R1Y3Rpb25JZBgBIAEoCRIVCg1wcm9kdWN0",
            "aW9uVWlkGAIgASgJEhMKC29yZGVyTnVtYmVyGAMgASgJEjsKEXJlZGVtcHRp",
            "b25EZXRhaWxzGAQgASgLMiAuZXZlbnRfdGlja2V0cy5SZWRlbXB0aW9uRGV0",
            "YWlscyI+CgdUaWNrZXRzEjMKB3RpY2tldHMYASADKAsyIi5ldmVudF90aWNr",
            "ZXRzLlRpY2tldExpbWl0ZWRGaWVsZHMiNAoRVGlja2V0UGFzc0J1bmRsZXMS",
            "HwoHdGlja2V0cxgBIAMoCzIOLmlvLlBhc3NCdW5kbGUimQEKFVZhbGlkYXRl",
            "VGlja2V0UmVxdWVzdBIeChZtYXhOdW1iZXJPZlZhbGlkYXRpb25zGAEgASgN",
            "EicKBnRpY2tldBgCIAEoCzIXLmV2ZW50X3RpY2tldHMuVGlja2V0SWQSNwoP",
            "dmFsaWRhdGVEZXRhaWxzGAMgASgLMh4uZXZlbnRfdGlja2V0cy5WYWxpZGF0",
            "ZURldGFpbHMiTgoWVmFsaWRhdGVUaWNrZXRSZXNwb25zZRINCgV2YWxpZBgB",
            "IAEoCBIlCgZ0aWNrZXQYAiABKAsyFS5ldmVudF90aWNrZXRzLlRpY2tldCJ7",
            "ChNSZWRlZW1UaWNrZXRSZXF1ZXN0EicKBnRpY2tldBgBIAEoCzIXLmV2ZW50",
            "X3RpY2tldHMuVGlja2V0SWQSOwoRcmVkZW1wdGlvbkRldGFpbHMYAyABKAsy",
            "IC5ldmVudF90aWNrZXRzLlJlZGVtcHRpb25EZXRhaWxzIrEJChNUaWNrZXRM",
            "aW1pdGVkRmllbGRzEgoKAmlkGAEgASgJEhQKDHRpY2tldE51bWJlchgCIAEo",
            "CRJCCgpwcm9kdWN0aW9uGAMgASgLMi4uZXZlbnRfdGlja2V0cy5Qcm9kdWN0",
            "aW9uTGltaXRlZEZpZWxkc1Jlc3BvbnNlEjgKBWV2ZW50GAQgASgLMikuZXZl",
            "bnRfdGlja2V0cy5FdmVudExpbWl0ZWRGaWVsZHNSZXNwb25zZRI4CgV2ZW51",
            "ZRgFIAEoCzIpLmV2ZW50X3RpY2tldHMuVmVudWVMaW1pdGVkRmllbGRzUmVz",
            "cG9uc2USOgoKdGlja2V0VHlwZRgGIAEoCzImLmV2ZW50X3RpY2tldHMuVGlj",
            "a2V0VHlwZUxpbWl0ZWRGaWVsZHMSEwoLb3JkZXJOdW1iZXIYByABKAkSEgoK",
            "Z3JvdXBpbmdJZBgIIAEoCRIXCg9iYXJjb2RlQ29udGVudHMYCSABKAkSJQoI",
            "c2VhdEluZm8YCiABKAsyEy5ldmVudF90aWNrZXRzLlNlYXQSKwoJZmFjZVZh",
            "bHVlGAsgASgLMhguZXZlbnRfdGlja2V0cy5GYWNlVmFsdWUSGgoGcGVyc29u",
            "GAwgASgLMgouaW8uUGVyc29uEkIKCG1ldGFEYXRhGA0gAygLMjAuZXZlbnRf",
            "dGlja2V0cy5UaWNrZXRMaW1pdGVkRmllbGRzLk1ldGFEYXRhRW50cnkSDgoG",
            "b3B0T3V0GA4gASgIEisKBnN0YXR1cxgPIAEoDjIbLmV2ZW50X3RpY2tldHMu",
            "VGlja2V0U3RhdHVzEi4KCmV4cGlyeURhdGUYECABKAsyGi5nb29nbGUucHJv",
            "dG9idWYuVGltZXN0YW1wEjsKEXJlZGVtcHRpb25EZXRhaWxzGBEgASgLMiAu",
            "ZXZlbnRfdGlja2V0cy5SZWRlbXB0aW9uRGV0YWlscxI3Cg92YWxpZGF0ZURl",
            "dGFpbHMYEiADKAsyHi5ldmVudF90aWNrZXRzLlZhbGlkYXRlRGV0YWlscxIo",
            "Cg1wYXNzT3ZlcnJpZGVzGBMgASgLMhEuaW8uUGFzc092ZXJyaWRlcxIiCgxw",
            "YXNzTWV0YURhdGEYFCABKAsyDC5pby5NZXRhZGF0YRIrCgdjcmVhdGVkGBUg",
            "ASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIrCgd1cGRhdGVkGBYg",
            "ASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBovCg1NZXRhRGF0YUVu",
            "dHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAE60QGSQc0BCsoB",
            "KhJUaWNrZXQgKExpZ2h0IHZlcikymwFUaWNrZXQgaXMgYSB1bmlxdWUgdGlj",
            "a2V0IGluc3RhbmNlIGFuZCBob2xkcyBkZXRhaWxzIGFib3V0IHRoZSBldmVu",
            "dCBkYXRlcyAmIHRpbWVzLCB2ZW51ZSwgdGlja2V0IGhvbGRlciBhbmQgb3Ro",
            "ZXIgcmVsZXZhbnQgZGV0YWlscyBwZXJ0YWluaW5nIHRvIGEgdGlja2V0LtIB",
            "BWV2ZW500gENdGlja2V0VHlwZVVpZCLWBwoSSXNzdWVUaWNrZXRSZXF1ZXN0",
            "EhEKB2V2ZW50SWQYASABKAlIABI5CgVldmVudBgCIAEoCzIoLmV2ZW50X3Rp",
            "Y2tldHMuRXZlbnRMaW1pdGVkRmllbGRzUmVxdWVzdEgAEhQKDHRpY2tldFR5",
            "cGVJZBgDIAEoCRIUCgx0aWNrZXROdW1iZXIYBCABKAkSEwoLb3JkZXJOdW1i",
            "ZXIYBSABKAkSEgoKZ3JvdXBpbmdJZBgGIAEoCRIXCg9iYXJjb2RlQ29udGVu",
            "dHMYByABKAkSJQoIc2VhdEluZm8YCCABKAsyEy5ldmVudF90aWNrZXRzLlNl",
            "YXQSKwoJZmFjZVZhbHVlGAkgASgLMhguZXZlbnRfdGlja2V0cy5GYWNlVmFs",
            "dWUSGgoGcGVyc29uGAogASgLMgouaW8uUGVyc29uEkEKCG1ldGFEYXRhGAsg",
            "AygLMi8uZXZlbnRfdGlja2V0cy5Jc3N1ZVRpY2tldFJlcXVlc3QuTWV0YURh",
            "dGFFbnRyeRIOCgZvcHRPdXQYDCABKAgSKwoGc3RhdHVzGA0gASgOMhsuZXZl",
            "bnRfdGlja2V0cy5UaWNrZXRTdGF0dXMSLgoKZXhwaXJ5RGF0ZRgOIAEoCzIa",
            "Lmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASOwoRcmVkZW1wdGlvbkRldGFp",
            "bHMYDyABKAsyIC5ldmVudF90aWNrZXRzLlJlZGVtcHRpb25EZXRhaWxzEjcK",
            "D3ZhbGlkYXRlRGV0YWlscxgQIAMoCzIeLmV2ZW50X3RpY2tldHMuVmFsaWRh",
            "dGVEZXRhaWxzEigKDXBhc3NPdmVycmlkZXMYESABKAsyES5pby5QYXNzT3Zl",
            "cnJpZGVzEiIKDHBhc3NNZXRhRGF0YRgSIAEoCzIMLmlvLk1ldGFkYXRhEisK",
            "B2NyZWF0ZWQYEyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEisK",
            "B3VwZGF0ZWQYFCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wGi8K",
            "DU1ldGFEYXRhRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4",
            "ATqHAZJBgwEKgAEqFElzc3VlIFRpY2tldCBSZXF1ZXN0MkdJc3N1ZSB0aWNr",
            "ZXQuIEV2ZW50IGlzIGF1dG8gY3JlYXRlZCBpZiBpdCBkb2VzIG5vdCBleGlz",
            "dCBvbiB0aGUgcmVjb3JkLtIBB2V2ZW50SWTSAQVldmVudNIBDHRpY2tldFR5",
            "cGVJZEILCglldmVudEluZm8ihgIKFklzc3VlVGlja2V0UmVzcG9uc2VJZHMS",
            "EAoIdGlja2V0SWQYASABKAkSFAoMcHJvZHVjdGlvbklkGAIgASgJEg8KB3Zl",
            "bnVlSWQYAyABKAkSFAoMdGlja2V0VHlwZUlkGAQgASgJEg8KB2V2ZW50SWQY",
            "BSABKAk6iwGSQYcBCoQBKhlJc3N1ZSBUaWNrZXQgUmVzcG9uc2UgSWRzMmdM",
            "aXN0IG9mIFBhc3NLaXQgZ2VuZXJhdGVkIGlkcyByZXR1cm5lZCBhZnRlciBp",
            "c3N1aW5nIGEgdGlja2V0IHdpdGggcHJvZHVjdGlvbiwgdmVudWUsIHRpY2tl",
            "dCB0eXBlIFVJRHMuItsBChZFdmVudFRpY2tldFBhc3NSZXF1ZXN0EhoKCHRp",
            "Y2tldElkGAEgASgLMgYuaW8uSWRIABI6Cgx0aWNrZXROdW1iZXIYAiABKAsy",
            "Ii5ldmVudF90aWNrZXRzLlRpY2tldE51bWJlclJlcXVlc3RIABI4CgtvcmRl",
            "ck51bWJlchgDIAEoCzIhLmV2ZW50X3RpY2tldHMuT3JkZXJOdW1iZXJSZXF1",
            "ZXN0SAASJAoGZm9ybWF0GAQgAygOMhQuaW8uUGFzc0J1bmRsZUZvcm1hdEIJ",
            "CgdyZXF1ZXN0Ip4BChFFdmVudFRpY2tldFBlcnNvbhIaCgh0aWNrZXRJZBgB",
            "IAEoCzIGLmlvLklkSAASOgoMdGlja2V0TnVtYmVyGAIgASgLMiIuZXZlbnRf",
            "dGlja2V0cy5UaWNrZXROdW1iZXJSZXF1ZXN0SAASGgoGcGVyc29uGAUgASgL",
            "MgouaW8uUGVyc29uQgkKB3JlcXVlc3RKBAgDEARKBAgEEAUqPwoMVGlja2V0",
            "U3RhdHVzEg8KC1NUQVRVU19OT05FEAASCgoGSVNTVUVEEAESDAoIUkVERUVN",
            "RUQQAiIECAMQA0JvCh1jb20ucGFzc2tpdC5ncnBjLkV2ZW50VGlja2V0c1oy",
            "c3Rhc2gucGFzc2tpdC5jb20vaW8vbW9kZWwvc2RrL2dvL2lvL2V2ZW50X3Rp",
            "Y2tldHOqAhlQYXNzS2l0LkdycGMuRXZlbnRUaWNrZXRzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::PassKit.Grpc.LocalizationReflection.Descriptor, global::PassKit.Grpc.MetricsReflection.Descriptor, global::PassKit.Grpc.CommonObjectsReflection.Descriptor, global::PassKit.Grpc.PassReflection.Descriptor, global::PassKit.Grpc.PersonalReflection.Descriptor, global::PassKit.Grpc.FilterReflection.Descriptor, global::PassKit.Grpc.EventTickets.VenueReflection.Descriptor, global::PassKit.Grpc.EventTickets.EventReflection.Descriptor, global::PassKit.Grpc.EventTickets.TicketTypeReflection.Descriptor, global::PassKit.Grpc.EventTickets.ProductionReflection.Descriptor, global::PassKit.Grpc.Gateway.ProtocGenOpenapiv2.Options.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PassKit.Grpc.EventTickets.TicketStatus), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.EventTickets.TicketId), global::PassKit.Grpc.EventTickets.TicketId.Parser, new[]{ "TicketId_", "TicketNumber" }, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.EventTickets.TicketNumber), global::PassKit.Grpc.EventTickets.TicketNumber.Parser, new[]{ "ProductionId", "TicketNumber_" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.EventTickets.Ticket), global::PassKit.Grpc.EventTickets.Ticket.Parser, new[]{ "Id", "TicketNumber", "Event", "TicketType", "OrderNumber", "GroupingId", "BarcodeContents", "SeatInfo", "FaceValue", "Person", "MetaData", "OptOut", "Status", "ExpiryDate", "RedemptionDetails", "ValidateDetails", "PassOverrides", "PassMetaData", "Created", "Updated" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.EventTickets.ValidateDetails), global::PassKit.Grpc.EventTickets.ValidateDetails.Parser, new[]{ "ValidateDate", "Lat", "Lon", "Alt", "ValidateSource", "ValidateReference" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.EventTickets.RedemptionDetails), global::PassKit.Grpc.EventTickets.RedemptionDetails.Parser, new[]{ "RedemptionDate", "Lat", "Lon", "Alt", "RedemptionSource", "RedemptionReference" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.EventTickets.FaceValue), global::PassKit.Grpc.EventTickets.FaceValue.Parser, new[]{ "Amount", "Currency" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.EventTickets.Seat), global::PassKit.Grpc.EventTickets.Seat.Parser, new[]{ "Seat_", "LocalizedSeat", "Row", "LocalizedRow", "Section", "LocalizedSection", "Gate", "LocalizedGate", "Identifier", "LocalizedIdentifier", "Description", "LocalizedDescription", "Type", "LocalizedType", "Level", "LocalizedLevel", "Aisle", "LocalizedAisle", "Door", "LocalizedDoor", "SectionColor", "PortalURL", "LocalizedPortalURL", "VenueEntrance", "LocalizedVenueEntrance", "AdmissionLevel", "LocalizedAdmissionLevel", "AdmissionLevelAbbreviation", "LocalizedAdmissionLevelAbbreviation", "EntranceDescription", "LocalizedEntranceDescription", "Room", "LocalizedRoom", "AdditionalTicketAttributes", "LocalizedAdditionalTicketAttributes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.EventTickets.TicketListRequest), global::PassKit.Grpc.EventTickets.TicketListRequest.Parser, new[]{ "ProductionId", "ProductionUid", "EventId", "EventFilterByVenueAndStart", "TicketTypeId", "TicketTypeUid", "Filters" }, new[]{ "Production", "Event", "TicketType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.EventTickets.EventFilterByVenueAndStart), global::PassKit.Grpc.EventTickets.EventFilterByVenueAndStart.Parser, new[]{ "VenueId", "VenueUid", "ScheduledStartDate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.EventTickets.TicketNumberRequest), global::PassKit.Grpc.EventTickets.TicketNumberRequest.Parser, new[]{ "ProductionId", "ProductionUid", "TicketNumber" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.EventTickets.OrderNumberRequest), global::PassKit.Grpc.EventTickets.OrderNumberRequest.Parser, new[]{ "ProductionId", "ProductionUid", "OrderNumber" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.EventTickets.RedeemByOrderNumber), global::PassKit.Grpc.EventTickets.RedeemByOrderNumber.Parser, new[]{ "ProductionId", "ProductionUid", "OrderNumber", "RedemptionDetails" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.EventTickets.Tickets), global::PassKit.Grpc.EventTickets.Tickets.Parser, new[]{ "Tickets_" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.EventTickets.TicketPassBundles), global::PassKit.Grpc.EventTickets.TicketPassBundles.Parser, new[]{ "Tickets" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.EventTickets.ValidateTicketRequest), global::PassKit.Grpc.EventTickets.ValidateTicketRequest.Parser, new[]{ "MaxNumberOfValidations", "Ticket", "ValidateDetails" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.EventTickets.ValidateTicketResponse), global::PassKit.Grpc.EventTickets.ValidateTicketResponse.Parser, new[]{ "Valid", "Ticket" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.EventTickets.RedeemTicketRequest), global::PassKit.Grpc.EventTickets.RedeemTicketRequest.Parser, new[]{ "Ticket", "RedemptionDetails" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.EventTickets.TicketLimitedFields), global::PassKit.Grpc.EventTickets.TicketLimitedFields.Parser, new[]{ "Id", "TicketNumber", "Production", "Event", "Venue", "TicketType", "OrderNumber", "GroupingId", "BarcodeContents", "SeatInfo", "FaceValue", "Person", "MetaData", "OptOut", "Status", "ExpiryDate", "RedemptionDetails", "ValidateDetails", "PassOverrides", "PassMetaData", "Created", "Updated" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.EventTickets.IssueTicketRequest), global::PassKit.Grpc.EventTickets.IssueTicketRequest.Parser, new[]{ "EventId", "Event", "TicketTypeId", "TicketNumber", "OrderNumber", "GroupingId", "BarcodeContents", "SeatInfo", "FaceValue", "Person", "MetaData", "OptOut", "Status", "ExpiryDate", "RedemptionDetails", "ValidateDetails", "PassOverrides", "PassMetaData", "Created", "Updated" }, new[]{ "EventInfo" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.EventTickets.IssueTicketResponseIds), global::PassKit.Grpc.EventTickets.IssueTicketResponseIds.Parser, new[]{ "TicketId", "ProductionId", "VenueId", "TicketTypeId", "EventId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.EventTickets.EventTicketPassRequest), global::PassKit.Grpc.EventTickets.EventTicketPassRequest.Parser, new[]{ "TicketId", "TicketNumber", "OrderNumber", "Format" }, new[]{ "Request" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.EventTickets.EventTicketPerson), global::PassKit.Grpc.EventTickets.EventTicketPerson.Parser, new[]{ "TicketId", "TicketNumber", "Person" }, new[]{ "Request" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// List of allowed ticket statuses.
  /// </summary>
  public enum TicketStatus {
    [pbr::OriginalName("STATUS_NONE")] StatusNone = 0,
    /// <summary>
    /// Default ticket status
    /// </summary>
    [pbr::OriginalName("ISSUED")] Issued = 1,
    /// <summary>
    /// Set after a ticket is redeemed (the redeem endpoint is called).
    /// </summary>
    [pbr::OriginalName("REDEEMED")] Redeemed = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// A wrapper to uniquely identify a ticket either by its ID or a combination of production ID/UID and ticket number. Required fields: ticketId or ticketNumber object.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class TicketId : pb::IMessage<TicketId>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TicketId> _parser = new pb::MessageParser<TicketId>(() => new TicketId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TicketId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.EventTickets.TicketReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TicketId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TicketId(TicketId other) : this() {
      switch (other.IdCase) {
        case IdOneofCase.TicketId_:
          TicketId_ = other.TicketId_;
          break;
        case IdOneofCase.TicketNumber:
          TicketNumber = other.TicketNumber.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TicketId Clone() {
      return new TicketId(this);
    }

    /// <summary>Field number for the "ticketId" field.</summary>
    public const int TicketId_FieldNumber = 1;
    /// <summary>
    /// The Ticket id (22 character identifier).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TicketId_ {
      get { return HasTicketId_ ? (string) id_ : ""; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.TicketId_;
      }
    }
    /// <summary>Gets whether the "ticketId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTicketId_ {
      get { return idCase_ == IdOneofCase.TicketId_; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "ticketId" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTicketId_() {
      if (HasTicketId_) {
        ClearId();
      }
    }

    /// <summary>Field number for the "ticketNumber" field.</summary>
    public const int TicketNumberFieldNumber = 2;
    /// <summary>
    /// A ticket number object containing a production id and ticket number"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.EventTickets.TicketNumber TicketNumber {
      get { return idCase_ == IdOneofCase.TicketNumber ? (global::PassKit.Grpc.EventTickets.TicketNumber) id_ : null; }
      set {
        id_ = value;
        idCase_ = value == null ? IdOneofCase.None : IdOneofCase.TicketNumber;
      }
    }

    private object id_;
    /// <summary>Enum of possible cases for the "id" oneof.</summary>
    public enum IdOneofCase {
      None = 0,
      TicketId_ = 1,
      TicketNumber = 2,
    }
    private IdOneofCase idCase_ = IdOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public IdOneofCase IdCase {
      get { return idCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearId() {
      idCase_ = IdOneofCase.None;
      id_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TicketId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TicketId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TicketId_ != other.TicketId_) return false;
      if (!object.Equals(TicketNumber, other.TicketNumber)) return false;
      if (IdCase != other.IdCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTicketId_) hash ^= TicketId_.GetHashCode();
      if (idCase_ == IdOneofCase.TicketNumber) hash ^= TicketNumber.GetHashCode();
      hash ^= (int) idCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTicketId_) {
        output.WriteRawTag(10);
        output.WriteString(TicketId_);
      }
      if (idCase_ == IdOneofCase.TicketNumber) {
        output.WriteRawTag(18);
        output.WriteMessage(TicketNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTicketId_) {
        output.WriteRawTag(10);
        output.WriteString(TicketId_);
      }
      if (idCase_ == IdOneofCase.TicketNumber) {
        output.WriteRawTag(18);
        output.WriteMessage(TicketNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasTicketId_) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TicketId_);
      }
      if (idCase_ == IdOneofCase.TicketNumber) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TicketNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TicketId other) {
      if (other == null) {
        return;
      }
      switch (other.IdCase) {
        case IdOneofCase.TicketId_:
          TicketId_ = other.TicketId_;
          break;
        case IdOneofCase.TicketNumber:
          if (TicketNumber == null) {
            TicketNumber = new global::PassKit.Grpc.EventTickets.TicketNumber();
          }
          TicketNumber.MergeFrom(other.TicketNumber);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TicketId_ = input.ReadString();
            break;
          }
          case 18: {
            global::PassKit.Grpc.EventTickets.TicketNumber subBuilder = new global::PassKit.Grpc.EventTickets.TicketNumber();
            if (idCase_ == IdOneofCase.TicketNumber) {
              subBuilder.MergeFrom(TicketNumber);
            }
            input.ReadMessage(subBuilder);
            TicketNumber = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            TicketId_ = input.ReadString();
            break;
          }
          case 18: {
            global::PassKit.Grpc.EventTickets.TicketNumber subBuilder = new global::PassKit.Grpc.EventTickets.TicketNumber();
            if (idCase_ == IdOneofCase.TicketNumber) {
              subBuilder.MergeFrom(TicketNumber);
            }
            input.ReadMessage(subBuilder);
            TicketNumber = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Identifies a ticket by combining a production ID or UID with a unique ticket number. Required fields: productionId, ticketNumber.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class TicketNumber : pb::IMessage<TicketNumber>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TicketNumber> _parser = new pb::MessageParser<TicketNumber>(() => new TicketNumber());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TicketNumber> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.EventTickets.TicketReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TicketNumber() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TicketNumber(TicketNumber other) : this() {
      productionId_ = other.productionId_;
      ticketNumber_ = other.ticketNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TicketNumber Clone() {
      return new TicketNumber(this);
    }

    /// <summary>Field number for the "productionId" field.</summary>
    public const int ProductionIdFieldNumber = 1;
    private string productionId_ = "";
    /// <summary>
    /// The Production id (22 character identifier), or the Production user defined id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ProductionId {
      get { return productionId_; }
      set {
        productionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticketNumber" field.</summary>
    public const int TicketNumber_FieldNumber = 2;
    private string ticketNumber_ = "";
    /// <summary>
    /// The user defined ticket number (unique within production)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TicketNumber_ {
      get { return ticketNumber_; }
      set {
        ticketNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TicketNumber);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TicketNumber other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProductionId != other.ProductionId) return false;
      if (TicketNumber_ != other.TicketNumber_) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (ProductionId.Length != 0) hash ^= ProductionId.GetHashCode();
      if (TicketNumber_.Length != 0) hash ^= TicketNumber_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ProductionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProductionId);
      }
      if (TicketNumber_.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TicketNumber_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ProductionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProductionId);
      }
      if (TicketNumber_.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TicketNumber_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (ProductionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductionId);
      }
      if (TicketNumber_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TicketNumber_);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TicketNumber other) {
      if (other == null) {
        return;
      }
      if (other.ProductionId.Length != 0) {
        ProductionId = other.ProductionId;
      }
      if (other.TicketNumber_.Length != 0) {
        TicketNumber_ = other.TicketNumber_;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ProductionId = input.ReadString();
            break;
          }
          case 18: {
            TicketNumber_ = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ProductionId = input.ReadString();
            break;
          }
          case 18: {
            TicketNumber_ = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Represents a Ticket, which is a unique entry for a specific event, issued to a ticket holder. Contains metadata like seat info, barcode, status, and personal details. Required fields: event, ticketType.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Ticket : pb::IMessage<Ticket>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Ticket> _parser = new pb::MessageParser<Ticket>(() => new Ticket());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Ticket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.EventTickets.TicketReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Ticket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Ticket(Ticket other) : this() {
      id_ = other.id_;
      ticketNumber_ = other.ticketNumber_;
      event_ = other.event_ != null ? other.event_.Clone() : null;
      ticketType_ = other.ticketType_ != null ? other.ticketType_.Clone() : null;
      orderNumber_ = other.orderNumber_;
      groupingId_ = other.groupingId_;
      barcodeContents_ = other.barcodeContents_;
      seatInfo_ = other.seatInfo_ != null ? other.seatInfo_.Clone() : null;
      faceValue_ = other.faceValue_ != null ? other.faceValue_.Clone() : null;
      person_ = other.person_ != null ? other.person_.Clone() : null;
      metaData_ = other.metaData_.Clone();
      optOut_ = other.optOut_;
      status_ = other.status_;
      expiryDate_ = other.expiryDate_ != null ? other.expiryDate_.Clone() : null;
      redemptionDetails_ = other.redemptionDetails_ != null ? other.redemptionDetails_.Clone() : null;
      validateDetails_ = other.validateDetails_.Clone();
      passOverrides_ = other.passOverrides_ != null ? other.passOverrides_.Clone() : null;
      passMetaData_ = other.passMetaData_ != null ? other.passMetaData_.Clone() : null;
      created_ = other.created_ != null ? other.created_.Clone() : null;
      updated_ = other.updated_ != null ? other.updated_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Ticket Clone() {
      return new Ticket(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// PassKit generated ticket id (22 characters).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticketNumber" field.</summary>
    public const int TicketNumberFieldNumber = 2;
    private string ticketNumber_ = "";
    /// <summary>
    /// Optional user generated ticket number. Unique within the Production.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TicketNumber {
      get { return ticketNumber_; }
      set {
        ticketNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 3;
    private global::PassKit.Grpc.EventTickets.Event event_;
    /// <summary>
    /// The event that the ticket is for. Can provide event id, or the whole event object - if the event doesn't exist it will be created. The combination of event.production.id, event.startDate, event.venue.uid &amp; ticket.ticketTypeUid is enforced unique in the system.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.EventTickets.Event Event {
      get { return event_; }
      set {
        event_ = value;
      }
    }

    /// <summary>Field number for the "ticketType" field.</summary>
    public const int TicketTypeFieldNumber = 4;
    private global::PassKit.Grpc.EventTickets.TicketType ticketType_;
    /// <summary>
    /// The ticket type the ticket is for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.EventTickets.TicketType TicketType {
      get { return ticketType_; }
      set {
        ticketType_ = value;
      }
    }

    /// <summary>Field number for the "orderNumber" field.</summary>
    public const int OrderNumberFieldNumber = 5;
    private string orderNumber_ = "";
    /// <summary>
    /// Optional order / confirmation / booking code. Unique within the Production.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OrderNumber {
      get { return orderNumber_; }
      set {
        orderNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "groupingId" field.</summary>
    public const int GroupingIdFieldNumber = 6;
    private string groupingId_ = "";
    /// <summary>
    /// Optional PassKit generated grouping ID. The system automatically groups tickets based by order number. Grouped tickets can be downloaded together from our multi-pass download pages. Not writable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string GroupingId {
      get { return groupingId_; }
      set {
        groupingId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "barcodeContents" field.</summary>
    public const int BarcodeContentsFieldNumber = 7;
    private string barcodeContents_ = "";
    /// <summary>
    /// The contents to embed in the barcode for this ticket. If not provided, the default value from the Ticket Type Pass Template Design is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BarcodeContents {
      get { return barcodeContents_; }
      set {
        barcodeContents_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "seatInfo" field.</summary>
    public const int SeatInfoFieldNumber = 8;
    private global::PassKit.Grpc.EventTickets.Seat seatInfo_;
    /// <summary>
    /// The seat info for the ticket.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.EventTickets.Seat SeatInfo {
      get { return seatInfo_; }
      set {
        seatInfo_ = value;
      }
    }

    /// <summary>Field number for the "faceValue" field.</summary>
    public const int FaceValueFieldNumber = 9;
    private global::PassKit.Grpc.EventTickets.FaceValue faceValue_;
    /// <summary>
    /// The face value details for the ticket.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.EventTickets.FaceValue FaceValue {
      get { return faceValue_; }
      set {
        faceValue_ = value;
      }
    }

    /// <summary>Field number for the "person" field.</summary>
    public const int PersonFieldNumber = 10;
    private global::PassKit.Grpc.Person person_;
    /// <summary>
    /// The ticket holder information. Stored encrypted in PassKit's database.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Person Person {
      get { return person_; }
      set {
        person_ = value;
      }
    }

    /// <summary>Field number for the "metaData" field.</summary>
    public const int MetaDataFieldNumber = 11;
    private static readonly pbc::MapField<string, string>.Codec _map_metaData_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 90);
    private readonly pbc::MapField<string, string> metaData_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Any other meta fields for the ticket that are not covered in the Ticket Object / API (i.e. you might want to capture ticket information specific to your process).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<string, string> MetaData {
      get { return metaData_; }
    }

    /// <summary>Field number for the "optOut" field.</summary>
    public const int OptOutFieldNumber = 12;
    private global::PassKit.Grpc.Toggle optOut_ = global::PassKit.Grpc.Toggle.DoNotUse;
    /// <summary>
    /// Indicates if the holder of the ticket opted out to receive marketing promotions (defaults to false).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Toggle OptOut {
      get { return optOut_; }
      set {
        optOut_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 13;
    private global::PassKit.Grpc.EventTickets.TicketStatus status_ = global::PassKit.Grpc.EventTickets.TicketStatus.StatusNone;
    /// <summary>
    /// Holds the ticket status.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.EventTickets.TicketStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "expiryDate" field.</summary>
    public const int ExpiryDateFieldNumber = 14;
    private global::Google.Protobuf.WellKnownTypes.Timestamp expiryDate_;
    /// <summary>
    /// Optional field to set when the ticket expires. When the expiry date hits, it will automatically gray out the barcode.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ExpiryDate {
      get { return expiryDate_; }
      set {
        expiryDate_ = value;
      }
    }

    /// <summary>Field number for the "redemptionDetails" field.</summary>
    public const int RedemptionDetailsFieldNumber = 15;
    private global::PassKit.Grpc.EventTickets.RedemptionDetails redemptionDetails_;
    /// <summary>
    /// Contains details about the redemption (if the ticket is in a redeemed state). Not writable; set by the redeem endpoint.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.EventTickets.RedemptionDetails RedemptionDetails {
      get { return redemptionDetails_; }
      set {
        redemptionDetails_ = value;
      }
    }

    /// <summary>Field number for the "validateDetails" field.</summary>
    public const int ValidateDetailsFieldNumber = 16;
    private static readonly pb::FieldCodec<global::PassKit.Grpc.EventTickets.ValidateDetails> _repeated_validateDetails_codec
        = pb::FieldCodec.ForMessage(130, global::PassKit.Grpc.EventTickets.ValidateDetails.Parser);
    private readonly pbc::RepeatedField<global::PassKit.Grpc.EventTickets.ValidateDetails> validateDetails_ = new pbc::RepeatedField<global::PassKit.Grpc.EventTickets.ValidateDetails>();
    /// <summary>
    /// Contains details about when the ticket was validated. Tickets can be validated multiple times. Not writable; set by the validate endpoint.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::PassKit.Grpc.EventTickets.ValidateDetails> ValidateDetails {
      get { return validateDetails_; }
    }

    /// <summary>Field number for the "passOverrides" field.</summary>
    public const int PassOverridesFieldNumber = 17;
    private global::PassKit.Grpc.PassOverrides passOverrides_;
    /// <summary>
    /// Optional Pass level overrides for proximity &amp; images.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.PassOverrides PassOverrides {
      get { return passOverrides_; }
      set {
        passOverrides_ = value;
      }
    }

    /// <summary>Field number for the "passMetaData" field.</summary>
    public const int PassMetaDataFieldNumber = 18;
    private global::PassKit.Grpc.Metadata passMetaData_;
    /// <summary>
    /// Pass Metadata hold meta data about the pass like status, lifecycle, utm details and installation data. Cannot be set via the API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Metadata PassMetaData {
      get { return passMetaData_; }
      set {
        passMetaData_ = value;
      }
    }

    /// <summary>Field number for the "created" field.</summary>
    public const int CreatedFieldNumber = 19;
    private global::Google.Protobuf.WellKnownTypes.Timestamp created_;
    /// <summary>
    /// The date the ticket was created. Not writable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Created {
      get { return created_; }
      set {
        created_ = value;
      }
    }

    /// <summary>Field number for the "updated" field.</summary>
    public const int UpdatedFieldNumber = 20;
    private global::Google.Protobuf.WellKnownTypes.Timestamp updated_;
    /// <summary>
    /// The date the ticket last updated. Not writable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Updated {
      get { return updated_; }
      set {
        updated_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Ticket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Ticket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (TicketNumber != other.TicketNumber) return false;
      if (!object.Equals(Event, other.Event)) return false;
      if (!object.Equals(TicketType, other.TicketType)) return false;
      if (OrderNumber != other.OrderNumber) return false;
      if (GroupingId != other.GroupingId) return false;
      if (BarcodeContents != other.BarcodeContents) return false;
      if (!object.Equals(SeatInfo, other.SeatInfo)) return false;
      if (!object.Equals(FaceValue, other.FaceValue)) return false;
      if (!object.Equals(Person, other.Person)) return false;
      if (!MetaData.Equals(other.MetaData)) return false;
      if (OptOut != other.OptOut) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(ExpiryDate, other.ExpiryDate)) return false;
      if (!object.Equals(RedemptionDetails, other.RedemptionDetails)) return false;
      if(!validateDetails_.Equals(other.validateDetails_)) return false;
      if (!object.Equals(PassOverrides, other.PassOverrides)) return false;
      if (!object.Equals(PassMetaData, other.PassMetaData)) return false;
      if (!object.Equals(Created, other.Created)) return false;
      if (!object.Equals(Updated, other.Updated)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (TicketNumber.Length != 0) hash ^= TicketNumber.GetHashCode();
      if (event_ != null) hash ^= Event.GetHashCode();
      if (ticketType_ != null) hash ^= TicketType.GetHashCode();
      if (OrderNumber.Length != 0) hash ^= OrderNumber.GetHashCode();
      if (GroupingId.Length != 0) hash ^= GroupingId.GetHashCode();
      if (BarcodeContents.Length != 0) hash ^= BarcodeContents.GetHashCode();
      if (seatInfo_ != null) hash ^= SeatInfo.GetHashCode();
      if (faceValue_ != null) hash ^= FaceValue.GetHashCode();
      if (person_ != null) hash ^= Person.GetHashCode();
      hash ^= MetaData.GetHashCode();
      if (OptOut != global::PassKit.Grpc.Toggle.DoNotUse) hash ^= OptOut.GetHashCode();
      if (Status != global::PassKit.Grpc.EventTickets.TicketStatus.StatusNone) hash ^= Status.GetHashCode();
      if (expiryDate_ != null) hash ^= ExpiryDate.GetHashCode();
      if (redemptionDetails_ != null) hash ^= RedemptionDetails.GetHashCode();
      hash ^= validateDetails_.GetHashCode();
      if (passOverrides_ != null) hash ^= PassOverrides.GetHashCode();
      if (passMetaData_ != null) hash ^= PassMetaData.GetHashCode();
      if (created_ != null) hash ^= Created.GetHashCode();
      if (updated_ != null) hash ^= Updated.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (TicketNumber.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TicketNumber);
      }
      if (event_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Event);
      }
      if (ticketType_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TicketType);
      }
      if (OrderNumber.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(OrderNumber);
      }
      if (GroupingId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(GroupingId);
      }
      if (BarcodeContents.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(BarcodeContents);
      }
      if (seatInfo_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(SeatInfo);
      }
      if (faceValue_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(FaceValue);
      }
      if (person_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Person);
      }
      metaData_.WriteTo(output, _map_metaData_codec);
      if (OptOut != global::PassKit.Grpc.Toggle.DoNotUse) {
        output.WriteRawTag(96);
        output.WriteEnum((int) OptOut);
      }
      if (Status != global::PassKit.Grpc.EventTickets.TicketStatus.StatusNone) {
        output.WriteRawTag(104);
        output.WriteEnum((int) Status);
      }
      if (expiryDate_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(ExpiryDate);
      }
      if (redemptionDetails_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(RedemptionDetails);
      }
      validateDetails_.WriteTo(output, _repeated_validateDetails_codec);
      if (passOverrides_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(PassOverrides);
      }
      if (passMetaData_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(PassMetaData);
      }
      if (created_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Created);
      }
      if (updated_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(Updated);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (TicketNumber.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TicketNumber);
      }
      if (event_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Event);
      }
      if (ticketType_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TicketType);
      }
      if (OrderNumber.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(OrderNumber);
      }
      if (GroupingId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(GroupingId);
      }
      if (BarcodeContents.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(BarcodeContents);
      }
      if (seatInfo_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(SeatInfo);
      }
      if (faceValue_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(FaceValue);
      }
      if (person_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Person);
      }
      metaData_.WriteTo(ref output, _map_metaData_codec);
      if (OptOut != global::PassKit.Grpc.Toggle.DoNotUse) {
        output.WriteRawTag(96);
        output.WriteEnum((int) OptOut);
      }
      if (Status != global::PassKit.Grpc.EventTickets.TicketStatus.StatusNone) {
        output.WriteRawTag(104);
        output.WriteEnum((int) Status);
      }
      if (expiryDate_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(ExpiryDate);
      }
      if (redemptionDetails_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(RedemptionDetails);
      }
      validateDetails_.WriteTo(ref output, _repeated_validateDetails_codec);
      if (passOverrides_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(PassOverrides);
      }
      if (passMetaData_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(PassMetaData);
      }
      if (created_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Created);
      }
      if (updated_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(Updated);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (TicketNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TicketNumber);
      }
      if (event_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Event);
      }
      if (ticketType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TicketType);
      }
      if (OrderNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderNumber);
      }
      if (GroupingId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupingId);
      }
      if (BarcodeContents.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BarcodeContents);
      }
      if (seatInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SeatInfo);
      }
      if (faceValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FaceValue);
      }
      if (person_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Person);
      }
      size += metaData_.CalculateSize(_map_metaData_codec);
      if (OptOut != global::PassKit.Grpc.Toggle.DoNotUse) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OptOut);
      }
      if (Status != global::PassKit.Grpc.EventTickets.TicketStatus.StatusNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (expiryDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExpiryDate);
      }
      if (redemptionDetails_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RedemptionDetails);
      }
      size += validateDetails_.CalculateSize(_repeated_validateDetails_codec);
      if (passOverrides_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PassOverrides);
      }
      if (passMetaData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PassMetaData);
      }
      if (created_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Created);
      }
      if (updated_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Updated);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Ticket other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.TicketNumber.Length != 0) {
        TicketNumber = other.TicketNumber;
      }
      if (other.event_ != null) {
        if (event_ == null) {
          Event = new global::PassKit.Grpc.EventTickets.Event();
        }
        Event.MergeFrom(other.Event);
      }
      if (other.ticketType_ != null) {
        if (ticketType_ == null) {
          TicketType = new global::PassKit.Grpc.EventTickets.TicketType();
        }
        TicketType.MergeFrom(other.TicketType);
      }
      if (other.OrderNumber.Length != 0) {
        OrderNumber = other.OrderNumber;
      }
      if (other.GroupingId.Length != 0) {
        GroupingId = other.GroupingId;
      }
      if (other.BarcodeContents.Length != 0) {
        BarcodeContents = other.BarcodeContents;
      }
      if (other.seatInfo_ != null) {
        if (seatInfo_ == null) {
          SeatInfo = new global::PassKit.Grpc.EventTickets.Seat();
        }
        SeatInfo.MergeFrom(other.SeatInfo);
      }
      if (other.faceValue_ != null) {
        if (faceValue_ == null) {
          FaceValue = new global::PassKit.Grpc.EventTickets.FaceValue();
        }
        FaceValue.MergeFrom(other.FaceValue);
      }
      if (other.person_ != null) {
        if (person_ == null) {
          Person = new global::PassKit.Grpc.Person();
        }
        Person.MergeFrom(other.Person);
      }
      metaData_.MergeFrom(other.metaData_);
      if (other.OptOut != global::PassKit.Grpc.Toggle.DoNotUse) {
        OptOut = other.OptOut;
      }
      if (other.Status != global::PassKit.Grpc.EventTickets.TicketStatus.StatusNone) {
        Status = other.Status;
      }
      if (other.expiryDate_ != null) {
        if (expiryDate_ == null) {
          ExpiryDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ExpiryDate.MergeFrom(other.ExpiryDate);
      }
      if (other.redemptionDetails_ != null) {
        if (redemptionDetails_ == null) {
          RedemptionDetails = new global::PassKit.Grpc.EventTickets.RedemptionDetails();
        }
        RedemptionDetails.MergeFrom(other.RedemptionDetails);
      }
      validateDetails_.Add(other.validateDetails_);
      if (other.passOverrides_ != null) {
        if (passOverrides_ == null) {
          PassOverrides = new global::PassKit.Grpc.PassOverrides();
        }
        PassOverrides.MergeFrom(other.PassOverrides);
      }
      if (other.passMetaData_ != null) {
        if (passMetaData_ == null) {
          PassMetaData = new global::PassKit.Grpc.Metadata();
        }
        PassMetaData.MergeFrom(other.PassMetaData);
      }
      if (other.created_ != null) {
        if (created_ == null) {
          Created = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Created.MergeFrom(other.Created);
      }
      if (other.updated_ != null) {
        if (updated_ == null) {
          Updated = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Updated.MergeFrom(other.Updated);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            TicketNumber = input.ReadString();
            break;
          }
          case 26: {
            if (event_ == null) {
              Event = new global::PassKit.Grpc.EventTickets.Event();
            }
            input.ReadMessage(Event);
            break;
          }
          case 34: {
            if (ticketType_ == null) {
              TicketType = new global::PassKit.Grpc.EventTickets.TicketType();
            }
            input.ReadMessage(TicketType);
            break;
          }
          case 42: {
            OrderNumber = input.ReadString();
            break;
          }
          case 50: {
            GroupingId = input.ReadString();
            break;
          }
          case 58: {
            BarcodeContents = input.ReadString();
            break;
          }
          case 66: {
            if (seatInfo_ == null) {
              SeatInfo = new global::PassKit.Grpc.EventTickets.Seat();
            }
            input.ReadMessage(SeatInfo);
            break;
          }
          case 74: {
            if (faceValue_ == null) {
              FaceValue = new global::PassKit.Grpc.EventTickets.FaceValue();
            }
            input.ReadMessage(FaceValue);
            break;
          }
          case 82: {
            if (person_ == null) {
              Person = new global::PassKit.Grpc.Person();
            }
            input.ReadMessage(Person);
            break;
          }
          case 90: {
            metaData_.AddEntriesFrom(input, _map_metaData_codec);
            break;
          }
          case 96: {
            OptOut = (global::PassKit.Grpc.Toggle) input.ReadEnum();
            break;
          }
          case 104: {
            Status = (global::PassKit.Grpc.EventTickets.TicketStatus) input.ReadEnum();
            break;
          }
          case 114: {
            if (expiryDate_ == null) {
              ExpiryDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpiryDate);
            break;
          }
          case 122: {
            if (redemptionDetails_ == null) {
              RedemptionDetails = new global::PassKit.Grpc.EventTickets.RedemptionDetails();
            }
            input.ReadMessage(RedemptionDetails);
            break;
          }
          case 130: {
            validateDetails_.AddEntriesFrom(input, _repeated_validateDetails_codec);
            break;
          }
          case 138: {
            if (passOverrides_ == null) {
              PassOverrides = new global::PassKit.Grpc.PassOverrides();
            }
            input.ReadMessage(PassOverrides);
            break;
          }
          case 146: {
            if (passMetaData_ == null) {
              PassMetaData = new global::PassKit.Grpc.Metadata();
            }
            input.ReadMessage(PassMetaData);
            break;
          }
          case 154: {
            if (created_ == null) {
              Created = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Created);
            break;
          }
          case 162: {
            if (updated_ == null) {
              Updated = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Updated);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            TicketNumber = input.ReadString();
            break;
          }
          case 26: {
            if (event_ == null) {
              Event = new global::PassKit.Grpc.EventTickets.Event();
            }
            input.ReadMessage(Event);
            break;
          }
          case 34: {
            if (ticketType_ == null) {
              TicketType = new global::PassKit.Grpc.EventTickets.TicketType();
            }
            input.ReadMessage(TicketType);
            break;
          }
          case 42: {
            OrderNumber = input.ReadString();
            break;
          }
          case 50: {
            GroupingId = input.ReadString();
            break;
          }
          case 58: {
            BarcodeContents = input.ReadString();
            break;
          }
          case 66: {
            if (seatInfo_ == null) {
              SeatInfo = new global::PassKit.Grpc.EventTickets.Seat();
            }
            input.ReadMessage(SeatInfo);
            break;
          }
          case 74: {
            if (faceValue_ == null) {
              FaceValue = new global::PassKit.Grpc.EventTickets.FaceValue();
            }
            input.ReadMessage(FaceValue);
            break;
          }
          case 82: {
            if (person_ == null) {
              Person = new global::PassKit.Grpc.Person();
            }
            input.ReadMessage(Person);
            break;
          }
          case 90: {
            metaData_.AddEntriesFrom(ref input, _map_metaData_codec);
            break;
          }
          case 96: {
            OptOut = (global::PassKit.Grpc.Toggle) input.ReadEnum();
            break;
          }
          case 104: {
            Status = (global::PassKit.Grpc.EventTickets.TicketStatus) input.ReadEnum();
            break;
          }
          case 114: {
            if (expiryDate_ == null) {
              ExpiryDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpiryDate);
            break;
          }
          case 122: {
            if (redemptionDetails_ == null) {
              RedemptionDetails = new global::PassKit.Grpc.EventTickets.RedemptionDetails();
            }
            input.ReadMessage(RedemptionDetails);
            break;
          }
          case 130: {
            validateDetails_.AddEntriesFrom(ref input, _repeated_validateDetails_codec);
            break;
          }
          case 138: {
            if (passOverrides_ == null) {
              PassOverrides = new global::PassKit.Grpc.PassOverrides();
            }
            input.ReadMessage(PassOverrides);
            break;
          }
          case 146: {
            if (passMetaData_ == null) {
              PassMetaData = new global::PassKit.Grpc.Metadata();
            }
            input.ReadMessage(PassMetaData);
            break;
          }
          case 154: {
            if (created_ == null) {
              Created = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Created);
            break;
          }
          case 162: {
            if (updated_ == null) {
              Updated = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Updated);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Holds details of how a ticket was validated. Includes timestamps and optional metadata. Required fields: none.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ValidateDetails : pb::IMessage<ValidateDetails>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ValidateDetails> _parser = new pb::MessageParser<ValidateDetails>(() => new ValidateDetails());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ValidateDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.EventTickets.TicketReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ValidateDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ValidateDetails(ValidateDetails other) : this() {
      validateDate_ = other.validateDate_ != null ? other.validateDate_.Clone() : null;
      lat_ = other.lat_;
      lon_ = other.lon_;
      alt_ = other.alt_;
      validateSource_ = other.validateSource_;
      validateReference_ = other.validateReference_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ValidateDetails Clone() {
      return new ValidateDetails(this);
    }

    /// <summary>Field number for the "validateDate" field.</summary>
    public const int ValidateDateFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp validateDate_;
    /// <summary>
    /// The date the ticket was validated, auto set by the system when the validate endpoint is called. Tickets can be validated multiple times. Not writable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ValidateDate {
      get { return validateDate_; }
      set {
        validateDate_ = value;
      }
    }

    /// <summary>Field number for the "lat" field.</summary>
    public const int LatFieldNumber = 2;
    private double lat_;
    /// <summary>
    /// Optional redemption lat.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Lat {
      get { return lat_; }
      set {
        lat_ = value;
      }
    }

    /// <summary>Field number for the "lon" field.</summary>
    public const int LonFieldNumber = 3;
    private double lon_;
    /// <summary>
    /// Optional redemption lon.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Lon {
      get { return lon_; }
      set {
        lon_ = value;
      }
    }

    /// <summary>Field number for the "alt" field.</summary>
    public const int AltFieldNumber = 4;
    private int alt_;
    /// <summary>
    /// Optional redemption alt.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Alt {
      get { return alt_; }
      set {
        alt_ = value;
      }
    }

    /// <summary>Field number for the "validateSource" field.</summary>
    public const int ValidateSourceFieldNumber = 6;
    private string validateSource_ = "";
    /// <summary>
    /// Optional validate user agent, can be used in case where a Merchant uses the PassKit scanning solution combined with their own scanning software and wants to differentiate the source of validation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ValidateSource {
      get { return validateSource_; }
      set {
        validateSource_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "validateReference" field.</summary>
    public const int ValidateReferenceFieldNumber = 7;
    private string validateReference_ = "";
    /// <summary>
    /// Optional validate reference, can be used for staff name, username, scanner ID, location ID, etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ValidateReference {
      get { return validateReference_; }
      set {
        validateReference_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ValidateDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ValidateDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ValidateDate, other.ValidateDate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Lat, other.Lat)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Lon, other.Lon)) return false;
      if (Alt != other.Alt) return false;
      if (ValidateSource != other.ValidateSource) return false;
      if (ValidateReference != other.ValidateReference) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (validateDate_ != null) hash ^= ValidateDate.GetHashCode();
      if (Lat != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Lat);
      if (Lon != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Lon);
      if (Alt != 0) hash ^= Alt.GetHashCode();
      if (ValidateSource.Length != 0) hash ^= ValidateSource.GetHashCode();
      if (ValidateReference.Length != 0) hash ^= ValidateReference.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (validateDate_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ValidateDate);
      }
      if (Lat != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Lat);
      }
      if (Lon != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Lon);
      }
      if (Alt != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Alt);
      }
      if (ValidateSource.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ValidateSource);
      }
      if (ValidateReference.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ValidateReference);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (validateDate_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ValidateDate);
      }
      if (Lat != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Lat);
      }
      if (Lon != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Lon);
      }
      if (Alt != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Alt);
      }
      if (ValidateSource.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ValidateSource);
      }
      if (ValidateReference.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ValidateReference);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (validateDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ValidateDate);
      }
      if (Lat != 0D) {
        size += 1 + 8;
      }
      if (Lon != 0D) {
        size += 1 + 8;
      }
      if (Alt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Alt);
      }
      if (ValidateSource.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ValidateSource);
      }
      if (ValidateReference.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ValidateReference);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ValidateDetails other) {
      if (other == null) {
        return;
      }
      if (other.validateDate_ != null) {
        if (validateDate_ == null) {
          ValidateDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ValidateDate.MergeFrom(other.ValidateDate);
      }
      if (other.Lat != 0D) {
        Lat = other.Lat;
      }
      if (other.Lon != 0D) {
        Lon = other.Lon;
      }
      if (other.Alt != 0) {
        Alt = other.Alt;
      }
      if (other.ValidateSource.Length != 0) {
        ValidateSource = other.ValidateSource;
      }
      if (other.ValidateReference.Length != 0) {
        ValidateReference = other.ValidateReference;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (validateDate_ == null) {
              ValidateDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ValidateDate);
            break;
          }
          case 17: {
            Lat = input.ReadDouble();
            break;
          }
          case 25: {
            Lon = input.ReadDouble();
            break;
          }
          case 32: {
            Alt = input.ReadInt32();
            break;
          }
          case 50: {
            ValidateSource = input.ReadString();
            break;
          }
          case 58: {
            ValidateReference = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (validateDate_ == null) {
              ValidateDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ValidateDate);
            break;
          }
          case 17: {
            Lat = input.ReadDouble();
            break;
          }
          case 25: {
            Lon = input.ReadDouble();
            break;
          }
          case 32: {
            Alt = input.ReadInt32();
            break;
          }
          case 50: {
            ValidateSource = input.ReadString();
            break;
          }
          case 58: {
            ValidateReference = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Contains redemption information for a redeemed ticket. Set by the redeem endpoint only. Required fields: none.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class RedemptionDetails : pb::IMessage<RedemptionDetails>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RedemptionDetails> _parser = new pb::MessageParser<RedemptionDetails>(() => new RedemptionDetails());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RedemptionDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.EventTickets.TicketReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RedemptionDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RedemptionDetails(RedemptionDetails other) : this() {
      redemptionDate_ = other.redemptionDate_ != null ? other.redemptionDate_.Clone() : null;
      lat_ = other.lat_;
      lon_ = other.lon_;
      alt_ = other.alt_;
      redemptionSource_ = other.redemptionSource_;
      redemptionReference_ = other.redemptionReference_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RedemptionDetails Clone() {
      return new RedemptionDetails(this);
    }

    /// <summary>Field number for the "redemptionDate" field.</summary>
    public const int RedemptionDateFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp redemptionDate_;
    /// <summary>
    /// The date the ticket was redeemed, auto set by the system when the redeem endpoint is called. Not writable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp RedemptionDate {
      get { return redemptionDate_; }
      set {
        redemptionDate_ = value;
      }
    }

    /// <summary>Field number for the "lat" field.</summary>
    public const int LatFieldNumber = 2;
    private double lat_;
    /// <summary>
    /// Optional redemption lat.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Lat {
      get { return lat_; }
      set {
        lat_ = value;
      }
    }

    /// <summary>Field number for the "lon" field.</summary>
    public const int LonFieldNumber = 3;
    private double lon_;
    /// <summary>
    /// Optional redemption lon.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Lon {
      get { return lon_; }
      set {
        lon_ = value;
      }
    }

    /// <summary>Field number for the "alt" field.</summary>
    public const int AltFieldNumber = 4;
    private int alt_;
    /// <summary>
    /// Optional redemption alt.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Alt {
      get { return alt_; }
      set {
        alt_ = value;
      }
    }

    /// <summary>Field number for the "redemptionSource" field.</summary>
    public const int RedemptionSourceFieldNumber = 6;
    private string redemptionSource_ = "";
    /// <summary>
    /// Optional redemption user agent, can be used in case where a Merchant uses the PassKit scanning solution combined with their own scanning software and wants to differentiate the source of redemption.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RedemptionSource {
      get { return redemptionSource_; }
      set {
        redemptionSource_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "redemptionReference" field.</summary>
    public const int RedemptionReferenceFieldNumber = 7;
    private string redemptionReference_ = "";
    /// <summary>
    /// Optional redemption reference, can be used for staff name, username, scanner ID, location ID, etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RedemptionReference {
      get { return redemptionReference_; }
      set {
        redemptionReference_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RedemptionDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RedemptionDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RedemptionDate, other.RedemptionDate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Lat, other.Lat)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Lon, other.Lon)) return false;
      if (Alt != other.Alt) return false;
      if (RedemptionSource != other.RedemptionSource) return false;
      if (RedemptionReference != other.RedemptionReference) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (redemptionDate_ != null) hash ^= RedemptionDate.GetHashCode();
      if (Lat != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Lat);
      if (Lon != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Lon);
      if (Alt != 0) hash ^= Alt.GetHashCode();
      if (RedemptionSource.Length != 0) hash ^= RedemptionSource.GetHashCode();
      if (RedemptionReference.Length != 0) hash ^= RedemptionReference.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (redemptionDate_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RedemptionDate);
      }
      if (Lat != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Lat);
      }
      if (Lon != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Lon);
      }
      if (Alt != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Alt);
      }
      if (RedemptionSource.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(RedemptionSource);
      }
      if (RedemptionReference.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(RedemptionReference);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (redemptionDate_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RedemptionDate);
      }
      if (Lat != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Lat);
      }
      if (Lon != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Lon);
      }
      if (Alt != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Alt);
      }
      if (RedemptionSource.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(RedemptionSource);
      }
      if (RedemptionReference.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(RedemptionReference);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (redemptionDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RedemptionDate);
      }
      if (Lat != 0D) {
        size += 1 + 8;
      }
      if (Lon != 0D) {
        size += 1 + 8;
      }
      if (Alt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Alt);
      }
      if (RedemptionSource.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RedemptionSource);
      }
      if (RedemptionReference.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RedemptionReference);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RedemptionDetails other) {
      if (other == null) {
        return;
      }
      if (other.redemptionDate_ != null) {
        if (redemptionDate_ == null) {
          RedemptionDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        RedemptionDate.MergeFrom(other.RedemptionDate);
      }
      if (other.Lat != 0D) {
        Lat = other.Lat;
      }
      if (other.Lon != 0D) {
        Lon = other.Lon;
      }
      if (other.Alt != 0) {
        Alt = other.Alt;
      }
      if (other.RedemptionSource.Length != 0) {
        RedemptionSource = other.RedemptionSource;
      }
      if (other.RedemptionReference.Length != 0) {
        RedemptionReference = other.RedemptionReference;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (redemptionDate_ == null) {
              RedemptionDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(RedemptionDate);
            break;
          }
          case 17: {
            Lat = input.ReadDouble();
            break;
          }
          case 25: {
            Lon = input.ReadDouble();
            break;
          }
          case 32: {
            Alt = input.ReadInt32();
            break;
          }
          case 50: {
            RedemptionSource = input.ReadString();
            break;
          }
          case 58: {
            RedemptionReference = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (redemptionDate_ == null) {
              RedemptionDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(RedemptionDate);
            break;
          }
          case 17: {
            Lat = input.ReadDouble();
            break;
          }
          case 25: {
            Lon = input.ReadDouble();
            break;
          }
          case 32: {
            Alt = input.ReadInt32();
            break;
          }
          case 50: {
            RedemptionSource = input.ReadString();
            break;
          }
          case 58: {
            RedemptionReference = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Represents a ticket's price and currency. Required fields: none.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class FaceValue : pb::IMessage<FaceValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FaceValue> _parser = new pb::MessageParser<FaceValue>(() => new FaceValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FaceValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.EventTickets.TicketReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FaceValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FaceValue(FaceValue other) : this() {
      amount_ = other.amount_;
      currency_ = other.currency_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FaceValue Clone() {
      return new FaceValue(this);
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 1;
    private float amount_;
    /// <summary>
    /// The ticket amount in cents.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 2;
    private string currency_ = "";
    /// <summary>
    /// The ticket currency.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FaceValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FaceValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Amount, other.Amount)) return false;
      if (Currency != other.Currency) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Amount != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Amount);
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Amount != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Amount);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Currency);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Amount != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Amount);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Currency);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Amount != 0F) {
        size += 1 + 4;
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FaceValue other) {
      if (other == null) {
        return;
      }
      if (other.Amount != 0F) {
        Amount = other.Amount;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Amount = input.ReadFloat();
            break;
          }
          case 18: {
            Currency = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Amount = input.ReadFloat();
            break;
          }
          case 18: {
            Currency = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Describes a seat's location, category, and venue mapping. Optional fields support localization and additional entrance/admission details. Required fields: none.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Seat : pb::IMessage<Seat>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Seat> _parser = new pb::MessageParser<Seat>(() => new Seat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Seat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.EventTickets.TicketReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Seat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Seat(Seat other) : this() {
      seat_ = other.seat_;
      localizedSeat_ = other.localizedSeat_ != null ? other.localizedSeat_.Clone() : null;
      row_ = other.row_;
      localizedRow_ = other.localizedRow_ != null ? other.localizedRow_.Clone() : null;
      section_ = other.section_;
      localizedSection_ = other.localizedSection_ != null ? other.localizedSection_.Clone() : null;
      gate_ = other.gate_;
      localizedGate_ = other.localizedGate_ != null ? other.localizedGate_.Clone() : null;
      identifier_ = other.identifier_;
      localizedIdentifier_ = other.localizedIdentifier_ != null ? other.localizedIdentifier_.Clone() : null;
      description_ = other.description_;
      localizedDescription_ = other.localizedDescription_ != null ? other.localizedDescription_.Clone() : null;
      type_ = other.type_;
      localizedType_ = other.localizedType_ != null ? other.localizedType_.Clone() : null;
      level_ = other.level_;
      localizedLevel_ = other.localizedLevel_ != null ? other.localizedLevel_.Clone() : null;
      aisle_ = other.aisle_;
      localizedAisle_ = other.localizedAisle_ != null ? other.localizedAisle_.Clone() : null;
      door_ = other.door_;
      localizedDoor_ = other.localizedDoor_ != null ? other.localizedDoor_.Clone() : null;
      sectionColor_ = other.sectionColor_;
      portalURL_ = other.portalURL_;
      localizedPortalURL_ = other.localizedPortalURL_ != null ? other.localizedPortalURL_.Clone() : null;
      venueEntrance_ = other.venueEntrance_;
      localizedVenueEntrance_ = other.localizedVenueEntrance_ != null ? other.localizedVenueEntrance_.Clone() : null;
      admissionLevel_ = other.admissionLevel_;
      localizedAdmissionLevel_ = other.localizedAdmissionLevel_ != null ? other.localizedAdmissionLevel_.Clone() : null;
      admissionLevelAbbreviation_ = other.admissionLevelAbbreviation_;
      localizedAdmissionLevelAbbreviation_ = other.localizedAdmissionLevelAbbreviation_ != null ? other.localizedAdmissionLevelAbbreviation_.Clone() : null;
      entranceDescription_ = other.entranceDescription_;
      localizedEntranceDescription_ = other.localizedEntranceDescription_ != null ? other.localizedEntranceDescription_.Clone() : null;
      room_ = other.room_;
      localizedRoom_ = other.localizedRoom_ != null ? other.localizedRoom_.Clone() : null;
      additionalTicketAttributes_ = other.additionalTicketAttributes_;
      localizedAdditionalTicketAttributes_ = other.localizedAdditionalTicketAttributes_ != null ? other.localizedAdditionalTicketAttributes_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Seat Clone() {
      return new Seat(this);
    }

    /// <summary>Field number for the "seat" field.</summary>
    public const int Seat_FieldNumber = 1;
    private string seat_ = "";
    /// <summary>
    /// The seat number, such as "1", "2", "3", or any other seat identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Seat_ {
      get { return seat_; }
      set {
        seat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "localizedSeat" field.</summary>
    public const int LocalizedSeatFieldNumber = 2;
    private global::PassKit.Grpc.LocalizedString localizedSeat_;
    /// <summary>
    /// Localized seat number.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.LocalizedString LocalizedSeat {
      get { return localizedSeat_; }
      set {
        localizedSeat_ = value;
      }
    }

    /// <summary>Field number for the "row" field.</summary>
    public const int RowFieldNumber = 3;
    private string row_ = "";
    /// <summary>
    /// The row of the seat, such as "1", E", "BB", or "A5".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Row {
      get { return row_; }
      set {
        row_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "localizedRow" field.</summary>
    public const int LocalizedRowFieldNumber = 4;
    private global::PassKit.Grpc.LocalizedString localizedRow_;
    /// <summary>
    /// Localized row.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.LocalizedString LocalizedRow {
      get { return localizedRow_; }
      set {
        localizedRow_ = value;
      }
    }

    /// <summary>Field number for the "section" field.</summary>
    public const int SectionFieldNumber = 5;
    private string section_ = "";
    /// <summary>
    /// The section of the seat, such as "121".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Section {
      get { return section_; }
      set {
        section_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "localizedSection" field.</summary>
    public const int LocalizedSectionFieldNumber = 6;
    private global::PassKit.Grpc.LocalizedString localizedSection_;
    /// <summary>
    /// Localized section.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.LocalizedString LocalizedSection {
      get { return localizedSection_; }
      set {
        localizedSection_ = value;
      }
    }

    /// <summary>Field number for the "gate" field.</summary>
    public const int GateFieldNumber = 7;
    private string gate_ = "";
    /// <summary>
    /// The gate the ticket holder should enter to get to their seat, such as "A" or "West".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Gate {
      get { return gate_; }
      set {
        gate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "localizedGate" field.</summary>
    public const int LocalizedGateFieldNumber = 8;
    private global::PassKit.Grpc.LocalizedString localizedGate_;
    /// <summary>
    /// Localized gate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.LocalizedString LocalizedGate {
      get { return localizedGate_; }
      set {
        localizedGate_ = value;
      }
    }

    /// <summary>Field number for the "identifier" field.</summary>
    public const int IdentifierFieldNumber = 9;
    private string identifier_ = "";
    /// <summary>
    /// The identifier code for the seat. E.g. "312-H-7".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Identifier {
      get { return identifier_; }
      set {
        identifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "localizedIdentifier" field.</summary>
    public const int LocalizedIdentifierFieldNumber = 10;
    private global::PassKit.Grpc.LocalizedString localizedIdentifier_;
    /// <summary>
    /// Localized Identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.LocalizedString LocalizedIdentifier {
      get { return localizedIdentifier_; }
      set {
        localizedIdentifier_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 11;
    private string description_ = "";
    /// <summary>
    /// A description of the seat, such as "Shared Sofa Seat".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "localizedDescription" field.</summary>
    public const int LocalizedDescriptionFieldNumber = 12;
    private global::PassKit.Grpc.LocalizedString localizedDescription_;
    /// <summary>
    /// Localized description.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.LocalizedString LocalizedDescription {
      get { return localizedDescription_; }
      set {
        localizedDescription_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 13;
    private string type_ = "";
    /// <summary>
    /// The type of ticket, such as "General Admission", "VIP", "Lower Reserve", etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "localizedType" field.</summary>
    public const int LocalizedTypeFieldNumber = 14;
    private global::PassKit.Grpc.LocalizedString localizedType_;
    /// <summary>
    /// Localized type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.LocalizedString LocalizedType {
      get { return localizedType_; }
      set {
        localizedType_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 15;
    private string level_ = "";
    /// <summary>
    /// The level the ticket holder should use to get to their seat.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Level {
      get { return level_; }
      set {
        level_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "localizedLevel" field.</summary>
    public const int LocalizedLevelFieldNumber = 16;
    private global::PassKit.Grpc.LocalizedString localizedLevel_;
    /// <summary>
    /// Localized level.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.LocalizedString LocalizedLevel {
      get { return localizedLevel_; }
      set {
        localizedLevel_ = value;
      }
    }

    /// <summary>Field number for the "aisle" field.</summary>
    public const int AisleFieldNumber = 17;
    private string aisle_ = "";
    /// <summary>
    /// The aisle the ticket holder should use to get to their seat.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Aisle {
      get { return aisle_; }
      set {
        aisle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "localizedAisle" field.</summary>
    public const int LocalizedAisleFieldNumber = 18;
    private global::PassKit.Grpc.LocalizedString localizedAisle_;
    /// <summary>
    /// Localized aisle.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.LocalizedString LocalizedAisle {
      get { return localizedAisle_; }
      set {
        localizedAisle_ = value;
      }
    }

    /// <summary>Field number for the "door" field.</summary>
    public const int DoorFieldNumber = 19;
    private string door_ = "";
    /// <summary>
    /// The door used to access the event (if applicable).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Door {
      get { return door_; }
      set {
        door_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "localizedDoor" field.</summary>
    public const int LocalizedDoorFieldNumber = 20;
    private global::PassKit.Grpc.LocalizedString localizedDoor_;
    /// <summary>
    /// Localized door.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.LocalizedString LocalizedDoor {
      get { return localizedDoor_; }
      set {
        localizedDoor_ = value;
      }
    }

    /// <summary>Field number for the "sectionColor" field.</summary>
    public const int SectionColorFieldNumber = 21;
    private string sectionColor_ = "";
    /// <summary>
    /// The associated color for the seat section as determined by the venue. Apple poster style NFC event tickets will change the color of the footer of the ticket to assist in directing attendees. Specified as a CSS-style RGB triple. E.g. `rgb(100,10,110`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SectionColor {
      get { return sectionColor_; }
      set {
        sectionColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "portalURL" field.</summary>
    public const int PortalURLFieldNumber = 22;
    private string portalURL_ = "";
    /// <summary>
    /// A URL to a portal with additional event information. A deep link is preferred to provide a more personalised experience. Used with Apple poster style NFC event tickets only. A value in the Seat Information object will override a value in the Venue object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PortalURL {
      get { return portalURL_; }
      set {
        portalURL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "localizedPortalURL" field.</summary>
    public const int LocalizedPortalURLFieldNumber = 23;
    private global::PassKit.Grpc.LocalizedString localizedPortalURL_;
    /// <summary>
    /// Localized portal URL.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.LocalizedString LocalizedPortalURL {
      get { return localizedPortalURL_; }
      set {
        localizedPortalURL_ = value;
      }
    }

    /// <summary>Field number for the "venueEntrance" field.</summary>
    public const int VenueEntranceFieldNumber = 24;
    private string venueEntrance_ = "";
    /// <summary>
    /// venueEntrance is a more flexible field that the venue labels provided in seating information, as it’s a text field with no label. E.g. can be used if a venue uses a category other than gate, portal, door (part of seating information) to describe the entrance, such as "VIP Entry".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string VenueEntrance {
      get { return venueEntrance_; }
      set {
        venueEntrance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "localizedVenueEntrance" field.</summary>
    public const int LocalizedVenueEntranceFieldNumber = 25;
    private global::PassKit.Grpc.LocalizedString localizedVenueEntrance_;
    /// <summary>
    /// Localized portal URL.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.LocalizedString LocalizedVenueEntrance {
      get { return localizedVenueEntrance_; }
      set {
        localizedVenueEntrance_ = value;
      }
    }

    /// <summary>Field number for the "admissionLevel" field.</summary>
    public const int AdmissionLevelFieldNumber = 26;
    private string admissionLevel_ = "";
    /// <summary>
    /// The level of admission the ticket provides E.g. "General Admission", "VIP", etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AdmissionLevel {
      get { return admissionLevel_; }
      set {
        admissionLevel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "localizedAdmissionLevel" field.</summary>
    public const int LocalizedAdmissionLevelFieldNumber = 27;
    private global::PassKit.Grpc.LocalizedString localizedAdmissionLevel_;
    /// <summary>
    /// Localized admission level.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.LocalizedString LocalizedAdmissionLevel {
      get { return localizedAdmissionLevel_; }
      set {
        localizedAdmissionLevel_ = value;
      }
    }

    /// <summary>Field number for the "admissionLevelAbbreviation" field.</summary>
    public const int AdmissionLevelAbbreviationFieldNumber = 28;
    private string admissionLevelAbbreviation_ = "";
    /// <summary>
    /// A shortened representation of admissionLevel, which can be shown alongside seating information, unlike admissionLevel which cannot be displayed alongside seating information on Apple poster tickets.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AdmissionLevelAbbreviation {
      get { return admissionLevelAbbreviation_; }
      set {
        admissionLevelAbbreviation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "localizedAdmissionLevelAbbreviation" field.</summary>
    public const int LocalizedAdmissionLevelAbbreviationFieldNumber = 29;
    private global::PassKit.Grpc.LocalizedString localizedAdmissionLevelAbbreviation_;
    /// <summary>
    /// Localized admission level abbreviation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.LocalizedString LocalizedAdmissionLevelAbbreviation {
      get { return localizedAdmissionLevelAbbreviation_; }
      set {
        localizedAdmissionLevelAbbreviation_ = value;
      }
    }

    /// <summary>Field number for the "entranceDescription" field.</summary>
    public const int EntranceDescriptionFieldNumber = 30;
    private string entranceDescription_ = "";
    /// <summary>
    /// The long description of the entrance information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string EntranceDescription {
      get { return entranceDescription_; }
      set {
        entranceDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "localizedEntranceDescription" field.</summary>
    public const int LocalizedEntranceDescriptionFieldNumber = 31;
    private global::PassKit.Grpc.LocalizedString localizedEntranceDescription_;
    /// <summary>
    /// Localized entrance description.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.LocalizedString LocalizedEntranceDescription {
      get { return localizedEntranceDescription_; }
      set {
        localizedEntranceDescription_ = value;
      }
    }

    /// <summary>Field number for the "room" field.</summary>
    public const int RoomFieldNumber = 32;
    private string room_ = "";
    /// <summary>
    /// The room where the seat is located. A value here will overwrite any room value given in EventSemanticTags.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Room {
      get { return room_; }
      set {
        room_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "localizedRoom" field.</summary>
    public const int LocalizedRoomFieldNumber = 33;
    private global::PassKit.Grpc.LocalizedString localizedRoom_;
    /// <summary>
    /// Localized room.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.LocalizedString LocalizedRoom {
      get { return localizedRoom_; }
      set {
        localizedRoom_ = value;
      }
    }

    /// <summary>Field number for the "additionalTicketAttributes" field.</summary>
    public const int AdditionalTicketAttributesFieldNumber = 34;
    private string additionalTicketAttributes_ = "";
    /// <summary>
    /// The additional ticket attributes text provides a field for additional information that is essential to be on the pass face, but doesn’t fall into any other category. It is displayed directly above the venue name/region label on Apple poster tickets only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AdditionalTicketAttributes {
      get { return additionalTicketAttributes_; }
      set {
        additionalTicketAttributes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "localizedAdditionalTicketAttributes" field.</summary>
    public const int LocalizedAdditionalTicketAttributesFieldNumber = 35;
    private global::PassKit.Grpc.LocalizedString localizedAdditionalTicketAttributes_;
    /// <summary>
    /// Localized room.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.LocalizedString LocalizedAdditionalTicketAttributes {
      get { return localizedAdditionalTicketAttributes_; }
      set {
        localizedAdditionalTicketAttributes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Seat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Seat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seat_ != other.Seat_) return false;
      if (!object.Equals(LocalizedSeat, other.LocalizedSeat)) return false;
      if (Row != other.Row) return false;
      if (!object.Equals(LocalizedRow, other.LocalizedRow)) return false;
      if (Section != other.Section) return false;
      if (!object.Equals(LocalizedSection, other.LocalizedSection)) return false;
      if (Gate != other.Gate) return false;
      if (!object.Equals(LocalizedGate, other.LocalizedGate)) return false;
      if (Identifier != other.Identifier) return false;
      if (!object.Equals(LocalizedIdentifier, other.LocalizedIdentifier)) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(LocalizedDescription, other.LocalizedDescription)) return false;
      if (Type != other.Type) return false;
      if (!object.Equals(LocalizedType, other.LocalizedType)) return false;
      if (Level != other.Level) return false;
      if (!object.Equals(LocalizedLevel, other.LocalizedLevel)) return false;
      if (Aisle != other.Aisle) return false;
      if (!object.Equals(LocalizedAisle, other.LocalizedAisle)) return false;
      if (Door != other.Door) return false;
      if (!object.Equals(LocalizedDoor, other.LocalizedDoor)) return false;
      if (SectionColor != other.SectionColor) return false;
      if (PortalURL != other.PortalURL) return false;
      if (!object.Equals(LocalizedPortalURL, other.LocalizedPortalURL)) return false;
      if (VenueEntrance != other.VenueEntrance) return false;
      if (!object.Equals(LocalizedVenueEntrance, other.LocalizedVenueEntrance)) return false;
      if (AdmissionLevel != other.AdmissionLevel) return false;
      if (!object.Equals(LocalizedAdmissionLevel, other.LocalizedAdmissionLevel)) return false;
      if (AdmissionLevelAbbreviation != other.AdmissionLevelAbbreviation) return false;
      if (!object.Equals(LocalizedAdmissionLevelAbbreviation, other.LocalizedAdmissionLevelAbbreviation)) return false;
      if (EntranceDescription != other.EntranceDescription) return false;
      if (!object.Equals(LocalizedEntranceDescription, other.LocalizedEntranceDescription)) return false;
      if (Room != other.Room) return false;
      if (!object.Equals(LocalizedRoom, other.LocalizedRoom)) return false;
      if (AdditionalTicketAttributes != other.AdditionalTicketAttributes) return false;
      if (!object.Equals(LocalizedAdditionalTicketAttributes, other.LocalizedAdditionalTicketAttributes)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Seat_.Length != 0) hash ^= Seat_.GetHashCode();
      if (localizedSeat_ != null) hash ^= LocalizedSeat.GetHashCode();
      if (Row.Length != 0) hash ^= Row.GetHashCode();
      if (localizedRow_ != null) hash ^= LocalizedRow.GetHashCode();
      if (Section.Length != 0) hash ^= Section.GetHashCode();
      if (localizedSection_ != null) hash ^= LocalizedSection.GetHashCode();
      if (Gate.Length != 0) hash ^= Gate.GetHashCode();
      if (localizedGate_ != null) hash ^= LocalizedGate.GetHashCode();
      if (Identifier.Length != 0) hash ^= Identifier.GetHashCode();
      if (localizedIdentifier_ != null) hash ^= LocalizedIdentifier.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (localizedDescription_ != null) hash ^= LocalizedDescription.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (localizedType_ != null) hash ^= LocalizedType.GetHashCode();
      if (Level.Length != 0) hash ^= Level.GetHashCode();
      if (localizedLevel_ != null) hash ^= LocalizedLevel.GetHashCode();
      if (Aisle.Length != 0) hash ^= Aisle.GetHashCode();
      if (localizedAisle_ != null) hash ^= LocalizedAisle.GetHashCode();
      if (Door.Length != 0) hash ^= Door.GetHashCode();
      if (localizedDoor_ != null) hash ^= LocalizedDoor.GetHashCode();
      if (SectionColor.Length != 0) hash ^= SectionColor.GetHashCode();
      if (PortalURL.Length != 0) hash ^= PortalURL.GetHashCode();
      if (localizedPortalURL_ != null) hash ^= LocalizedPortalURL.GetHashCode();
      if (VenueEntrance.Length != 0) hash ^= VenueEntrance.GetHashCode();
      if (localizedVenueEntrance_ != null) hash ^= LocalizedVenueEntrance.GetHashCode();
      if (AdmissionLevel.Length != 0) hash ^= AdmissionLevel.GetHashCode();
      if (localizedAdmissionLevel_ != null) hash ^= LocalizedAdmissionLevel.GetHashCode();
      if (AdmissionLevelAbbreviation.Length != 0) hash ^= AdmissionLevelAbbreviation.GetHashCode();
      if (localizedAdmissionLevelAbbreviation_ != null) hash ^= LocalizedAdmissionLevelAbbreviation.GetHashCode();
      if (EntranceDescription.Length != 0) hash ^= EntranceDescription.GetHashCode();
      if (localizedEntranceDescription_ != null) hash ^= LocalizedEntranceDescription.GetHashCode();
      if (Room.Length != 0) hash ^= Room.GetHashCode();
      if (localizedRoom_ != null) hash ^= LocalizedRoom.GetHashCode();
      if (AdditionalTicketAttributes.Length != 0) hash ^= AdditionalTicketAttributes.GetHashCode();
      if (localizedAdditionalTicketAttributes_ != null) hash ^= LocalizedAdditionalTicketAttributes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Seat_.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Seat_);
      }
      if (localizedSeat_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LocalizedSeat);
      }
      if (Row.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Row);
      }
      if (localizedRow_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LocalizedRow);
      }
      if (Section.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Section);
      }
      if (localizedSection_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(LocalizedSection);
      }
      if (Gate.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Gate);
      }
      if (localizedGate_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(LocalizedGate);
      }
      if (Identifier.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Identifier);
      }
      if (localizedIdentifier_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(LocalizedIdentifier);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Description);
      }
      if (localizedDescription_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(LocalizedDescription);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Type);
      }
      if (localizedType_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(LocalizedType);
      }
      if (Level.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Level);
      }
      if (localizedLevel_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(LocalizedLevel);
      }
      if (Aisle.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Aisle);
      }
      if (localizedAisle_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(LocalizedAisle);
      }
      if (Door.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(Door);
      }
      if (localizedDoor_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(LocalizedDoor);
      }
      if (SectionColor.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(SectionColor);
      }
      if (PortalURL.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(PortalURL);
      }
      if (localizedPortalURL_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(LocalizedPortalURL);
      }
      if (VenueEntrance.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(VenueEntrance);
      }
      if (localizedVenueEntrance_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(LocalizedVenueEntrance);
      }
      if (AdmissionLevel.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(AdmissionLevel);
      }
      if (localizedAdmissionLevel_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(LocalizedAdmissionLevel);
      }
      if (AdmissionLevelAbbreviation.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(AdmissionLevelAbbreviation);
      }
      if (localizedAdmissionLevelAbbreviation_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(LocalizedAdmissionLevelAbbreviation);
      }
      if (EntranceDescription.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(EntranceDescription);
      }
      if (localizedEntranceDescription_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(LocalizedEntranceDescription);
      }
      if (Room.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(Room);
      }
      if (localizedRoom_ != null) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(LocalizedRoom);
      }
      if (AdditionalTicketAttributes.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(AdditionalTicketAttributes);
      }
      if (localizedAdditionalTicketAttributes_ != null) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(LocalizedAdditionalTicketAttributes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Seat_.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Seat_);
      }
      if (localizedSeat_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LocalizedSeat);
      }
      if (Row.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Row);
      }
      if (localizedRow_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LocalizedRow);
      }
      if (Section.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Section);
      }
      if (localizedSection_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(LocalizedSection);
      }
      if (Gate.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Gate);
      }
      if (localizedGate_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(LocalizedGate);
      }
      if (Identifier.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Identifier);
      }
      if (localizedIdentifier_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(LocalizedIdentifier);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Description);
      }
      if (localizedDescription_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(LocalizedDescription);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Type);
      }
      if (localizedType_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(LocalizedType);
      }
      if (Level.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Level);
      }
      if (localizedLevel_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(LocalizedLevel);
      }
      if (Aisle.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Aisle);
      }
      if (localizedAisle_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(LocalizedAisle);
      }
      if (Door.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(Door);
      }
      if (localizedDoor_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(LocalizedDoor);
      }
      if (SectionColor.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(SectionColor);
      }
      if (PortalURL.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(PortalURL);
      }
      if (localizedPortalURL_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(LocalizedPortalURL);
      }
      if (VenueEntrance.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(VenueEntrance);
      }
      if (localizedVenueEntrance_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(LocalizedVenueEntrance);
      }
      if (AdmissionLevel.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(AdmissionLevel);
      }
      if (localizedAdmissionLevel_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(LocalizedAdmissionLevel);
      }
      if (AdmissionLevelAbbreviation.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(AdmissionLevelAbbreviation);
      }
      if (localizedAdmissionLevelAbbreviation_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(LocalizedAdmissionLevelAbbreviation);
      }
      if (EntranceDescription.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(EntranceDescription);
      }
      if (localizedEntranceDescription_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(LocalizedEntranceDescription);
      }
      if (Room.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(Room);
      }
      if (localizedRoom_ != null) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(LocalizedRoom);
      }
      if (AdditionalTicketAttributes.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(AdditionalTicketAttributes);
      }
      if (localizedAdditionalTicketAttributes_ != null) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(LocalizedAdditionalTicketAttributes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Seat_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Seat_);
      }
      if (localizedSeat_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalizedSeat);
      }
      if (Row.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Row);
      }
      if (localizedRow_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalizedRow);
      }
      if (Section.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Section);
      }
      if (localizedSection_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalizedSection);
      }
      if (Gate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Gate);
      }
      if (localizedGate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalizedGate);
      }
      if (Identifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Identifier);
      }
      if (localizedIdentifier_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalizedIdentifier);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (localizedDescription_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalizedDescription);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (localizedType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalizedType);
      }
      if (Level.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Level);
      }
      if (localizedLevel_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LocalizedLevel);
      }
      if (Aisle.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Aisle);
      }
      if (localizedAisle_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LocalizedAisle);
      }
      if (Door.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Door);
      }
      if (localizedDoor_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LocalizedDoor);
      }
      if (SectionColor.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SectionColor);
      }
      if (PortalURL.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PortalURL);
      }
      if (localizedPortalURL_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LocalizedPortalURL);
      }
      if (VenueEntrance.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VenueEntrance);
      }
      if (localizedVenueEntrance_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LocalizedVenueEntrance);
      }
      if (AdmissionLevel.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AdmissionLevel);
      }
      if (localizedAdmissionLevel_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LocalizedAdmissionLevel);
      }
      if (AdmissionLevelAbbreviation.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AdmissionLevelAbbreviation);
      }
      if (localizedAdmissionLevelAbbreviation_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LocalizedAdmissionLevelAbbreviation);
      }
      if (EntranceDescription.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(EntranceDescription);
      }
      if (localizedEntranceDescription_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LocalizedEntranceDescription);
      }
      if (Room.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Room);
      }
      if (localizedRoom_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LocalizedRoom);
      }
      if (AdditionalTicketAttributes.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AdditionalTicketAttributes);
      }
      if (localizedAdditionalTicketAttributes_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LocalizedAdditionalTicketAttributes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Seat other) {
      if (other == null) {
        return;
      }
      if (other.Seat_.Length != 0) {
        Seat_ = other.Seat_;
      }
      if (other.localizedSeat_ != null) {
        if (localizedSeat_ == null) {
          LocalizedSeat = new global::PassKit.Grpc.LocalizedString();
        }
        LocalizedSeat.MergeFrom(other.LocalizedSeat);
      }
      if (other.Row.Length != 0) {
        Row = other.Row;
      }
      if (other.localizedRow_ != null) {
        if (localizedRow_ == null) {
          LocalizedRow = new global::PassKit.Grpc.LocalizedString();
        }
        LocalizedRow.MergeFrom(other.LocalizedRow);
      }
      if (other.Section.Length != 0) {
        Section = other.Section;
      }
      if (other.localizedSection_ != null) {
        if (localizedSection_ == null) {
          LocalizedSection = new global::PassKit.Grpc.LocalizedString();
        }
        LocalizedSection.MergeFrom(other.LocalizedSection);
      }
      if (other.Gate.Length != 0) {
        Gate = other.Gate;
      }
      if (other.localizedGate_ != null) {
        if (localizedGate_ == null) {
          LocalizedGate = new global::PassKit.Grpc.LocalizedString();
        }
        LocalizedGate.MergeFrom(other.LocalizedGate);
      }
      if (other.Identifier.Length != 0) {
        Identifier = other.Identifier;
      }
      if (other.localizedIdentifier_ != null) {
        if (localizedIdentifier_ == null) {
          LocalizedIdentifier = new global::PassKit.Grpc.LocalizedString();
        }
        LocalizedIdentifier.MergeFrom(other.LocalizedIdentifier);
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.localizedDescription_ != null) {
        if (localizedDescription_ == null) {
          LocalizedDescription = new global::PassKit.Grpc.LocalizedString();
        }
        LocalizedDescription.MergeFrom(other.LocalizedDescription);
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.localizedType_ != null) {
        if (localizedType_ == null) {
          LocalizedType = new global::PassKit.Grpc.LocalizedString();
        }
        LocalizedType.MergeFrom(other.LocalizedType);
      }
      if (other.Level.Length != 0) {
        Level = other.Level;
      }
      if (other.localizedLevel_ != null) {
        if (localizedLevel_ == null) {
          LocalizedLevel = new global::PassKit.Grpc.LocalizedString();
        }
        LocalizedLevel.MergeFrom(other.LocalizedLevel);
      }
      if (other.Aisle.Length != 0) {
        Aisle = other.Aisle;
      }
      if (other.localizedAisle_ != null) {
        if (localizedAisle_ == null) {
          LocalizedAisle = new global::PassKit.Grpc.LocalizedString();
        }
        LocalizedAisle.MergeFrom(other.LocalizedAisle);
      }
      if (other.Door.Length != 0) {
        Door = other.Door;
      }
      if (other.localizedDoor_ != null) {
        if (localizedDoor_ == null) {
          LocalizedDoor = new global::PassKit.Grpc.LocalizedString();
        }
        LocalizedDoor.MergeFrom(other.LocalizedDoor);
      }
      if (other.SectionColor.Length != 0) {
        SectionColor = other.SectionColor;
      }
      if (other.PortalURL.Length != 0) {
        PortalURL = other.PortalURL;
      }
      if (other.localizedPortalURL_ != null) {
        if (localizedPortalURL_ == null) {
          LocalizedPortalURL = new global::PassKit.Grpc.LocalizedString();
        }
        LocalizedPortalURL.MergeFrom(other.LocalizedPortalURL);
      }
      if (other.VenueEntrance.Length != 0) {
        VenueEntrance = other.VenueEntrance;
      }
      if (other.localizedVenueEntrance_ != null) {
        if (localizedVenueEntrance_ == null) {
          LocalizedVenueEntrance = new global::PassKit.Grpc.LocalizedString();
        }
        LocalizedVenueEntrance.MergeFrom(other.LocalizedVenueEntrance);
      }
      if (other.AdmissionLevel.Length != 0) {
        AdmissionLevel = other.AdmissionLevel;
      }
      if (other.localizedAdmissionLevel_ != null) {
        if (localizedAdmissionLevel_ == null) {
          LocalizedAdmissionLevel = new global::PassKit.Grpc.LocalizedString();
        }
        LocalizedAdmissionLevel.MergeFrom(other.LocalizedAdmissionLevel);
      }
      if (other.AdmissionLevelAbbreviation.Length != 0) {
        AdmissionLevelAbbreviation = other.AdmissionLevelAbbreviation;
      }
      if (other.localizedAdmissionLevelAbbreviation_ != null) {
        if (localizedAdmissionLevelAbbreviation_ == null) {
          LocalizedAdmissionLevelAbbreviation = new global::PassKit.Grpc.LocalizedString();
        }
        LocalizedAdmissionLevelAbbreviation.MergeFrom(other.LocalizedAdmissionLevelAbbreviation);
      }
      if (other.EntranceDescription.Length != 0) {
        EntranceDescription = other.EntranceDescription;
      }
      if (other.localizedEntranceDescription_ != null) {
        if (localizedEntranceDescription_ == null) {
          LocalizedEntranceDescription = new global::PassKit.Grpc.LocalizedString();
        }
        LocalizedEntranceDescription.MergeFrom(other.LocalizedEntranceDescription);
      }
      if (other.Room.Length != 0) {
        Room = other.Room;
      }
      if (other.localizedRoom_ != null) {
        if (localizedRoom_ == null) {
          LocalizedRoom = new global::PassKit.Grpc.LocalizedString();
        }
        LocalizedRoom.MergeFrom(other.LocalizedRoom);
      }
      if (other.AdditionalTicketAttributes.Length != 0) {
        AdditionalTicketAttributes = other.AdditionalTicketAttributes;
      }
      if (other.localizedAdditionalTicketAttributes_ != null) {
        if (localizedAdditionalTicketAttributes_ == null) {
          LocalizedAdditionalTicketAttributes = new global::PassKit.Grpc.LocalizedString();
        }
        LocalizedAdditionalTicketAttributes.MergeFrom(other.LocalizedAdditionalTicketAttributes);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Seat_ = input.ReadString();
            break;
          }
          case 18: {
            if (localizedSeat_ == null) {
              LocalizedSeat = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedSeat);
            break;
          }
          case 26: {
            Row = input.ReadString();
            break;
          }
          case 34: {
            if (localizedRow_ == null) {
              LocalizedRow = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedRow);
            break;
          }
          case 42: {
            Section = input.ReadString();
            break;
          }
          case 50: {
            if (localizedSection_ == null) {
              LocalizedSection = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedSection);
            break;
          }
          case 58: {
            Gate = input.ReadString();
            break;
          }
          case 66: {
            if (localizedGate_ == null) {
              LocalizedGate = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedGate);
            break;
          }
          case 74: {
            Identifier = input.ReadString();
            break;
          }
          case 82: {
            if (localizedIdentifier_ == null) {
              LocalizedIdentifier = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedIdentifier);
            break;
          }
          case 90: {
            Description = input.ReadString();
            break;
          }
          case 98: {
            if (localizedDescription_ == null) {
              LocalizedDescription = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedDescription);
            break;
          }
          case 106: {
            Type = input.ReadString();
            break;
          }
          case 114: {
            if (localizedType_ == null) {
              LocalizedType = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedType);
            break;
          }
          case 122: {
            Level = input.ReadString();
            break;
          }
          case 130: {
            if (localizedLevel_ == null) {
              LocalizedLevel = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedLevel);
            break;
          }
          case 138: {
            Aisle = input.ReadString();
            break;
          }
          case 146: {
            if (localizedAisle_ == null) {
              LocalizedAisle = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedAisle);
            break;
          }
          case 154: {
            Door = input.ReadString();
            break;
          }
          case 162: {
            if (localizedDoor_ == null) {
              LocalizedDoor = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedDoor);
            break;
          }
          case 170: {
            SectionColor = input.ReadString();
            break;
          }
          case 178: {
            PortalURL = input.ReadString();
            break;
          }
          case 186: {
            if (localizedPortalURL_ == null) {
              LocalizedPortalURL = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedPortalURL);
            break;
          }
          case 194: {
            VenueEntrance = input.ReadString();
            break;
          }
          case 202: {
            if (localizedVenueEntrance_ == null) {
              LocalizedVenueEntrance = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedVenueEntrance);
            break;
          }
          case 210: {
            AdmissionLevel = input.ReadString();
            break;
          }
          case 218: {
            if (localizedAdmissionLevel_ == null) {
              LocalizedAdmissionLevel = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedAdmissionLevel);
            break;
          }
          case 226: {
            AdmissionLevelAbbreviation = input.ReadString();
            break;
          }
          case 234: {
            if (localizedAdmissionLevelAbbreviation_ == null) {
              LocalizedAdmissionLevelAbbreviation = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedAdmissionLevelAbbreviation);
            break;
          }
          case 242: {
            EntranceDescription = input.ReadString();
            break;
          }
          case 250: {
            if (localizedEntranceDescription_ == null) {
              LocalizedEntranceDescription = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedEntranceDescription);
            break;
          }
          case 258: {
            Room = input.ReadString();
            break;
          }
          case 266: {
            if (localizedRoom_ == null) {
              LocalizedRoom = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedRoom);
            break;
          }
          case 274: {
            AdditionalTicketAttributes = input.ReadString();
            break;
          }
          case 282: {
            if (localizedAdditionalTicketAttributes_ == null) {
              LocalizedAdditionalTicketAttributes = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedAdditionalTicketAttributes);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Seat_ = input.ReadString();
            break;
          }
          case 18: {
            if (localizedSeat_ == null) {
              LocalizedSeat = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedSeat);
            break;
          }
          case 26: {
            Row = input.ReadString();
            break;
          }
          case 34: {
            if (localizedRow_ == null) {
              LocalizedRow = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedRow);
            break;
          }
          case 42: {
            Section = input.ReadString();
            break;
          }
          case 50: {
            if (localizedSection_ == null) {
              LocalizedSection = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedSection);
            break;
          }
          case 58: {
            Gate = input.ReadString();
            break;
          }
          case 66: {
            if (localizedGate_ == null) {
              LocalizedGate = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedGate);
            break;
          }
          case 74: {
            Identifier = input.ReadString();
            break;
          }
          case 82: {
            if (localizedIdentifier_ == null) {
              LocalizedIdentifier = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedIdentifier);
            break;
          }
          case 90: {
            Description = input.ReadString();
            break;
          }
          case 98: {
            if (localizedDescription_ == null) {
              LocalizedDescription = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedDescription);
            break;
          }
          case 106: {
            Type = input.ReadString();
            break;
          }
          case 114: {
            if (localizedType_ == null) {
              LocalizedType = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedType);
            break;
          }
          case 122: {
            Level = input.ReadString();
            break;
          }
          case 130: {
            if (localizedLevel_ == null) {
              LocalizedLevel = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedLevel);
            break;
          }
          case 138: {
            Aisle = input.ReadString();
            break;
          }
          case 146: {
            if (localizedAisle_ == null) {
              LocalizedAisle = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedAisle);
            break;
          }
          case 154: {
            Door = input.ReadString();
            break;
          }
          case 162: {
            if (localizedDoor_ == null) {
              LocalizedDoor = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedDoor);
            break;
          }
          case 170: {
            SectionColor = input.ReadString();
            break;
          }
          case 178: {
            PortalURL = input.ReadString();
            break;
          }
          case 186: {
            if (localizedPortalURL_ == null) {
              LocalizedPortalURL = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedPortalURL);
            break;
          }
          case 194: {
            VenueEntrance = input.ReadString();
            break;
          }
          case 202: {
            if (localizedVenueEntrance_ == null) {
              LocalizedVenueEntrance = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedVenueEntrance);
            break;
          }
          case 210: {
            AdmissionLevel = input.ReadString();
            break;
          }
          case 218: {
            if (localizedAdmissionLevel_ == null) {
              LocalizedAdmissionLevel = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedAdmissionLevel);
            break;
          }
          case 226: {
            AdmissionLevelAbbreviation = input.ReadString();
            break;
          }
          case 234: {
            if (localizedAdmissionLevelAbbreviation_ == null) {
              LocalizedAdmissionLevelAbbreviation = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedAdmissionLevelAbbreviation);
            break;
          }
          case 242: {
            EntranceDescription = input.ReadString();
            break;
          }
          case 250: {
            if (localizedEntranceDescription_ == null) {
              LocalizedEntranceDescription = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedEntranceDescription);
            break;
          }
          case 258: {
            Room = input.ReadString();
            break;
          }
          case 266: {
            if (localizedRoom_ == null) {
              LocalizedRoom = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedRoom);
            break;
          }
          case 274: {
            AdditionalTicketAttributes = input.ReadString();
            break;
          }
          case 282: {
            if (localizedAdditionalTicketAttributes_ == null) {
              LocalizedAdditionalTicketAttributes = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedAdditionalTicketAttributes);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Represents a list of filtered tickets based on production, event, and type. Required fields: productionId or productionUid.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class TicketListRequest : pb::IMessage<TicketListRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TicketListRequest> _parser = new pb::MessageParser<TicketListRequest>(() => new TicketListRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TicketListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.EventTickets.TicketReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TicketListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TicketListRequest(TicketListRequest other) : this() {
      filters_ = other.filters_ != null ? other.filters_.Clone() : null;
      switch (other.ProductionCase) {
        case ProductionOneofCase.ProductionId:
          ProductionId = other.ProductionId;
          break;
        case ProductionOneofCase.ProductionUid:
          ProductionUid = other.ProductionUid;
          break;
      }

      switch (other.EventCase) {
        case EventOneofCase.EventId:
          EventId = other.EventId;
          break;
        case EventOneofCase.EventFilterByVenueAndStart:
          EventFilterByVenueAndStart = other.EventFilterByVenueAndStart.Clone();
          break;
      }

      switch (other.TicketTypeCase) {
        case TicketTypeOneofCase.TicketTypeId:
          TicketTypeId = other.TicketTypeId;
          break;
        case TicketTypeOneofCase.TicketTypeUid:
          TicketTypeUid = other.TicketTypeUid;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TicketListRequest Clone() {
      return new TicketListRequest(this);
    }

    /// <summary>Field number for the "productionId" field.</summary>
    public const int ProductionIdFieldNumber = 1;
    /// <summary>
    /// Production ID. Required if productionUid is not provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ProductionId {
      get { return HasProductionId ? (string) production_ : ""; }
      set {
        production_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        productionCase_ = ProductionOneofCase.ProductionId;
      }
    }
    /// <summary>Gets whether the "productionId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasProductionId {
      get { return productionCase_ == ProductionOneofCase.ProductionId; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "productionId" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearProductionId() {
      if (HasProductionId) {
        ClearProduction();
      }
    }

    /// <summary>Field number for the "productionUid" field.</summary>
    public const int ProductionUidFieldNumber = 2;
    /// <summary>
    /// Production UID. Required if productionId is not provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ProductionUid {
      get { return HasProductionUid ? (string) production_ : ""; }
      set {
        production_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        productionCase_ = ProductionOneofCase.ProductionUid;
      }
    }
    /// <summary>Gets whether the "productionUid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasProductionUid {
      get { return productionCase_ == ProductionOneofCase.ProductionUid; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "productionUid" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearProductionUid() {
      if (HasProductionUid) {
        ClearProduction();
      }
    }

    /// <summary>Field number for the "eventId" field.</summary>
    public const int EventIdFieldNumber = 3;
    /// <summary>
    /// Event ID generated by PassKit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string EventId {
      get { return HasEventId ? (string) event_ : ""; }
      set {
        event_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        eventCase_ = EventOneofCase.EventId;
      }
    }
    /// <summary>Gets whether the "eventId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEventId {
      get { return eventCase_ == EventOneofCase.EventId; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "eventId" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEventId() {
      if (HasEventId) {
        ClearEvent();
      }
    }

    /// <summary>Field number for the "eventFilterByVenueAndStart" field.</summary>
    public const int EventFilterByVenueAndStartFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.EventTickets.EventFilterByVenueAndStart EventFilterByVenueAndStart {
      get { return eventCase_ == EventOneofCase.EventFilterByVenueAndStart ? (global::PassKit.Grpc.EventTickets.EventFilterByVenueAndStart) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.EventFilterByVenueAndStart;
      }
    }

    /// <summary>Field number for the "ticketTypeId" field.</summary>
    public const int TicketTypeIdFieldNumber = 5;
    /// <summary>
    /// PassKit Ticket Type ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TicketTypeId {
      get { return HasTicketTypeId ? (string) ticketType_ : ""; }
      set {
        ticketType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        ticketTypeCase_ = TicketTypeOneofCase.TicketTypeId;
      }
    }
    /// <summary>Gets whether the "ticketTypeId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTicketTypeId {
      get { return ticketTypeCase_ == TicketTypeOneofCase.TicketTypeId; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "ticketTypeId" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTicketTypeId() {
      if (HasTicketTypeId) {
        ClearTicketType();
      }
    }

    /// <summary>Field number for the "ticketTypeUid" field.</summary>
    public const int TicketTypeUidFieldNumber = 6;
    /// <summary>
    /// User Defined Ticket Type ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TicketTypeUid {
      get { return HasTicketTypeUid ? (string) ticketType_ : ""; }
      set {
        ticketType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        ticketTypeCase_ = TicketTypeOneofCase.TicketTypeUid;
      }
    }
    /// <summary>Gets whether the "ticketTypeUid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTicketTypeUid {
      get { return ticketTypeCase_ == TicketTypeOneofCase.TicketTypeUid; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "ticketTypeUid" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTicketTypeUid() {
      if (HasTicketTypeUid) {
        ClearTicketType();
      }
    }

    /// <summary>Field number for the "filters" field.</summary>
    public const int FiltersFieldNumber = 7;
    private global::PassKit.Grpc.Filters filters_;
    /// <summary>
    /// Filters: allows to filter on additional ticket data (i.e. group id, pass install status, updated etc).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Filters Filters {
      get { return filters_; }
      set {
        filters_ = value;
      }
    }

    private object production_;
    /// <summary>Enum of possible cases for the "production" oneof.</summary>
    public enum ProductionOneofCase {
      None = 0,
      ProductionId = 1,
      ProductionUid = 2,
    }
    private ProductionOneofCase productionCase_ = ProductionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProductionOneofCase ProductionCase {
      get { return productionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearProduction() {
      productionCase_ = ProductionOneofCase.None;
      production_ = null;
    }

    private object event_;
    /// <summary>Enum of possible cases for the "event" oneof.</summary>
    public enum EventOneofCase {
      None = 0,
      EventId = 3,
      EventFilterByVenueAndStart = 4,
    }
    private EventOneofCase eventCase_ = EventOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EventOneofCase EventCase {
      get { return eventCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEvent() {
      eventCase_ = EventOneofCase.None;
      event_ = null;
    }

    private object ticketType_;
    /// <summary>Enum of possible cases for the "ticketType" oneof.</summary>
    public enum TicketTypeOneofCase {
      None = 0,
      TicketTypeId = 5,
      TicketTypeUid = 6,
    }
    private TicketTypeOneofCase ticketTypeCase_ = TicketTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TicketTypeOneofCase TicketTypeCase {
      get { return ticketTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTicketType() {
      ticketTypeCase_ = TicketTypeOneofCase.None;
      ticketType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TicketListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TicketListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProductionId != other.ProductionId) return false;
      if (ProductionUid != other.ProductionUid) return false;
      if (EventId != other.EventId) return false;
      if (!object.Equals(EventFilterByVenueAndStart, other.EventFilterByVenueAndStart)) return false;
      if (TicketTypeId != other.TicketTypeId) return false;
      if (TicketTypeUid != other.TicketTypeUid) return false;
      if (!object.Equals(Filters, other.Filters)) return false;
      if (ProductionCase != other.ProductionCase) return false;
      if (EventCase != other.EventCase) return false;
      if (TicketTypeCase != other.TicketTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasProductionId) hash ^= ProductionId.GetHashCode();
      if (HasProductionUid) hash ^= ProductionUid.GetHashCode();
      if (HasEventId) hash ^= EventId.GetHashCode();
      if (eventCase_ == EventOneofCase.EventFilterByVenueAndStart) hash ^= EventFilterByVenueAndStart.GetHashCode();
      if (HasTicketTypeId) hash ^= TicketTypeId.GetHashCode();
      if (HasTicketTypeUid) hash ^= TicketTypeUid.GetHashCode();
      if (filters_ != null) hash ^= Filters.GetHashCode();
      hash ^= (int) productionCase_;
      hash ^= (int) eventCase_;
      hash ^= (int) ticketTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasProductionId) {
        output.WriteRawTag(10);
        output.WriteString(ProductionId);
      }
      if (HasProductionUid) {
        output.WriteRawTag(18);
        output.WriteString(ProductionUid);
      }
      if (HasEventId) {
        output.WriteRawTag(26);
        output.WriteString(EventId);
      }
      if (eventCase_ == EventOneofCase.EventFilterByVenueAndStart) {
        output.WriteRawTag(34);
        output.WriteMessage(EventFilterByVenueAndStart);
      }
      if (HasTicketTypeId) {
        output.WriteRawTag(42);
        output.WriteString(TicketTypeId);
      }
      if (HasTicketTypeUid) {
        output.WriteRawTag(50);
        output.WriteString(TicketTypeUid);
      }
      if (filters_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Filters);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasProductionId) {
        output.WriteRawTag(10);
        output.WriteString(ProductionId);
      }
      if (HasProductionUid) {
        output.WriteRawTag(18);
        output.WriteString(ProductionUid);
      }
      if (HasEventId) {
        output.WriteRawTag(26);
        output.WriteString(EventId);
      }
      if (eventCase_ == EventOneofCase.EventFilterByVenueAndStart) {
        output.WriteRawTag(34);
        output.WriteMessage(EventFilterByVenueAndStart);
      }
      if (HasTicketTypeId) {
        output.WriteRawTag(42);
        output.WriteString(TicketTypeId);
      }
      if (HasTicketTypeUid) {
        output.WriteRawTag(50);
        output.WriteString(TicketTypeUid);
      }
      if (filters_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Filters);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasProductionId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductionId);
      }
      if (HasProductionUid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductionUid);
      }
      if (HasEventId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventId);
      }
      if (eventCase_ == EventOneofCase.EventFilterByVenueAndStart) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventFilterByVenueAndStart);
      }
      if (HasTicketTypeId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TicketTypeId);
      }
      if (HasTicketTypeUid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TicketTypeUid);
      }
      if (filters_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Filters);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TicketListRequest other) {
      if (other == null) {
        return;
      }
      if (other.filters_ != null) {
        if (filters_ == null) {
          Filters = new global::PassKit.Grpc.Filters();
        }
        Filters.MergeFrom(other.Filters);
      }
      switch (other.ProductionCase) {
        case ProductionOneofCase.ProductionId:
          ProductionId = other.ProductionId;
          break;
        case ProductionOneofCase.ProductionUid:
          ProductionUid = other.ProductionUid;
          break;
      }

      switch (other.EventCase) {
        case EventOneofCase.EventId:
          EventId = other.EventId;
          break;
        case EventOneofCase.EventFilterByVenueAndStart:
          if (EventFilterByVenueAndStart == null) {
            EventFilterByVenueAndStart = new global::PassKit.Grpc.EventTickets.EventFilterByVenueAndStart();
          }
          EventFilterByVenueAndStart.MergeFrom(other.EventFilterByVenueAndStart);
          break;
      }

      switch (other.TicketTypeCase) {
        case TicketTypeOneofCase.TicketTypeId:
          TicketTypeId = other.TicketTypeId;
          break;
        case TicketTypeOneofCase.TicketTypeUid:
          TicketTypeUid = other.TicketTypeUid;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ProductionId = input.ReadString();
            break;
          }
          case 18: {
            ProductionUid = input.ReadString();
            break;
          }
          case 26: {
            EventId = input.ReadString();
            break;
          }
          case 34: {
            global::PassKit.Grpc.EventTickets.EventFilterByVenueAndStart subBuilder = new global::PassKit.Grpc.EventTickets.EventFilterByVenueAndStart();
            if (eventCase_ == EventOneofCase.EventFilterByVenueAndStart) {
              subBuilder.MergeFrom(EventFilterByVenueAndStart);
            }
            input.ReadMessage(subBuilder);
            EventFilterByVenueAndStart = subBuilder;
            break;
          }
          case 42: {
            TicketTypeId = input.ReadString();
            break;
          }
          case 50: {
            TicketTypeUid = input.ReadString();
            break;
          }
          case 58: {
            if (filters_ == null) {
              Filters = new global::PassKit.Grpc.Filters();
            }
            input.ReadMessage(Filters);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ProductionId = input.ReadString();
            break;
          }
          case 18: {
            ProductionUid = input.ReadString();
            break;
          }
          case 26: {
            EventId = input.ReadString();
            break;
          }
          case 34: {
            global::PassKit.Grpc.EventTickets.EventFilterByVenueAndStart subBuilder = new global::PassKit.Grpc.EventTickets.EventFilterByVenueAndStart();
            if (eventCase_ == EventOneofCase.EventFilterByVenueAndStart) {
              subBuilder.MergeFrom(EventFilterByVenueAndStart);
            }
            input.ReadMessage(subBuilder);
            EventFilterByVenueAndStart = subBuilder;
            break;
          }
          case 42: {
            TicketTypeId = input.ReadString();
            break;
          }
          case 50: {
            TicketTypeUid = input.ReadString();
            break;
          }
          case 58: {
            if (filters_ == null) {
              Filters = new global::PassKit.Grpc.Filters();
            }
            input.ReadMessage(Filters);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Filters tickets for a specific event using venue ID or UID and a start date. Required fields: venueId or venueUid, scheduledStartDate.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class EventFilterByVenueAndStart : pb::IMessage<EventFilterByVenueAndStart>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventFilterByVenueAndStart> _parser = new pb::MessageParser<EventFilterByVenueAndStart>(() => new EventFilterByVenueAndStart());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<EventFilterByVenueAndStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.EventTickets.TicketReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EventFilterByVenueAndStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EventFilterByVenueAndStart(EventFilterByVenueAndStart other) : this() {
      venueId_ = other.venueId_;
      venueUid_ = other.venueUid_;
      scheduledStartDate_ = other.scheduledStartDate_ != null ? other.scheduledStartDate_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EventFilterByVenueAndStart Clone() {
      return new EventFilterByVenueAndStart(this);
    }

    /// <summary>Field number for the "venueId" field.</summary>
    public const int VenueIdFieldNumber = 1;
    private string venueId_ = "";
    /// <summary>
    /// Venue ID. Required if venueUid is not provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string VenueId {
      get { return venueId_; }
      set {
        venueId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "venueUid" field.</summary>
    public const int VenueUidFieldNumber = 2;
    private string venueUid_ = "";
    /// <summary>
    /// Venue UID. Required if venueId is not provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string VenueUid {
      get { return venueUid_; }
      set {
        venueUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scheduledStartDate" field.</summary>
    public const int ScheduledStartDateFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp scheduledStartDate_;
    /// <summary>
    /// Event scheduled start date time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ScheduledStartDate {
      get { return scheduledStartDate_; }
      set {
        scheduledStartDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as EventFilterByVenueAndStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(EventFilterByVenueAndStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VenueId != other.VenueId) return false;
      if (VenueUid != other.VenueUid) return false;
      if (!object.Equals(ScheduledStartDate, other.ScheduledStartDate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (VenueId.Length != 0) hash ^= VenueId.GetHashCode();
      if (VenueUid.Length != 0) hash ^= VenueUid.GetHashCode();
      if (scheduledStartDate_ != null) hash ^= ScheduledStartDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (VenueId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(VenueId);
      }
      if (VenueUid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VenueUid);
      }
      if (scheduledStartDate_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ScheduledStartDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (VenueId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(VenueId);
      }
      if (VenueUid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VenueUid);
      }
      if (scheduledStartDate_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ScheduledStartDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (VenueId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VenueId);
      }
      if (VenueUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VenueUid);
      }
      if (scheduledStartDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScheduledStartDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(EventFilterByVenueAndStart other) {
      if (other == null) {
        return;
      }
      if (other.VenueId.Length != 0) {
        VenueId = other.VenueId;
      }
      if (other.VenueUid.Length != 0) {
        VenueUid = other.VenueUid;
      }
      if (other.scheduledStartDate_ != null) {
        if (scheduledStartDate_ == null) {
          ScheduledStartDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ScheduledStartDate.MergeFrom(other.ScheduledStartDate);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            VenueId = input.ReadString();
            break;
          }
          case 18: {
            VenueUid = input.ReadString();
            break;
          }
          case 26: {
            if (scheduledStartDate_ == null) {
              ScheduledStartDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ScheduledStartDate);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            VenueId = input.ReadString();
            break;
          }
          case 18: {
            VenueUid = input.ReadString();
            break;
          }
          case 26: {
            if (scheduledStartDate_ == null) {
              ScheduledStartDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ScheduledStartDate);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Used to look up a ticket based on its number and associated production. Required fields: productionId or productionUid, ticketNumber.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class TicketNumberRequest : pb::IMessage<TicketNumberRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TicketNumberRequest> _parser = new pb::MessageParser<TicketNumberRequest>(() => new TicketNumberRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TicketNumberRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.EventTickets.TicketReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TicketNumberRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TicketNumberRequest(TicketNumberRequest other) : this() {
      productionId_ = other.productionId_;
      productionUid_ = other.productionUid_;
      ticketNumber_ = other.ticketNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TicketNumberRequest Clone() {
      return new TicketNumberRequest(this);
    }

    /// <summary>Field number for the "productionId" field.</summary>
    public const int ProductionIdFieldNumber = 1;
    private string productionId_ = "";
    /// <summary>
    /// Production ID. Required if productionUid is not provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ProductionId {
      get { return productionId_; }
      set {
        productionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "productionUid" field.</summary>
    public const int ProductionUidFieldNumber = 2;
    private string productionUid_ = "";
    /// <summary>
    /// Production UID. Required if productionId is not provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ProductionUid {
      get { return productionUid_; }
      set {
        productionUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticketNumber" field.</summary>
    public const int TicketNumberFieldNumber = 3;
    private string ticketNumber_ = "";
    /// <summary>
    /// Ticket Number.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TicketNumber {
      get { return ticketNumber_; }
      set {
        ticketNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TicketNumberRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TicketNumberRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProductionId != other.ProductionId) return false;
      if (ProductionUid != other.ProductionUid) return false;
      if (TicketNumber != other.TicketNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (ProductionId.Length != 0) hash ^= ProductionId.GetHashCode();
      if (ProductionUid.Length != 0) hash ^= ProductionUid.GetHashCode();
      if (TicketNumber.Length != 0) hash ^= TicketNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ProductionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProductionId);
      }
      if (ProductionUid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProductionUid);
      }
      if (TicketNumber.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TicketNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ProductionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProductionId);
      }
      if (ProductionUid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProductionUid);
      }
      if (TicketNumber.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TicketNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (ProductionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductionId);
      }
      if (ProductionUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductionUid);
      }
      if (TicketNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TicketNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TicketNumberRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProductionId.Length != 0) {
        ProductionId = other.ProductionId;
      }
      if (other.ProductionUid.Length != 0) {
        ProductionUid = other.ProductionUid;
      }
      if (other.TicketNumber.Length != 0) {
        TicketNumber = other.TicketNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ProductionId = input.ReadString();
            break;
          }
          case 18: {
            ProductionUid = input.ReadString();
            break;
          }
          case 26: {
            TicketNumber = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ProductionId = input.ReadString();
            break;
          }
          case 18: {
            ProductionUid = input.ReadString();
            break;
          }
          case 26: {
            TicketNumber = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Used to look up or redeem a ticket based on its associated order number. Required fields: productionId or productionUid, orderNumber.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class OrderNumberRequest : pb::IMessage<OrderNumberRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OrderNumberRequest> _parser = new pb::MessageParser<OrderNumberRequest>(() => new OrderNumberRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OrderNumberRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.EventTickets.TicketReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OrderNumberRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OrderNumberRequest(OrderNumberRequest other) : this() {
      productionId_ = other.productionId_;
      productionUid_ = other.productionUid_;
      orderNumber_ = other.orderNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OrderNumberRequest Clone() {
      return new OrderNumberRequest(this);
    }

    /// <summary>Field number for the "productionId" field.</summary>
    public const int ProductionIdFieldNumber = 1;
    private string productionId_ = "";
    /// <summary>
    /// Production ID. Required if productionUid is not provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ProductionId {
      get { return productionId_; }
      set {
        productionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "productionUid" field.</summary>
    public const int ProductionUidFieldNumber = 2;
    private string productionUid_ = "";
    /// <summary>
    /// Production UID. Required if productionId is not provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ProductionUid {
      get { return productionUid_; }
      set {
        productionUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "orderNumber" field.</summary>
    public const int OrderNumberFieldNumber = 3;
    private string orderNumber_ = "";
    /// <summary>
    /// Order Number.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OrderNumber {
      get { return orderNumber_; }
      set {
        orderNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OrderNumberRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OrderNumberRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProductionId != other.ProductionId) return false;
      if (ProductionUid != other.ProductionUid) return false;
      if (OrderNumber != other.OrderNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (ProductionId.Length != 0) hash ^= ProductionId.GetHashCode();
      if (ProductionUid.Length != 0) hash ^= ProductionUid.GetHashCode();
      if (OrderNumber.Length != 0) hash ^= OrderNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ProductionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProductionId);
      }
      if (ProductionUid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProductionUid);
      }
      if (OrderNumber.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OrderNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ProductionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProductionId);
      }
      if (ProductionUid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProductionUid);
      }
      if (OrderNumber.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OrderNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (ProductionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductionId);
      }
      if (ProductionUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductionUid);
      }
      if (OrderNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OrderNumberRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProductionId.Length != 0) {
        ProductionId = other.ProductionId;
      }
      if (other.ProductionUid.Length != 0) {
        ProductionUid = other.ProductionUid;
      }
      if (other.OrderNumber.Length != 0) {
        OrderNumber = other.OrderNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ProductionId = input.ReadString();
            break;
          }
          case 18: {
            ProductionUid = input.ReadString();
            break;
          }
          case 26: {
            OrderNumber = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ProductionId = input.ReadString();
            break;
          }
          case 18: {
            ProductionUid = input.ReadString();
            break;
          }
          case 26: {
            OrderNumber = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Used to redeem all tickets within a specific order. Required fields: productionId or productionUid, orderNumber.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class RedeemByOrderNumber : pb::IMessage<RedeemByOrderNumber>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RedeemByOrderNumber> _parser = new pb::MessageParser<RedeemByOrderNumber>(() => new RedeemByOrderNumber());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RedeemByOrderNumber> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.EventTickets.TicketReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RedeemByOrderNumber() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RedeemByOrderNumber(RedeemByOrderNumber other) : this() {
      productionId_ = other.productionId_;
      productionUid_ = other.productionUid_;
      orderNumber_ = other.orderNumber_;
      redemptionDetails_ = other.redemptionDetails_ != null ? other.redemptionDetails_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RedeemByOrderNumber Clone() {
      return new RedeemByOrderNumber(this);
    }

    /// <summary>Field number for the "productionId" field.</summary>
    public const int ProductionIdFieldNumber = 1;
    private string productionId_ = "";
    /// <summary>
    /// Production ID. Required if productionUid is not provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ProductionId {
      get { return productionId_; }
      set {
        productionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "productionUid" field.</summary>
    public const int ProductionUidFieldNumber = 2;
    private string productionUid_ = "";
    /// <summary>
    /// Production UID. Required if productionId is not provided
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ProductionUid {
      get { return productionUid_; }
      set {
        productionUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "orderNumber" field.</summary>
    public const int OrderNumberFieldNumber = 3;
    private string orderNumber_ = "";
    /// <summary>
    /// Order Number.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OrderNumber {
      get { return orderNumber_; }
      set {
        orderNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "redemptionDetails" field.</summary>
    public const int RedemptionDetailsFieldNumber = 4;
    private global::PassKit.Grpc.EventTickets.RedemptionDetails redemptionDetails_;
    /// <summary>
    /// Details about the redemption.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.EventTickets.RedemptionDetails RedemptionDetails {
      get { return redemptionDetails_; }
      set {
        redemptionDetails_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RedeemByOrderNumber);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RedeemByOrderNumber other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProductionId != other.ProductionId) return false;
      if (ProductionUid != other.ProductionUid) return false;
      if (OrderNumber != other.OrderNumber) return false;
      if (!object.Equals(RedemptionDetails, other.RedemptionDetails)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (ProductionId.Length != 0) hash ^= ProductionId.GetHashCode();
      if (ProductionUid.Length != 0) hash ^= ProductionUid.GetHashCode();
      if (OrderNumber.Length != 0) hash ^= OrderNumber.GetHashCode();
      if (redemptionDetails_ != null) hash ^= RedemptionDetails.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ProductionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProductionId);
      }
      if (ProductionUid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProductionUid);
      }
      if (OrderNumber.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OrderNumber);
      }
      if (redemptionDetails_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RedemptionDetails);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ProductionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProductionId);
      }
      if (ProductionUid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProductionUid);
      }
      if (OrderNumber.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OrderNumber);
      }
      if (redemptionDetails_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RedemptionDetails);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (ProductionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductionId);
      }
      if (ProductionUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductionUid);
      }
      if (OrderNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderNumber);
      }
      if (redemptionDetails_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RedemptionDetails);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RedeemByOrderNumber other) {
      if (other == null) {
        return;
      }
      if (other.ProductionId.Length != 0) {
        ProductionId = other.ProductionId;
      }
      if (other.ProductionUid.Length != 0) {
        ProductionUid = other.ProductionUid;
      }
      if (other.OrderNumber.Length != 0) {
        OrderNumber = other.OrderNumber;
      }
      if (other.redemptionDetails_ != null) {
        if (redemptionDetails_ == null) {
          RedemptionDetails = new global::PassKit.Grpc.EventTickets.RedemptionDetails();
        }
        RedemptionDetails.MergeFrom(other.RedemptionDetails);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ProductionId = input.ReadString();
            break;
          }
          case 18: {
            ProductionUid = input.ReadString();
            break;
          }
          case 26: {
            OrderNumber = input.ReadString();
            break;
          }
          case 34: {
            if (redemptionDetails_ == null) {
              RedemptionDetails = new global::PassKit.Grpc.EventTickets.RedemptionDetails();
            }
            input.ReadMessage(RedemptionDetails);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ProductionId = input.ReadString();
            break;
          }
          case 18: {
            ProductionUid = input.ReadString();
            break;
          }
          case 26: {
            OrderNumber = input.ReadString();
            break;
          }
          case 34: {
            if (redemptionDetails_ == null) {
              RedemptionDetails = new global::PassKit.Grpc.EventTickets.RedemptionDetails();
            }
            input.ReadMessage(RedemptionDetails);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Response that contains an array of ticket summary entries. Required fields: none.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Tickets : pb::IMessage<Tickets>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Tickets> _parser = new pb::MessageParser<Tickets>(() => new Tickets());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Tickets> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.EventTickets.TicketReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Tickets() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Tickets(Tickets other) : this() {
      tickets_ = other.tickets_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Tickets Clone() {
      return new Tickets(this);
    }

    /// <summary>Field number for the "tickets" field.</summary>
    public const int Tickets_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::PassKit.Grpc.EventTickets.TicketLimitedFields> _repeated_tickets_codec
        = pb::FieldCodec.ForMessage(10, global::PassKit.Grpc.EventTickets.TicketLimitedFields.Parser);
    private readonly pbc::RepeatedField<global::PassKit.Grpc.EventTickets.TicketLimitedFields> tickets_ = new pbc::RepeatedField<global::PassKit.Grpc.EventTickets.TicketLimitedFields>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::PassKit.Grpc.EventTickets.TicketLimitedFields> Tickets_ {
      get { return tickets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Tickets);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Tickets other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tickets_.Equals(other.tickets_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tickets_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      tickets_.WriteTo(output, _repeated_tickets_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      tickets_.WriteTo(ref output, _repeated_tickets_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += tickets_.CalculateSize(_repeated_tickets_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Tickets other) {
      if (other == null) {
        return;
      }
      tickets_.Add(other.tickets_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            tickets_.AddEntriesFrom(input, _repeated_tickets_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            tickets_.AddEntriesFrom(ref input, _repeated_tickets_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Contains an array of PassKit pass bundles. Required fields: none.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class TicketPassBundles : pb::IMessage<TicketPassBundles>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TicketPassBundles> _parser = new pb::MessageParser<TicketPassBundles>(() => new TicketPassBundles());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TicketPassBundles> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.EventTickets.TicketReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TicketPassBundles() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TicketPassBundles(TicketPassBundles other) : this() {
      tickets_ = other.tickets_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TicketPassBundles Clone() {
      return new TicketPassBundles(this);
    }

    /// <summary>Field number for the "tickets" field.</summary>
    public const int TicketsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PassKit.Grpc.PassBundle> _repeated_tickets_codec
        = pb::FieldCodec.ForMessage(10, global::PassKit.Grpc.PassBundle.Parser);
    private readonly pbc::RepeatedField<global::PassKit.Grpc.PassBundle> tickets_ = new pbc::RepeatedField<global::PassKit.Grpc.PassBundle>();
    /// <summary>
    /// An array of tickets.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::PassKit.Grpc.PassBundle> Tickets {
      get { return tickets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TicketPassBundles);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TicketPassBundles other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tickets_.Equals(other.tickets_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tickets_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      tickets_.WriteTo(output, _repeated_tickets_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      tickets_.WriteTo(ref output, _repeated_tickets_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += tickets_.CalculateSize(_repeated_tickets_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TicketPassBundles other) {
      if (other == null) {
        return;
      }
      tickets_.Add(other.tickets_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            tickets_.AddEntriesFrom(input, _repeated_tickets_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            tickets_.AddEntriesFrom(ref input, _repeated_tickets_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Used to validate a ticket with optional metadata and validation cap. Required fields: ticketId.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ValidateTicketRequest : pb::IMessage<ValidateTicketRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ValidateTicketRequest> _parser = new pb::MessageParser<ValidateTicketRequest>(() => new ValidateTicketRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ValidateTicketRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.EventTickets.TicketReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ValidateTicketRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ValidateTicketRequest(ValidateTicketRequest other) : this() {
      maxNumberOfValidations_ = other.maxNumberOfValidations_;
      ticket_ = other.ticket_ != null ? other.ticket_.Clone() : null;
      validateDetails_ = other.validateDetails_ != null ? other.validateDetails_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ValidateTicketRequest Clone() {
      return new ValidateTicketRequest(this);
    }

    /// <summary>Field number for the "maxNumberOfValidations" field.</summary>
    public const int MaxNumberOfValidationsFieldNumber = 1;
    private uint maxNumberOfValidations_;
    /// <summary>
    /// If provided will auto redeem ticket once max number of validations has been reached.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MaxNumberOfValidations {
      get { return maxNumberOfValidations_; }
      set {
        maxNumberOfValidations_ = value;
      }
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 2;
    private global::PassKit.Grpc.EventTickets.TicketId ticket_;
    /// <summary>
    /// Ticket id for the ticket to validate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.EventTickets.TicketId Ticket {
      get { return ticket_; }
      set {
        ticket_ = value;
      }
    }

    /// <summary>Field number for the "validateDetails" field.</summary>
    public const int ValidateDetailsFieldNumber = 3;
    private global::PassKit.Grpc.EventTickets.ValidateDetails validateDetails_;
    /// <summary>
    /// Additional details to set for this validation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.EventTickets.ValidateDetails ValidateDetails {
      get { return validateDetails_; }
      set {
        validateDetails_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ValidateTicketRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ValidateTicketRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxNumberOfValidations != other.MaxNumberOfValidations) return false;
      if (!object.Equals(Ticket, other.Ticket)) return false;
      if (!object.Equals(ValidateDetails, other.ValidateDetails)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxNumberOfValidations != 0) hash ^= MaxNumberOfValidations.GetHashCode();
      if (ticket_ != null) hash ^= Ticket.GetHashCode();
      if (validateDetails_ != null) hash ^= ValidateDetails.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MaxNumberOfValidations != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MaxNumberOfValidations);
      }
      if (ticket_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Ticket);
      }
      if (validateDetails_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ValidateDetails);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MaxNumberOfValidations != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MaxNumberOfValidations);
      }
      if (ticket_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Ticket);
      }
      if (validateDetails_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ValidateDetails);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (MaxNumberOfValidations != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxNumberOfValidations);
      }
      if (ticket_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ticket);
      }
      if (validateDetails_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ValidateDetails);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ValidateTicketRequest other) {
      if (other == null) {
        return;
      }
      if (other.MaxNumberOfValidations != 0) {
        MaxNumberOfValidations = other.MaxNumberOfValidations;
      }
      if (other.ticket_ != null) {
        if (ticket_ == null) {
          Ticket = new global::PassKit.Grpc.EventTickets.TicketId();
        }
        Ticket.MergeFrom(other.Ticket);
      }
      if (other.validateDetails_ != null) {
        if (validateDetails_ == null) {
          ValidateDetails = new global::PassKit.Grpc.EventTickets.ValidateDetails();
        }
        ValidateDetails.MergeFrom(other.ValidateDetails);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MaxNumberOfValidations = input.ReadUInt32();
            break;
          }
          case 18: {
            if (ticket_ == null) {
              Ticket = new global::PassKit.Grpc.EventTickets.TicketId();
            }
            input.ReadMessage(Ticket);
            break;
          }
          case 26: {
            if (validateDetails_ == null) {
              ValidateDetails = new global::PassKit.Grpc.EventTickets.ValidateDetails();
            }
            input.ReadMessage(ValidateDetails);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MaxNumberOfValidations = input.ReadUInt32();
            break;
          }
          case 18: {
            if (ticket_ == null) {
              Ticket = new global::PassKit.Grpc.EventTickets.TicketId();
            }
            input.ReadMessage(Ticket);
            break;
          }
          case 26: {
            if (validateDetails_ == null) {
              ValidateDetails = new global::PassKit.Grpc.EventTickets.ValidateDetails();
            }
            input.ReadMessage(ValidateDetails);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Contains the result of a ticket validation including full ticket details. Required fields: none.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ValidateTicketResponse : pb::IMessage<ValidateTicketResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ValidateTicketResponse> _parser = new pb::MessageParser<ValidateTicketResponse>(() => new ValidateTicketResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ValidateTicketResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.EventTickets.TicketReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ValidateTicketResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ValidateTicketResponse(ValidateTicketResponse other) : this() {
      valid_ = other.valid_;
      ticket_ = other.ticket_ != null ? other.ticket_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ValidateTicketResponse Clone() {
      return new ValidateTicketResponse(this);
    }

    /// <summary>Field number for the "valid" field.</summary>
    public const int ValidFieldNumber = 1;
    private bool valid_;
    /// <summary>
    /// Indicates if the ticket is valid.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Valid {
      get { return valid_; }
      set {
        valid_ = value;
      }
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 2;
    private global::PassKit.Grpc.EventTickets.Ticket ticket_;
    /// <summary>
    /// Full ticket details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.EventTickets.Ticket Ticket {
      get { return ticket_; }
      set {
        ticket_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ValidateTicketResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ValidateTicketResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Valid != other.Valid) return false;
      if (!object.Equals(Ticket, other.Ticket)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Valid != false) hash ^= Valid.GetHashCode();
      if (ticket_ != null) hash ^= Ticket.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Valid != false) {
        output.WriteRawTag(8);
        output.WriteBool(Valid);
      }
      if (ticket_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Ticket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Valid != false) {
        output.WriteRawTag(8);
        output.WriteBool(Valid);
      }
      if (ticket_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Ticket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Valid != false) {
        size += 1 + 1;
      }
      if (ticket_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ticket);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ValidateTicketResponse other) {
      if (other == null) {
        return;
      }
      if (other.Valid != false) {
        Valid = other.Valid;
      }
      if (other.ticket_ != null) {
        if (ticket_ == null) {
          Ticket = new global::PassKit.Grpc.EventTickets.Ticket();
        }
        Ticket.MergeFrom(other.Ticket);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Valid = input.ReadBool();
            break;
          }
          case 18: {
            if (ticket_ == null) {
              Ticket = new global::PassKit.Grpc.EventTickets.Ticket();
            }
            input.ReadMessage(Ticket);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Valid = input.ReadBool();
            break;
          }
          case 18: {
            if (ticket_ == null) {
              Ticket = new global::PassKit.Grpc.EventTickets.Ticket();
            }
            input.ReadMessage(Ticket);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Used to redeem a single ticket with optional redemption metadata. Required fields: ticketId.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class RedeemTicketRequest : pb::IMessage<RedeemTicketRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RedeemTicketRequest> _parser = new pb::MessageParser<RedeemTicketRequest>(() => new RedeemTicketRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RedeemTicketRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.EventTickets.TicketReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RedeemTicketRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RedeemTicketRequest(RedeemTicketRequest other) : this() {
      ticket_ = other.ticket_ != null ? other.ticket_.Clone() : null;
      redemptionDetails_ = other.redemptionDetails_ != null ? other.redemptionDetails_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RedeemTicketRequest Clone() {
      return new RedeemTicketRequest(this);
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 1;
    private global::PassKit.Grpc.EventTickets.TicketId ticket_;
    /// <summary>
    /// Ticket id for the ticket to redeem.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.EventTickets.TicketId Ticket {
      get { return ticket_; }
      set {
        ticket_ = value;
      }
    }

    /// <summary>Field number for the "redemptionDetails" field.</summary>
    public const int RedemptionDetailsFieldNumber = 3;
    private global::PassKit.Grpc.EventTickets.RedemptionDetails redemptionDetails_;
    /// <summary>
    /// Additional details to set for this redemption.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.EventTickets.RedemptionDetails RedemptionDetails {
      get { return redemptionDetails_; }
      set {
        redemptionDetails_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RedeemTicketRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RedeemTicketRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Ticket, other.Ticket)) return false;
      if (!object.Equals(RedemptionDetails, other.RedemptionDetails)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (ticket_ != null) hash ^= Ticket.GetHashCode();
      if (redemptionDetails_ != null) hash ^= RedemptionDetails.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ticket_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Ticket);
      }
      if (redemptionDetails_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RedemptionDetails);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ticket_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Ticket);
      }
      if (redemptionDetails_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RedemptionDetails);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (ticket_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ticket);
      }
      if (redemptionDetails_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RedemptionDetails);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RedeemTicketRequest other) {
      if (other == null) {
        return;
      }
      if (other.ticket_ != null) {
        if (ticket_ == null) {
          Ticket = new global::PassKit.Grpc.EventTickets.TicketId();
        }
        Ticket.MergeFrom(other.Ticket);
      }
      if (other.redemptionDetails_ != null) {
        if (redemptionDetails_ == null) {
          RedemptionDetails = new global::PassKit.Grpc.EventTickets.RedemptionDetails();
        }
        RedemptionDetails.MergeFrom(other.RedemptionDetails);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (ticket_ == null) {
              Ticket = new global::PassKit.Grpc.EventTickets.TicketId();
            }
            input.ReadMessage(Ticket);
            break;
          }
          case 26: {
            if (redemptionDetails_ == null) {
              RedemptionDetails = new global::PassKit.Grpc.EventTickets.RedemptionDetails();
            }
            input.ReadMessage(RedemptionDetails);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (ticket_ == null) {
              Ticket = new global::PassKit.Grpc.EventTickets.TicketId();
            }
            input.ReadMessage(Ticket);
            break;
          }
          case 26: {
            if (redemptionDetails_ == null) {
              RedemptionDetails = new global::PassKit.Grpc.EventTickets.RedemptionDetails();
            }
            input.ReadMessage(RedemptionDetails);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Lightweight representation of a ticket with key details used in summaries or filtered responses. Required fields: event, ticketTypeUid.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class TicketLimitedFields : pb::IMessage<TicketLimitedFields>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TicketLimitedFields> _parser = new pb::MessageParser<TicketLimitedFields>(() => new TicketLimitedFields());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TicketLimitedFields> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.EventTickets.TicketReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TicketLimitedFields() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TicketLimitedFields(TicketLimitedFields other) : this() {
      id_ = other.id_;
      ticketNumber_ = other.ticketNumber_;
      production_ = other.production_ != null ? other.production_.Clone() : null;
      event_ = other.event_ != null ? other.event_.Clone() : null;
      venue_ = other.venue_ != null ? other.venue_.Clone() : null;
      ticketType_ = other.ticketType_ != null ? other.ticketType_.Clone() : null;
      orderNumber_ = other.orderNumber_;
      groupingId_ = other.groupingId_;
      barcodeContents_ = other.barcodeContents_;
      seatInfo_ = other.seatInfo_ != null ? other.seatInfo_.Clone() : null;
      faceValue_ = other.faceValue_ != null ? other.faceValue_.Clone() : null;
      person_ = other.person_ != null ? other.person_.Clone() : null;
      metaData_ = other.metaData_.Clone();
      optOut_ = other.optOut_;
      status_ = other.status_;
      expiryDate_ = other.expiryDate_ != null ? other.expiryDate_.Clone() : null;
      redemptionDetails_ = other.redemptionDetails_ != null ? other.redemptionDetails_.Clone() : null;
      validateDetails_ = other.validateDetails_.Clone();
      passOverrides_ = other.passOverrides_ != null ? other.passOverrides_.Clone() : null;
      passMetaData_ = other.passMetaData_ != null ? other.passMetaData_.Clone() : null;
      created_ = other.created_ != null ? other.created_.Clone() : null;
      updated_ = other.updated_ != null ? other.updated_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TicketLimitedFields Clone() {
      return new TicketLimitedFields(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// PassKit generated ticket id (22 characters).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticketNumber" field.</summary>
    public const int TicketNumberFieldNumber = 2;
    private string ticketNumber_ = "";
    /// <summary>
    /// User generated ticket number. Unique within the Production.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TicketNumber {
      get { return ticketNumber_; }
      set {
        ticketNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "production" field.</summary>
    public const int ProductionFieldNumber = 3;
    private global::PassKit.Grpc.EventTickets.ProductionLimitedFieldsResponse production_;
    /// <summary>
    /// The production information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.EventTickets.ProductionLimitedFieldsResponse Production {
      get { return production_; }
      set {
        production_ = value;
      }
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 4;
    private global::PassKit.Grpc.EventTickets.EventLimitedFieldsResponse event_;
    /// <summary>
    /// The event information. Only specific fields are returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.EventTickets.EventLimitedFieldsResponse Event {
      get { return event_; }
      set {
        event_ = value;
      }
    }

    /// <summary>Field number for the "venue" field.</summary>
    public const int VenueFieldNumber = 5;
    private global::PassKit.Grpc.EventTickets.VenueLimitedFieldsResponse venue_;
    /// <summary>
    /// Venue information. Only specific fields are returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.EventTickets.VenueLimitedFieldsResponse Venue {
      get { return venue_; }
      set {
        venue_ = value;
      }
    }

    /// <summary>Field number for the "ticketType" field.</summary>
    public const int TicketTypeFieldNumber = 6;
    private global::PassKit.Grpc.EventTickets.TicketTypeLimitedFields ticketType_;
    /// <summary>
    /// The ticket type the ticket is for. Only specific fields are returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.EventTickets.TicketTypeLimitedFields TicketType {
      get { return ticketType_; }
      set {
        ticketType_ = value;
      }
    }

    /// <summary>Field number for the "orderNumber" field.</summary>
    public const int OrderNumberFieldNumber = 7;
    private string orderNumber_ = "";
    /// <summary>
    /// Optional order / confirmation / booking code. Unique within the Production.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OrderNumber {
      get { return orderNumber_; }
      set {
        orderNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "groupingId" field.</summary>
    public const int GroupingIdFieldNumber = 8;
    private string groupingId_ = "";
    /// <summary>
    /// Optional PassKit generated grouping ID. The system automatically groups tickets based by order number. Grouped tickets can be downloaded together from our multi-pass download pages. Not writable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string GroupingId {
      get { return groupingId_; }
      set {
        groupingId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "barcodeContents" field.</summary>
    public const int BarcodeContentsFieldNumber = 9;
    private string barcodeContents_ = "";
    /// <summary>
    /// The contents to embed in the barcode for this ticket. If not provided, the default value from the Ticket Type Pass Template Design is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BarcodeContents {
      get { return barcodeContents_; }
      set {
        barcodeContents_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "seatInfo" field.</summary>
    public const int SeatInfoFieldNumber = 10;
    private global::PassKit.Grpc.EventTickets.Seat seatInfo_;
    /// <summary>
    /// The seat info for the ticket.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.EventTickets.Seat SeatInfo {
      get { return seatInfo_; }
      set {
        seatInfo_ = value;
      }
    }

    /// <summary>Field number for the "faceValue" field.</summary>
    public const int FaceValueFieldNumber = 11;
    private global::PassKit.Grpc.EventTickets.FaceValue faceValue_;
    /// <summary>
    /// The face value details for the ticket.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.EventTickets.FaceValue FaceValue {
      get { return faceValue_; }
      set {
        faceValue_ = value;
      }
    }

    /// <summary>Field number for the "person" field.</summary>
    public const int PersonFieldNumber = 12;
    private global::PassKit.Grpc.Person person_;
    /// <summary>
    /// The ticket holder information. Stored encrypted in PassKit's database.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Person Person {
      get { return person_; }
      set {
        person_ = value;
      }
    }

    /// <summary>Field number for the "metaData" field.</summary>
    public const int MetaDataFieldNumber = 13;
    private static readonly pbc::MapField<string, string>.Codec _map_metaData_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 106);
    private readonly pbc::MapField<string, string> metaData_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Any other meta fields for the ticket that are not covered in the Ticket Object / API (i.e. you might want to capture ticket information specific to your process).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<string, string> MetaData {
      get { return metaData_; }
    }

    /// <summary>Field number for the "optOut" field.</summary>
    public const int OptOutFieldNumber = 14;
    private bool optOut_;
    /// <summary>
    /// Indicates if the holder of the ticket opted out to receive marketing promotions (defaults to false).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OptOut {
      get { return optOut_; }
      set {
        optOut_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 15;
    private global::PassKit.Grpc.EventTickets.TicketStatus status_ = global::PassKit.Grpc.EventTickets.TicketStatus.StatusNone;
    /// <summary>
    /// Holds the ticket status.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.EventTickets.TicketStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "expiryDate" field.</summary>
    public const int ExpiryDateFieldNumber = 16;
    private global::Google.Protobuf.WellKnownTypes.Timestamp expiryDate_;
    /// <summary>
    /// Optional field to set when the ticket expires. When the expiry date hits, it will automatically gray out the barcode.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ExpiryDate {
      get { return expiryDate_; }
      set {
        expiryDate_ = value;
      }
    }

    /// <summary>Field number for the "redemptionDetails" field.</summary>
    public const int RedemptionDetailsFieldNumber = 17;
    private global::PassKit.Grpc.EventTickets.RedemptionDetails redemptionDetails_;
    /// <summary>
    /// Contains details about the redemption (if the ticket is in a redeemed state). Not writable; set by the redeem endpoint.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.EventTickets.RedemptionDetails RedemptionDetails {
      get { return redemptionDetails_; }
      set {
        redemptionDetails_ = value;
      }
    }

    /// <summary>Field number for the "validateDetails" field.</summary>
    public const int ValidateDetailsFieldNumber = 18;
    private static readonly pb::FieldCodec<global::PassKit.Grpc.EventTickets.ValidateDetails> _repeated_validateDetails_codec
        = pb::FieldCodec.ForMessage(146, global::PassKit.Grpc.EventTickets.ValidateDetails.Parser);
    private readonly pbc::RepeatedField<global::PassKit.Grpc.EventTickets.ValidateDetails> validateDetails_ = new pbc::RepeatedField<global::PassKit.Grpc.EventTickets.ValidateDetails>();
    /// <summary>
    /// Contains details about when the ticket was validated. Tickets can be validated multiple times. Not writable; set by the validate endpoint.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::PassKit.Grpc.EventTickets.ValidateDetails> ValidateDetails {
      get { return validateDetails_; }
    }

    /// <summary>Field number for the "passOverrides" field.</summary>
    public const int PassOverridesFieldNumber = 19;
    private global::PassKit.Grpc.PassOverrides passOverrides_;
    /// <summary>
    /// Optional Pass level overrides for proximity &amp; images.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.PassOverrides PassOverrides {
      get { return passOverrides_; }
      set {
        passOverrides_ = value;
      }
    }

    /// <summary>Field number for the "passMetaData" field.</summary>
    public const int PassMetaDataFieldNumber = 20;
    private global::PassKit.Grpc.Metadata passMetaData_;
    /// <summary>
    /// Pass Metadata hold meta data about the pass like status, lifecycle, utm details and installation data. Cannot be set via the API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Metadata PassMetaData {
      get { return passMetaData_; }
      set {
        passMetaData_ = value;
      }
    }

    /// <summary>Field number for the "created" field.</summary>
    public const int CreatedFieldNumber = 21;
    private global::Google.Protobuf.WellKnownTypes.Timestamp created_;
    /// <summary>
    /// The date the ticket was created. Not writable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Created {
      get { return created_; }
      set {
        created_ = value;
      }
    }

    /// <summary>Field number for the "updated" field.</summary>
    public const int UpdatedFieldNumber = 22;
    private global::Google.Protobuf.WellKnownTypes.Timestamp updated_;
    /// <summary>
    /// The date the ticket last updated. Not writable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Updated {
      get { return updated_; }
      set {
        updated_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TicketLimitedFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TicketLimitedFields other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (TicketNumber != other.TicketNumber) return false;
      if (!object.Equals(Production, other.Production)) return false;
      if (!object.Equals(Event, other.Event)) return false;
      if (!object.Equals(Venue, other.Venue)) return false;
      if (!object.Equals(TicketType, other.TicketType)) return false;
      if (OrderNumber != other.OrderNumber) return false;
      if (GroupingId != other.GroupingId) return false;
      if (BarcodeContents != other.BarcodeContents) return false;
      if (!object.Equals(SeatInfo, other.SeatInfo)) return false;
      if (!object.Equals(FaceValue, other.FaceValue)) return false;
      if (!object.Equals(Person, other.Person)) return false;
      if (!MetaData.Equals(other.MetaData)) return false;
      if (OptOut != other.OptOut) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(ExpiryDate, other.ExpiryDate)) return false;
      if (!object.Equals(RedemptionDetails, other.RedemptionDetails)) return false;
      if(!validateDetails_.Equals(other.validateDetails_)) return false;
      if (!object.Equals(PassOverrides, other.PassOverrides)) return false;
      if (!object.Equals(PassMetaData, other.PassMetaData)) return false;
      if (!object.Equals(Created, other.Created)) return false;
      if (!object.Equals(Updated, other.Updated)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (TicketNumber.Length != 0) hash ^= TicketNumber.GetHashCode();
      if (production_ != null) hash ^= Production.GetHashCode();
      if (event_ != null) hash ^= Event.GetHashCode();
      if (venue_ != null) hash ^= Venue.GetHashCode();
      if (ticketType_ != null) hash ^= TicketType.GetHashCode();
      if (OrderNumber.Length != 0) hash ^= OrderNumber.GetHashCode();
      if (GroupingId.Length != 0) hash ^= GroupingId.GetHashCode();
      if (BarcodeContents.Length != 0) hash ^= BarcodeContents.GetHashCode();
      if (seatInfo_ != null) hash ^= SeatInfo.GetHashCode();
      if (faceValue_ != null) hash ^= FaceValue.GetHashCode();
      if (person_ != null) hash ^= Person.GetHashCode();
      hash ^= MetaData.GetHashCode();
      if (OptOut != false) hash ^= OptOut.GetHashCode();
      if (Status != global::PassKit.Grpc.EventTickets.TicketStatus.StatusNone) hash ^= Status.GetHashCode();
      if (expiryDate_ != null) hash ^= ExpiryDate.GetHashCode();
      if (redemptionDetails_ != null) hash ^= RedemptionDetails.GetHashCode();
      hash ^= validateDetails_.GetHashCode();
      if (passOverrides_ != null) hash ^= PassOverrides.GetHashCode();
      if (passMetaData_ != null) hash ^= PassMetaData.GetHashCode();
      if (created_ != null) hash ^= Created.GetHashCode();
      if (updated_ != null) hash ^= Updated.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (TicketNumber.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TicketNumber);
      }
      if (production_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Production);
      }
      if (event_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Event);
      }
      if (venue_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Venue);
      }
      if (ticketType_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TicketType);
      }
      if (OrderNumber.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(OrderNumber);
      }
      if (GroupingId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(GroupingId);
      }
      if (BarcodeContents.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(BarcodeContents);
      }
      if (seatInfo_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(SeatInfo);
      }
      if (faceValue_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(FaceValue);
      }
      if (person_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Person);
      }
      metaData_.WriteTo(output, _map_metaData_codec);
      if (OptOut != false) {
        output.WriteRawTag(112);
        output.WriteBool(OptOut);
      }
      if (Status != global::PassKit.Grpc.EventTickets.TicketStatus.StatusNone) {
        output.WriteRawTag(120);
        output.WriteEnum((int) Status);
      }
      if (expiryDate_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(ExpiryDate);
      }
      if (redemptionDetails_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(RedemptionDetails);
      }
      validateDetails_.WriteTo(output, _repeated_validateDetails_codec);
      if (passOverrides_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(PassOverrides);
      }
      if (passMetaData_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(PassMetaData);
      }
      if (created_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Created);
      }
      if (updated_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(Updated);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (TicketNumber.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TicketNumber);
      }
      if (production_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Production);
      }
      if (event_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Event);
      }
      if (venue_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Venue);
      }
      if (ticketType_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TicketType);
      }
      if (OrderNumber.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(OrderNumber);
      }
      if (GroupingId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(GroupingId);
      }
      if (BarcodeContents.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(BarcodeContents);
      }
      if (seatInfo_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(SeatInfo);
      }
      if (faceValue_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(FaceValue);
      }
      if (person_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Person);
      }
      metaData_.WriteTo(ref output, _map_metaData_codec);
      if (OptOut != false) {
        output.WriteRawTag(112);
        output.WriteBool(OptOut);
      }
      if (Status != global::PassKit.Grpc.EventTickets.TicketStatus.StatusNone) {
        output.WriteRawTag(120);
        output.WriteEnum((int) Status);
      }
      if (expiryDate_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(ExpiryDate);
      }
      if (redemptionDetails_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(RedemptionDetails);
      }
      validateDetails_.WriteTo(ref output, _repeated_validateDetails_codec);
      if (passOverrides_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(PassOverrides);
      }
      if (passMetaData_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(PassMetaData);
      }
      if (created_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Created);
      }
      if (updated_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(Updated);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (TicketNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TicketNumber);
      }
      if (production_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Production);
      }
      if (event_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Event);
      }
      if (venue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Venue);
      }
      if (ticketType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TicketType);
      }
      if (OrderNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderNumber);
      }
      if (GroupingId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupingId);
      }
      if (BarcodeContents.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BarcodeContents);
      }
      if (seatInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SeatInfo);
      }
      if (faceValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FaceValue);
      }
      if (person_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Person);
      }
      size += metaData_.CalculateSize(_map_metaData_codec);
      if (OptOut != false) {
        size += 1 + 1;
      }
      if (Status != global::PassKit.Grpc.EventTickets.TicketStatus.StatusNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (expiryDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ExpiryDate);
      }
      if (redemptionDetails_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RedemptionDetails);
      }
      size += validateDetails_.CalculateSize(_repeated_validateDetails_codec);
      if (passOverrides_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PassOverrides);
      }
      if (passMetaData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PassMetaData);
      }
      if (created_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Created);
      }
      if (updated_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Updated);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TicketLimitedFields other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.TicketNumber.Length != 0) {
        TicketNumber = other.TicketNumber;
      }
      if (other.production_ != null) {
        if (production_ == null) {
          Production = new global::PassKit.Grpc.EventTickets.ProductionLimitedFieldsResponse();
        }
        Production.MergeFrom(other.Production);
      }
      if (other.event_ != null) {
        if (event_ == null) {
          Event = new global::PassKit.Grpc.EventTickets.EventLimitedFieldsResponse();
        }
        Event.MergeFrom(other.Event);
      }
      if (other.venue_ != null) {
        if (venue_ == null) {
          Venue = new global::PassKit.Grpc.EventTickets.VenueLimitedFieldsResponse();
        }
        Venue.MergeFrom(other.Venue);
      }
      if (other.ticketType_ != null) {
        if (ticketType_ == null) {
          TicketType = new global::PassKit.Grpc.EventTickets.TicketTypeLimitedFields();
        }
        TicketType.MergeFrom(other.TicketType);
      }
      if (other.OrderNumber.Length != 0) {
        OrderNumber = other.OrderNumber;
      }
      if (other.GroupingId.Length != 0) {
        GroupingId = other.GroupingId;
      }
      if (other.BarcodeContents.Length != 0) {
        BarcodeContents = other.BarcodeContents;
      }
      if (other.seatInfo_ != null) {
        if (seatInfo_ == null) {
          SeatInfo = new global::PassKit.Grpc.EventTickets.Seat();
        }
        SeatInfo.MergeFrom(other.SeatInfo);
      }
      if (other.faceValue_ != null) {
        if (faceValue_ == null) {
          FaceValue = new global::PassKit.Grpc.EventTickets.FaceValue();
        }
        FaceValue.MergeFrom(other.FaceValue);
      }
      if (other.person_ != null) {
        if (person_ == null) {
          Person = new global::PassKit.Grpc.Person();
        }
        Person.MergeFrom(other.Person);
      }
      metaData_.MergeFrom(other.metaData_);
      if (other.OptOut != false) {
        OptOut = other.OptOut;
      }
      if (other.Status != global::PassKit.Grpc.EventTickets.TicketStatus.StatusNone) {
        Status = other.Status;
      }
      if (other.expiryDate_ != null) {
        if (expiryDate_ == null) {
          ExpiryDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ExpiryDate.MergeFrom(other.ExpiryDate);
      }
      if (other.redemptionDetails_ != null) {
        if (redemptionDetails_ == null) {
          RedemptionDetails = new global::PassKit.Grpc.EventTickets.RedemptionDetails();
        }
        RedemptionDetails.MergeFrom(other.RedemptionDetails);
      }
      validateDetails_.Add(other.validateDetails_);
      if (other.passOverrides_ != null) {
        if (passOverrides_ == null) {
          PassOverrides = new global::PassKit.Grpc.PassOverrides();
        }
        PassOverrides.MergeFrom(other.PassOverrides);
      }
      if (other.passMetaData_ != null) {
        if (passMetaData_ == null) {
          PassMetaData = new global::PassKit.Grpc.Metadata();
        }
        PassMetaData.MergeFrom(other.PassMetaData);
      }
      if (other.created_ != null) {
        if (created_ == null) {
          Created = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Created.MergeFrom(other.Created);
      }
      if (other.updated_ != null) {
        if (updated_ == null) {
          Updated = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Updated.MergeFrom(other.Updated);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            TicketNumber = input.ReadString();
            break;
          }
          case 26: {
            if (production_ == null) {
              Production = new global::PassKit.Grpc.EventTickets.ProductionLimitedFieldsResponse();
            }
            input.ReadMessage(Production);
            break;
          }
          case 34: {
            if (event_ == null) {
              Event = new global::PassKit.Grpc.EventTickets.EventLimitedFieldsResponse();
            }
            input.ReadMessage(Event);
            break;
          }
          case 42: {
            if (venue_ == null) {
              Venue = new global::PassKit.Grpc.EventTickets.VenueLimitedFieldsResponse();
            }
            input.ReadMessage(Venue);
            break;
          }
          case 50: {
            if (ticketType_ == null) {
              TicketType = new global::PassKit.Grpc.EventTickets.TicketTypeLimitedFields();
            }
            input.ReadMessage(TicketType);
            break;
          }
          case 58: {
            OrderNumber = input.ReadString();
            break;
          }
          case 66: {
            GroupingId = input.ReadString();
            break;
          }
          case 74: {
            BarcodeContents = input.ReadString();
            break;
          }
          case 82: {
            if (seatInfo_ == null) {
              SeatInfo = new global::PassKit.Grpc.EventTickets.Seat();
            }
            input.ReadMessage(SeatInfo);
            break;
          }
          case 90: {
            if (faceValue_ == null) {
              FaceValue = new global::PassKit.Grpc.EventTickets.FaceValue();
            }
            input.ReadMessage(FaceValue);
            break;
          }
          case 98: {
            if (person_ == null) {
              Person = new global::PassKit.Grpc.Person();
            }
            input.ReadMessage(Person);
            break;
          }
          case 106: {
            metaData_.AddEntriesFrom(input, _map_metaData_codec);
            break;
          }
          case 112: {
            OptOut = input.ReadBool();
            break;
          }
          case 120: {
            Status = (global::PassKit.Grpc.EventTickets.TicketStatus) input.ReadEnum();
            break;
          }
          case 130: {
            if (expiryDate_ == null) {
              ExpiryDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpiryDate);
            break;
          }
          case 138: {
            if (redemptionDetails_ == null) {
              RedemptionDetails = new global::PassKit.Grpc.EventTickets.RedemptionDetails();
            }
            input.ReadMessage(RedemptionDetails);
            break;
          }
          case 146: {
            validateDetails_.AddEntriesFrom(input, _repeated_validateDetails_codec);
            break;
          }
          case 154: {
            if (passOverrides_ == null) {
              PassOverrides = new global::PassKit.Grpc.PassOverrides();
            }
            input.ReadMessage(PassOverrides);
            break;
          }
          case 162: {
            if (passMetaData_ == null) {
              PassMetaData = new global::PassKit.Grpc.Metadata();
            }
            input.ReadMessage(PassMetaData);
            break;
          }
          case 170: {
            if (created_ == null) {
              Created = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Created);
            break;
          }
          case 178: {
            if (updated_ == null) {
              Updated = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Updated);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            TicketNumber = input.ReadString();
            break;
          }
          case 26: {
            if (production_ == null) {
              Production = new global::PassKit.Grpc.EventTickets.ProductionLimitedFieldsResponse();
            }
            input.ReadMessage(Production);
            break;
          }
          case 34: {
            if (event_ == null) {
              Event = new global::PassKit.Grpc.EventTickets.EventLimitedFieldsResponse();
            }
            input.ReadMessage(Event);
            break;
          }
          case 42: {
            if (venue_ == null) {
              Venue = new global::PassKit.Grpc.EventTickets.VenueLimitedFieldsResponse();
            }
            input.ReadMessage(Venue);
            break;
          }
          case 50: {
            if (ticketType_ == null) {
              TicketType = new global::PassKit.Grpc.EventTickets.TicketTypeLimitedFields();
            }
            input.ReadMessage(TicketType);
            break;
          }
          case 58: {
            OrderNumber = input.ReadString();
            break;
          }
          case 66: {
            GroupingId = input.ReadString();
            break;
          }
          case 74: {
            BarcodeContents = input.ReadString();
            break;
          }
          case 82: {
            if (seatInfo_ == null) {
              SeatInfo = new global::PassKit.Grpc.EventTickets.Seat();
            }
            input.ReadMessage(SeatInfo);
            break;
          }
          case 90: {
            if (faceValue_ == null) {
              FaceValue = new global::PassKit.Grpc.EventTickets.FaceValue();
            }
            input.ReadMessage(FaceValue);
            break;
          }
          case 98: {
            if (person_ == null) {
              Person = new global::PassKit.Grpc.Person();
            }
            input.ReadMessage(Person);
            break;
          }
          case 106: {
            metaData_.AddEntriesFrom(ref input, _map_metaData_codec);
            break;
          }
          case 112: {
            OptOut = input.ReadBool();
            break;
          }
          case 120: {
            Status = (global::PassKit.Grpc.EventTickets.TicketStatus) input.ReadEnum();
            break;
          }
          case 130: {
            if (expiryDate_ == null) {
              ExpiryDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpiryDate);
            break;
          }
          case 138: {
            if (redemptionDetails_ == null) {
              RedemptionDetails = new global::PassKit.Grpc.EventTickets.RedemptionDetails();
            }
            input.ReadMessage(RedemptionDetails);
            break;
          }
          case 146: {
            validateDetails_.AddEntriesFrom(ref input, _repeated_validateDetails_codec);
            break;
          }
          case 154: {
            if (passOverrides_ == null) {
              PassOverrides = new global::PassKit.Grpc.PassOverrides();
            }
            input.ReadMessage(PassOverrides);
            break;
          }
          case 162: {
            if (passMetaData_ == null) {
              PassMetaData = new global::PassKit.Grpc.Metadata();
            }
            input.ReadMessage(PassMetaData);
            break;
          }
          case 170: {
            if (created_ == null) {
              Created = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Created);
            break;
          }
          case 178: {
            if (updated_ == null) {
              Updated = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Updated);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Request message for issuing a ticket. Event will be auto-created if it doesn’t exist. Required fields: eventId or event, ticketTypeId.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class IssueTicketRequest : pb::IMessage<IssueTicketRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<IssueTicketRequest> _parser = new pb::MessageParser<IssueTicketRequest>(() => new IssueTicketRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<IssueTicketRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.EventTickets.TicketReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public IssueTicketRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public IssueTicketRequest(IssueTicketRequest other) : this() {
      ticketTypeId_ = other.ticketTypeId_;
      ticketNumber_ = other.ticketNumber_;
      orderNumber_ = other.orderNumber_;
      groupingId_ = other.groupingId_;
      barcodeContents_ = other.barcodeContents_;
      seatInfo_ = other.seatInfo_ != null ? other.seatInfo_.Clone() : null;
      faceValue_ = other.faceValue_ != null ? other.faceValue_.Clone() : null;
      person_ = other.person_ != null ? other.person_.Clone() : null;
      metaData_ = other.metaData_.Clone();
      optOut_ = other.optOut_;
      status_ = other.status_;
      expiryDate_ = other.expiryDate_ != null ? other.expiryDate_.Clone() : null;
      redemptionDetails_ = other.redemptionDetails_ != null ? other.redemptionDetails_.Clone() : null;
      validateDetails_ = other.validateDetails_.Clone();
      passOverrides_ = other.passOverrides_ != null ? other.passOverrides_.Clone() : null;
      passMetaData_ = other.passMetaData_ != null ? other.passMetaData_.Clone() : null;
      created_ = other.created_ != null ? other.created_.Clone() : null;
      updated_ = other.updated_ != null ? other.updated_.Clone() : null;
      switch (other.EventInfoCase) {
        case EventInfoOneofCase.EventId:
          EventId = other.EventId;
          break;
        case EventInfoOneofCase.Event:
          Event = other.Event.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public IssueTicketRequest Clone() {
      return new IssueTicketRequest(this);
    }

    /// <summary>Field number for the "eventId" field.</summary>
    public const int EventIdFieldNumber = 1;
    /// <summary>
    /// PassKit generated event id (22 characters). Required if event is not provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string EventId {
      get { return HasEventId ? (string) eventInfo_ : ""; }
      set {
        eventInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        eventInfoCase_ = EventInfoOneofCase.EventId;
      }
    }
    /// <summary>Gets whether the "eventId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEventId {
      get { return eventInfoCase_ == EventInfoOneofCase.EventId; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "eventId" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEventId() {
      if (HasEventId) {
        ClearEventInfo();
      }
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 2;
    /// <summary>
    /// Event details. Event is auto generated if the record does not exist. Required if eventId is not provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.EventTickets.EventLimitedFieldsRequest Event {
      get { return eventInfoCase_ == EventInfoOneofCase.Event ? (global::PassKit.Grpc.EventTickets.EventLimitedFieldsRequest) eventInfo_ : null; }
      set {
        eventInfo_ = value;
        eventInfoCase_ = value == null ? EventInfoOneofCase.None : EventInfoOneofCase.Event;
      }
    }

    /// <summary>Field number for the "ticketTypeId" field.</summary>
    public const int TicketTypeIdFieldNumber = 3;
    private string ticketTypeId_ = "";
    /// <summary>
    /// PassKit generated ticketType id (22 characters).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TicketTypeId {
      get { return ticketTypeId_; }
      set {
        ticketTypeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticketNumber" field.</summary>
    public const int TicketNumberFieldNumber = 4;
    private string ticketNumber_ = "";
    /// <summary>
    /// Optional user generated ticket number. Unique within the Production.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TicketNumber {
      get { return ticketNumber_; }
      set {
        ticketNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "orderNumber" field.</summary>
    public const int OrderNumberFieldNumber = 5;
    private string orderNumber_ = "";
    /// <summary>
    /// Optional order / confirmation / booking code. Unique within the Production.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OrderNumber {
      get { return orderNumber_; }
      set {
        orderNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "groupingId" field.</summary>
    public const int GroupingIdFieldNumber = 6;
    private string groupingId_ = "";
    /// <summary>
    /// Optional PassKit generated grouping ID. The system automatically groups tickets based by order number. Grouped tickets can be downloaded together from our multi-pass download pages. Not writable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string GroupingId {
      get { return groupingId_; }
      set {
        groupingId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "barcodeContents" field.</summary>
    public const int BarcodeContentsFieldNumber = 7;
    private string barcodeContents_ = "";
    /// <summary>
    /// The contents to embed in the barcode for this ticket. If not provided, the default value from the Ticket Type Pass Template Design is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BarcodeContents {
      get { return barcodeContents_; }
      set {
        barcodeContents_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "seatInfo" field.</summary>
    public const int SeatInfoFieldNumber = 8;
    private global::PassKit.Grpc.EventTickets.Seat seatInfo_;
    /// <summary>
    /// The seat info for the ticket.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.EventTickets.Seat SeatInfo {
      get { return seatInfo_; }
      set {
        seatInfo_ = value;
      }
    }

    /// <summary>Field number for the "faceValue" field.</summary>
    public const int FaceValueFieldNumber = 9;
    private global::PassKit.Grpc.EventTickets.FaceValue faceValue_;
    /// <summary>
    /// The face value details for the ticket.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.EventTickets.FaceValue FaceValue {
      get { return faceValue_; }
      set {
        faceValue_ = value;
      }
    }

    /// <summary>Field number for the "person" field.</summary>
    public const int PersonFieldNumber = 10;
    private global::PassKit.Grpc.Person person_;
    /// <summary>
    /// The ticket holder information. Stored encrypted in PassKit's database.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Person Person {
      get { return person_; }
      set {
        person_ = value;
      }
    }

    /// <summary>Field number for the "metaData" field.</summary>
    public const int MetaDataFieldNumber = 11;
    private static readonly pbc::MapField<string, string>.Codec _map_metaData_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 90);
    private readonly pbc::MapField<string, string> metaData_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Any other meta fields for the ticket that are not covered in the Ticket Object / API (i.e. you might want to capture ticket information specific to your process).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<string, string> MetaData {
      get { return metaData_; }
    }

    /// <summary>Field number for the "optOut" field.</summary>
    public const int OptOutFieldNumber = 12;
    private bool optOut_;
    /// <summary>
    /// Indicates if the holder of the ticket opted out to receive marketing promotions (defaults to false).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OptOut {
      get { return optOut_; }
      set {
        optOut_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 13;
    private global::PassKit.Grpc.EventTickets.TicketStatus status_ = global::PassKit.Grpc.EventTickets.TicketStatus.StatusNone;
    /// <summary>
    /// Holds the ticket status.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.EventTickets.TicketStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "expiryDate" field.</summary>
    public const int ExpiryDateFieldNumber = 14;
    private global::Google.Protobuf.WellKnownTypes.Timestamp expiryDate_;
    /// <summary>
    /// Optional field to set when the ticket expires. When the expiry date hits, it will automatically gray out the barcode.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ExpiryDate {
      get { return expiryDate_; }
      set {
        expiryDate_ = value;
      }
    }

    /// <summary>Field number for the "redemptionDetails" field.</summary>
    public const int RedemptionDetailsFieldNumber = 15;
    private global::PassKit.Grpc.EventTickets.RedemptionDetails redemptionDetails_;
    /// <summary>
    /// Contains details about the redemption (if the ticket is in a redeemed state). Not writable; set by the redeem endpoint.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.EventTickets.RedemptionDetails RedemptionDetails {
      get { return redemptionDetails_; }
      set {
        redemptionDetails_ = value;
      }
    }

    /// <summary>Field number for the "validateDetails" field.</summary>
    public const int ValidateDetailsFieldNumber = 16;
    private static readonly pb::FieldCodec<global::PassKit.Grpc.EventTickets.ValidateDetails> _repeated_validateDetails_codec
        = pb::FieldCodec.ForMessage(130, global::PassKit.Grpc.EventTickets.ValidateDetails.Parser);
    private readonly pbc::RepeatedField<global::PassKit.Grpc.EventTickets.ValidateDetails> validateDetails_ = new pbc::RepeatedField<global::PassKit.Grpc.EventTickets.ValidateDetails>();
    /// <summary>
    /// Contains details about when the ticket was validated. Tickets can be validated multiple times. Not writable; set by the validate endpoint.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::PassKit.Grpc.EventTickets.ValidateDetails> ValidateDetails {
      get { return validateDetails_; }
    }

    /// <summary>Field number for the "passOverrides" field.</summary>
    public const int PassOverridesFieldNumber = 17;
    private global::PassKit.Grpc.PassOverrides passOverrides_;
    /// <summary>
    /// Optional Pass level overrides for proximity &amp; images.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.PassOverrides PassOverrides {
      get { return passOverrides_; }
      set {
        passOverrides_ = value;
      }
    }

    /// <summary>Field number for the "passMetaData" field.</summary>
    public const int PassMetaDataFieldNumber = 18;
    private global::PassKit.Grpc.Metadata passMetaData_;
    /// <summary>
    /// Pass Metadata hold meta data about the pass like status, lifecycle, utm details and installation data. Cannot be set via the API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Metadata PassMetaData {
      get { return passMetaData_; }
      set {
        passMetaData_ = value;
      }
    }

    /// <summary>Field number for the "created" field.</summary>
    public const int CreatedFieldNumber = 19;
    private global::Google.Protobuf.WellKnownTypes.Timestamp created_;
    /// <summary>
    /// The date the ticket was created. Not writable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Created {
      get { return created_; }
      set {
        created_ = value;
      }
    }

    /// <summary>Field number for the "updated" field.</summary>
    public const int UpdatedFieldNumber = 20;
    private global::Google.Protobuf.WellKnownTypes.Timestamp updated_;
    /// <summary>
    /// The date the ticket last updated. Not writable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Updated {
      get { return updated_; }
      set {
        updated_ = value;
      }
    }

    private object eventInfo_;
    /// <summary>Enum of possible cases for the "eventInfo" oneof.</summary>
    public enum EventInfoOneofCase {
      None = 0,
      EventId = 1,
      Event = 2,
    }
    private EventInfoOneofCase eventInfoCase_ = EventInfoOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EventInfoOneofCase EventInfoCase {
      get { return eventInfoCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEventInfo() {
      eventInfoCase_ = EventInfoOneofCase.None;
      eventInfo_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as IssueTicketRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(IssueTicketRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventId != other.EventId) return false;
      if (!object.Equals(Event, other.Event)) return false;
      if (TicketTypeId != other.TicketTypeId) return false;
      if (TicketNumber != other.TicketNumber) return false;
      if (OrderNumber != other.OrderNumber) return false;
      if (GroupingId != other.GroupingId) return false;
      if (BarcodeContents != other.BarcodeContents) return false;
      if (!object.Equals(SeatInfo, other.SeatInfo)) return false;
      if (!object.Equals(FaceValue, other.FaceValue)) return false;
      if (!object.Equals(Person, other.Person)) return false;
      if (!MetaData.Equals(other.MetaData)) return false;
      if (OptOut != other.OptOut) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(ExpiryDate, other.ExpiryDate)) return false;
      if (!object.Equals(RedemptionDetails, other.RedemptionDetails)) return false;
      if(!validateDetails_.Equals(other.validateDetails_)) return false;
      if (!object.Equals(PassOverrides, other.PassOverrides)) return false;
      if (!object.Equals(PassMetaData, other.PassMetaData)) return false;
      if (!object.Equals(Created, other.Created)) return false;
      if (!object.Equals(Updated, other.Updated)) return false;
      if (EventInfoCase != other.EventInfoCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEventId) hash ^= EventId.GetHashCode();
      if (eventInfoCase_ == EventInfoOneofCase.Event) hash ^= Event.GetHashCode();
      if (TicketTypeId.Length != 0) hash ^= TicketTypeId.GetHashCode();
      if (TicketNumber.Length != 0) hash ^= TicketNumber.GetHashCode();
      if (OrderNumber.Length != 0) hash ^= OrderNumber.GetHashCode();
      if (GroupingId.Length != 0) hash ^= GroupingId.GetHashCode();
      if (BarcodeContents.Length != 0) hash ^= BarcodeContents.GetHashCode();
      if (seatInfo_ != null) hash ^= SeatInfo.GetHashCode();
      if (faceValue_ != null) hash ^= FaceValue.GetHashCode();
      if (person_ != null) hash ^= Person.GetHashCode();
      hash ^= MetaData.GetHashCode();
      if (OptOut != false) hash ^= OptOut.GetHashCode();
      if (Status != global::PassKit.Grpc.EventTickets.TicketStatus.StatusNone) hash ^= Status.GetHashCode();
      if (expiryDate_ != null) hash ^= ExpiryDate.GetHashCode();
      if (redemptionDetails_ != null) hash ^= RedemptionDetails.GetHashCode();
      hash ^= validateDetails_.GetHashCode();
      if (passOverrides_ != null) hash ^= PassOverrides.GetHashCode();
      if (passMetaData_ != null) hash ^= PassMetaData.GetHashCode();
      if (created_ != null) hash ^= Created.GetHashCode();
      if (updated_ != null) hash ^= Updated.GetHashCode();
      hash ^= (int) eventInfoCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEventId) {
        output.WriteRawTag(10);
        output.WriteString(EventId);
      }
      if (eventInfoCase_ == EventInfoOneofCase.Event) {
        output.WriteRawTag(18);
        output.WriteMessage(Event);
      }
      if (TicketTypeId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TicketTypeId);
      }
      if (TicketNumber.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TicketNumber);
      }
      if (OrderNumber.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(OrderNumber);
      }
      if (GroupingId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(GroupingId);
      }
      if (BarcodeContents.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(BarcodeContents);
      }
      if (seatInfo_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(SeatInfo);
      }
      if (faceValue_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(FaceValue);
      }
      if (person_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Person);
      }
      metaData_.WriteTo(output, _map_metaData_codec);
      if (OptOut != false) {
        output.WriteRawTag(96);
        output.WriteBool(OptOut);
      }
      if (Status != global::PassKit.Grpc.EventTickets.TicketStatus.StatusNone) {
        output.WriteRawTag(104);
        output.WriteEnum((int) Status);
      }
      if (expiryDate_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(ExpiryDate);
      }
      if (redemptionDetails_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(RedemptionDetails);
      }
      validateDetails_.WriteTo(output, _repeated_validateDetails_codec);
      if (passOverrides_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(PassOverrides);
      }
      if (passMetaData_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(PassMetaData);
      }
      if (created_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Created);
      }
      if (updated_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(Updated);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEventId) {
        output.WriteRawTag(10);
        output.WriteString(EventId);
      }
      if (eventInfoCase_ == EventInfoOneofCase.Event) {
        output.WriteRawTag(18);
        output.WriteMessage(Event);
      }
      if (TicketTypeId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TicketTypeId);
      }
      if (TicketNumber.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TicketNumber);
      }
      if (OrderNumber.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(OrderNumber);
      }
      if (GroupingId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(GroupingId);
      }
      if (BarcodeContents.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(BarcodeContents);
      }
      if (seatInfo_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(SeatInfo);
      }
      if (faceValue_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(FaceValue);
      }
      if (person_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Person);
      }
      metaData_.WriteTo(ref output, _map_metaData_codec);
      if (OptOut != false) {
        output.WriteRawTag(96);
        output.WriteBool(OptOut);
      }
      if (Status != global::PassKit.Grpc.EventTickets.TicketStatus.StatusNone) {
        output.WriteRawTag(104);
        output.WriteEnum((int) Status);
      }
      if (expiryDate_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(ExpiryDate);
      }
      if (redemptionDetails_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(RedemptionDetails);
      }
      validateDetails_.WriteTo(ref output, _repeated_validateDetails_codec);
      if (passOverrides_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(PassOverrides);
      }
      if (passMetaData_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(PassMetaData);
      }
      if (created_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Created);
      }
      if (updated_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(Updated);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasEventId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventId);
      }
      if (eventInfoCase_ == EventInfoOneofCase.Event) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Event);
      }
      if (TicketTypeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TicketTypeId);
      }
      if (TicketNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TicketNumber);
      }
      if (OrderNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderNumber);
      }
      if (GroupingId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupingId);
      }
      if (BarcodeContents.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BarcodeContents);
      }
      if (seatInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SeatInfo);
      }
      if (faceValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FaceValue);
      }
      if (person_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Person);
      }
      size += metaData_.CalculateSize(_map_metaData_codec);
      if (OptOut != false) {
        size += 1 + 1;
      }
      if (Status != global::PassKit.Grpc.EventTickets.TicketStatus.StatusNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (expiryDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExpiryDate);
      }
      if (redemptionDetails_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RedemptionDetails);
      }
      size += validateDetails_.CalculateSize(_repeated_validateDetails_codec);
      if (passOverrides_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PassOverrides);
      }
      if (passMetaData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PassMetaData);
      }
      if (created_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Created);
      }
      if (updated_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Updated);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(IssueTicketRequest other) {
      if (other == null) {
        return;
      }
      if (other.TicketTypeId.Length != 0) {
        TicketTypeId = other.TicketTypeId;
      }
      if (other.TicketNumber.Length != 0) {
        TicketNumber = other.TicketNumber;
      }
      if (other.OrderNumber.Length != 0) {
        OrderNumber = other.OrderNumber;
      }
      if (other.GroupingId.Length != 0) {
        GroupingId = other.GroupingId;
      }
      if (other.BarcodeContents.Length != 0) {
        BarcodeContents = other.BarcodeContents;
      }
      if (other.seatInfo_ != null) {
        if (seatInfo_ == null) {
          SeatInfo = new global::PassKit.Grpc.EventTickets.Seat();
        }
        SeatInfo.MergeFrom(other.SeatInfo);
      }
      if (other.faceValue_ != null) {
        if (faceValue_ == null) {
          FaceValue = new global::PassKit.Grpc.EventTickets.FaceValue();
        }
        FaceValue.MergeFrom(other.FaceValue);
      }
      if (other.person_ != null) {
        if (person_ == null) {
          Person = new global::PassKit.Grpc.Person();
        }
        Person.MergeFrom(other.Person);
      }
      metaData_.MergeFrom(other.metaData_);
      if (other.OptOut != false) {
        OptOut = other.OptOut;
      }
      if (other.Status != global::PassKit.Grpc.EventTickets.TicketStatus.StatusNone) {
        Status = other.Status;
      }
      if (other.expiryDate_ != null) {
        if (expiryDate_ == null) {
          ExpiryDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ExpiryDate.MergeFrom(other.ExpiryDate);
      }
      if (other.redemptionDetails_ != null) {
        if (redemptionDetails_ == null) {
          RedemptionDetails = new global::PassKit.Grpc.EventTickets.RedemptionDetails();
        }
        RedemptionDetails.MergeFrom(other.RedemptionDetails);
      }
      validateDetails_.Add(other.validateDetails_);
      if (other.passOverrides_ != null) {
        if (passOverrides_ == null) {
          PassOverrides = new global::PassKit.Grpc.PassOverrides();
        }
        PassOverrides.MergeFrom(other.PassOverrides);
      }
      if (other.passMetaData_ != null) {
        if (passMetaData_ == null) {
          PassMetaData = new global::PassKit.Grpc.Metadata();
        }
        PassMetaData.MergeFrom(other.PassMetaData);
      }
      if (other.created_ != null) {
        if (created_ == null) {
          Created = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Created.MergeFrom(other.Created);
      }
      if (other.updated_ != null) {
        if (updated_ == null) {
          Updated = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Updated.MergeFrom(other.Updated);
      }
      switch (other.EventInfoCase) {
        case EventInfoOneofCase.EventId:
          EventId = other.EventId;
          break;
        case EventInfoOneofCase.Event:
          if (Event == null) {
            Event = new global::PassKit.Grpc.EventTickets.EventLimitedFieldsRequest();
          }
          Event.MergeFrom(other.Event);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EventId = input.ReadString();
            break;
          }
          case 18: {
            global::PassKit.Grpc.EventTickets.EventLimitedFieldsRequest subBuilder = new global::PassKit.Grpc.EventTickets.EventLimitedFieldsRequest();
            if (eventInfoCase_ == EventInfoOneofCase.Event) {
              subBuilder.MergeFrom(Event);
            }
            input.ReadMessage(subBuilder);
            Event = subBuilder;
            break;
          }
          case 26: {
            TicketTypeId = input.ReadString();
            break;
          }
          case 34: {
            TicketNumber = input.ReadString();
            break;
          }
          case 42: {
            OrderNumber = input.ReadString();
            break;
          }
          case 50: {
            GroupingId = input.ReadString();
            break;
          }
          case 58: {
            BarcodeContents = input.ReadString();
            break;
          }
          case 66: {
            if (seatInfo_ == null) {
              SeatInfo = new global::PassKit.Grpc.EventTickets.Seat();
            }
            input.ReadMessage(SeatInfo);
            break;
          }
          case 74: {
            if (faceValue_ == null) {
              FaceValue = new global::PassKit.Grpc.EventTickets.FaceValue();
            }
            input.ReadMessage(FaceValue);
            break;
          }
          case 82: {
            if (person_ == null) {
              Person = new global::PassKit.Grpc.Person();
            }
            input.ReadMessage(Person);
            break;
          }
          case 90: {
            metaData_.AddEntriesFrom(input, _map_metaData_codec);
            break;
          }
          case 96: {
            OptOut = input.ReadBool();
            break;
          }
          case 104: {
            Status = (global::PassKit.Grpc.EventTickets.TicketStatus) input.ReadEnum();
            break;
          }
          case 114: {
            if (expiryDate_ == null) {
              ExpiryDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpiryDate);
            break;
          }
          case 122: {
            if (redemptionDetails_ == null) {
              RedemptionDetails = new global::PassKit.Grpc.EventTickets.RedemptionDetails();
            }
            input.ReadMessage(RedemptionDetails);
            break;
          }
          case 130: {
            validateDetails_.AddEntriesFrom(input, _repeated_validateDetails_codec);
            break;
          }
          case 138: {
            if (passOverrides_ == null) {
              PassOverrides = new global::PassKit.Grpc.PassOverrides();
            }
            input.ReadMessage(PassOverrides);
            break;
          }
          case 146: {
            if (passMetaData_ == null) {
              PassMetaData = new global::PassKit.Grpc.Metadata();
            }
            input.ReadMessage(PassMetaData);
            break;
          }
          case 154: {
            if (created_ == null) {
              Created = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Created);
            break;
          }
          case 162: {
            if (updated_ == null) {
              Updated = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Updated);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            EventId = input.ReadString();
            break;
          }
          case 18: {
            global::PassKit.Grpc.EventTickets.EventLimitedFieldsRequest subBuilder = new global::PassKit.Grpc.EventTickets.EventLimitedFieldsRequest();
            if (eventInfoCase_ == EventInfoOneofCase.Event) {
              subBuilder.MergeFrom(Event);
            }
            input.ReadMessage(subBuilder);
            Event = subBuilder;
            break;
          }
          case 26: {
            TicketTypeId = input.ReadString();
            break;
          }
          case 34: {
            TicketNumber = input.ReadString();
            break;
          }
          case 42: {
            OrderNumber = input.ReadString();
            break;
          }
          case 50: {
            GroupingId = input.ReadString();
            break;
          }
          case 58: {
            BarcodeContents = input.ReadString();
            break;
          }
          case 66: {
            if (seatInfo_ == null) {
              SeatInfo = new global::PassKit.Grpc.EventTickets.Seat();
            }
            input.ReadMessage(SeatInfo);
            break;
          }
          case 74: {
            if (faceValue_ == null) {
              FaceValue = new global::PassKit.Grpc.EventTickets.FaceValue();
            }
            input.ReadMessage(FaceValue);
            break;
          }
          case 82: {
            if (person_ == null) {
              Person = new global::PassKit.Grpc.Person();
            }
            input.ReadMessage(Person);
            break;
          }
          case 90: {
            metaData_.AddEntriesFrom(ref input, _map_metaData_codec);
            break;
          }
          case 96: {
            OptOut = input.ReadBool();
            break;
          }
          case 104: {
            Status = (global::PassKit.Grpc.EventTickets.TicketStatus) input.ReadEnum();
            break;
          }
          case 114: {
            if (expiryDate_ == null) {
              ExpiryDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpiryDate);
            break;
          }
          case 122: {
            if (redemptionDetails_ == null) {
              RedemptionDetails = new global::PassKit.Grpc.EventTickets.RedemptionDetails();
            }
            input.ReadMessage(RedemptionDetails);
            break;
          }
          case 130: {
            validateDetails_.AddEntriesFrom(ref input, _repeated_validateDetails_codec);
            break;
          }
          case 138: {
            if (passOverrides_ == null) {
              PassOverrides = new global::PassKit.Grpc.PassOverrides();
            }
            input.ReadMessage(PassOverrides);
            break;
          }
          case 146: {
            if (passMetaData_ == null) {
              PassMetaData = new global::PassKit.Grpc.Metadata();
            }
            input.ReadMessage(PassMetaData);
            break;
          }
          case 154: {
            if (created_ == null) {
              Created = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Created);
            break;
          }
          case 162: {
            if (updated_ == null) {
              Updated = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Updated);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Response containing system-generated identifiers when a ticket is successfully issued. Required fields: none.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class IssueTicketResponseIds : pb::IMessage<IssueTicketResponseIds>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<IssueTicketResponseIds> _parser = new pb::MessageParser<IssueTicketResponseIds>(() => new IssueTicketResponseIds());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<IssueTicketResponseIds> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.EventTickets.TicketReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public IssueTicketResponseIds() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public IssueTicketResponseIds(IssueTicketResponseIds other) : this() {
      ticketId_ = other.ticketId_;
      productionId_ = other.productionId_;
      venueId_ = other.venueId_;
      ticketTypeId_ = other.ticketTypeId_;
      eventId_ = other.eventId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public IssueTicketResponseIds Clone() {
      return new IssueTicketResponseIds(this);
    }

    /// <summary>Field number for the "ticketId" field.</summary>
    public const int TicketIdFieldNumber = 1;
    private string ticketId_ = "";
    /// <summary>
    /// PassKit generated ticket id (22 characters).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TicketId {
      get { return ticketId_; }
      set {
        ticketId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "productionId" field.</summary>
    public const int ProductionIdFieldNumber = 2;
    private string productionId_ = "";
    /// <summary>
    /// PassKit generated production id (22 characters).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ProductionId {
      get { return productionId_; }
      set {
        productionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "venueId" field.</summary>
    public const int VenueIdFieldNumber = 3;
    private string venueId_ = "";
    /// <summary>
    /// PassKit generated venue id (22 characters).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string VenueId {
      get { return venueId_; }
      set {
        venueId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticketTypeId" field.</summary>
    public const int TicketTypeIdFieldNumber = 4;
    private string ticketTypeId_ = "";
    /// <summary>
    /// PassKit generated ticket type id (22 characters).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TicketTypeId {
      get { return ticketTypeId_; }
      set {
        ticketTypeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "eventId" field.</summary>
    public const int EventIdFieldNumber = 5;
    private string eventId_ = "";
    /// <summary>
    /// PassKit generated event id (22 characters).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string EventId {
      get { return eventId_; }
      set {
        eventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as IssueTicketResponseIds);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(IssueTicketResponseIds other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TicketId != other.TicketId) return false;
      if (ProductionId != other.ProductionId) return false;
      if (VenueId != other.VenueId) return false;
      if (TicketTypeId != other.TicketTypeId) return false;
      if (EventId != other.EventId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (TicketId.Length != 0) hash ^= TicketId.GetHashCode();
      if (ProductionId.Length != 0) hash ^= ProductionId.GetHashCode();
      if (VenueId.Length != 0) hash ^= VenueId.GetHashCode();
      if (TicketTypeId.Length != 0) hash ^= TicketTypeId.GetHashCode();
      if (EventId.Length != 0) hash ^= EventId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TicketId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TicketId);
      }
      if (ProductionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProductionId);
      }
      if (VenueId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(VenueId);
      }
      if (TicketTypeId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TicketTypeId);
      }
      if (EventId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(EventId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TicketId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TicketId);
      }
      if (ProductionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProductionId);
      }
      if (VenueId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(VenueId);
      }
      if (TicketTypeId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TicketTypeId);
      }
      if (EventId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(EventId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (TicketId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TicketId);
      }
      if (ProductionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductionId);
      }
      if (VenueId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VenueId);
      }
      if (TicketTypeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TicketTypeId);
      }
      if (EventId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(IssueTicketResponseIds other) {
      if (other == null) {
        return;
      }
      if (other.TicketId.Length != 0) {
        TicketId = other.TicketId;
      }
      if (other.ProductionId.Length != 0) {
        ProductionId = other.ProductionId;
      }
      if (other.VenueId.Length != 0) {
        VenueId = other.VenueId;
      }
      if (other.TicketTypeId.Length != 0) {
        TicketTypeId = other.TicketTypeId;
      }
      if (other.EventId.Length != 0) {
        EventId = other.EventId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TicketId = input.ReadString();
            break;
          }
          case 18: {
            ProductionId = input.ReadString();
            break;
          }
          case 26: {
            VenueId = input.ReadString();
            break;
          }
          case 34: {
            TicketTypeId = input.ReadString();
            break;
          }
          case 42: {
            EventId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            TicketId = input.ReadString();
            break;
          }
          case 18: {
            ProductionId = input.ReadString();
            break;
          }
          case 26: {
            VenueId = input.ReadString();
            break;
          }
          case 34: {
            TicketTypeId = input.ReadString();
            break;
          }
          case 42: {
            EventId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Request to retrieve a ticket pass (URL or format) by ID, ticket number, or order number. Required fields: ticketId or ticketNumber or orderNumber.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class EventTicketPassRequest : pb::IMessage<EventTicketPassRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventTicketPassRequest> _parser = new pb::MessageParser<EventTicketPassRequest>(() => new EventTicketPassRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<EventTicketPassRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.EventTickets.TicketReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EventTicketPassRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EventTicketPassRequest(EventTicketPassRequest other) : this() {
      format_ = other.format_.Clone();
      switch (other.RequestCase) {
        case RequestOneofCase.TicketId:
          TicketId = other.TicketId.Clone();
          break;
        case RequestOneofCase.TicketNumber:
          TicketNumber = other.TicketNumber.Clone();
          break;
        case RequestOneofCase.OrderNumber:
          OrderNumber = other.OrderNumber.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EventTicketPassRequest Clone() {
      return new EventTicketPassRequest(this);
    }

    /// <summary>Field number for the "ticketId" field.</summary>
    public const int TicketIdFieldNumber = 1;
    /// <summary>
    /// PassKit generated ticket id (22 characters).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Id TicketId {
      get { return requestCase_ == RequestOneofCase.TicketId ? (global::PassKit.Grpc.Id) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.TicketId;
      }
    }

    /// <summary>Field number for the "ticketNumber" field.</summary>
    public const int TicketNumberFieldNumber = 2;
    /// <summary>
    /// Ticket Number.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.EventTickets.TicketNumberRequest TicketNumber {
      get { return requestCase_ == RequestOneofCase.TicketNumber ? (global::PassKit.Grpc.EventTickets.TicketNumberRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.TicketNumber;
      }
    }

    /// <summary>Field number for the "orderNumber" field.</summary>
    public const int OrderNumberFieldNumber = 3;
    /// <summary>
    /// Order Number.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.EventTickets.OrderNumberRequest OrderNumber {
      get { return requestCase_ == RequestOneofCase.OrderNumber ? (global::PassKit.Grpc.EventTickets.OrderNumberRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.OrderNumber;
      }
    }

    /// <summary>Field number for the "format" field.</summary>
    public const int FormatFieldNumber = 4;
    private static readonly pb::FieldCodec<global::PassKit.Grpc.PassBundleFormat> _repeated_format_codec
        = pb::FieldCodec.ForEnum(34, x => (int) x, x => (global::PassKit.Grpc.PassBundleFormat) x);
    private readonly pbc::RepeatedField<global::PassKit.Grpc.PassBundleFormat> format_ = new pbc::RepeatedField<global::PassKit.Grpc.PassBundleFormat>();
    /// <summary>
    /// Optional. If omitted, return the URL to the web pass landing page. Not used when getting or deleting the underlying boarding pass record.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::PassKit.Grpc.PassBundleFormat> Format {
      get { return format_; }
    }

    private object request_;
    /// <summary>Enum of possible cases for the "request" oneof.</summary>
    public enum RequestOneofCase {
      None = 0,
      TicketId = 1,
      TicketNumber = 2,
      OrderNumber = 3,
    }
    private RequestOneofCase requestCase_ = RequestOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RequestOneofCase RequestCase {
      get { return requestCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRequest() {
      requestCase_ = RequestOneofCase.None;
      request_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as EventTicketPassRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(EventTicketPassRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TicketId, other.TicketId)) return false;
      if (!object.Equals(TicketNumber, other.TicketNumber)) return false;
      if (!object.Equals(OrderNumber, other.OrderNumber)) return false;
      if(!format_.Equals(other.format_)) return false;
      if (RequestCase != other.RequestCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (requestCase_ == RequestOneofCase.TicketId) hash ^= TicketId.GetHashCode();
      if (requestCase_ == RequestOneofCase.TicketNumber) hash ^= TicketNumber.GetHashCode();
      if (requestCase_ == RequestOneofCase.OrderNumber) hash ^= OrderNumber.GetHashCode();
      hash ^= format_.GetHashCode();
      hash ^= (int) requestCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (requestCase_ == RequestOneofCase.TicketId) {
        output.WriteRawTag(10);
        output.WriteMessage(TicketId);
      }
      if (requestCase_ == RequestOneofCase.TicketNumber) {
        output.WriteRawTag(18);
        output.WriteMessage(TicketNumber);
      }
      if (requestCase_ == RequestOneofCase.OrderNumber) {
        output.WriteRawTag(26);
        output.WriteMessage(OrderNumber);
      }
      format_.WriteTo(output, _repeated_format_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (requestCase_ == RequestOneofCase.TicketId) {
        output.WriteRawTag(10);
        output.WriteMessage(TicketId);
      }
      if (requestCase_ == RequestOneofCase.TicketNumber) {
        output.WriteRawTag(18);
        output.WriteMessage(TicketNumber);
      }
      if (requestCase_ == RequestOneofCase.OrderNumber) {
        output.WriteRawTag(26);
        output.WriteMessage(OrderNumber);
      }
      format_.WriteTo(ref output, _repeated_format_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (requestCase_ == RequestOneofCase.TicketId) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TicketId);
      }
      if (requestCase_ == RequestOneofCase.TicketNumber) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TicketNumber);
      }
      if (requestCase_ == RequestOneofCase.OrderNumber) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OrderNumber);
      }
      size += format_.CalculateSize(_repeated_format_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(EventTicketPassRequest other) {
      if (other == null) {
        return;
      }
      format_.Add(other.format_);
      switch (other.RequestCase) {
        case RequestOneofCase.TicketId:
          if (TicketId == null) {
            TicketId = new global::PassKit.Grpc.Id();
          }
          TicketId.MergeFrom(other.TicketId);
          break;
        case RequestOneofCase.TicketNumber:
          if (TicketNumber == null) {
            TicketNumber = new global::PassKit.Grpc.EventTickets.TicketNumberRequest();
          }
          TicketNumber.MergeFrom(other.TicketNumber);
          break;
        case RequestOneofCase.OrderNumber:
          if (OrderNumber == null) {
            OrderNumber = new global::PassKit.Grpc.EventTickets.OrderNumberRequest();
          }
          OrderNumber.MergeFrom(other.OrderNumber);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::PassKit.Grpc.Id subBuilder = new global::PassKit.Grpc.Id();
            if (requestCase_ == RequestOneofCase.TicketId) {
              subBuilder.MergeFrom(TicketId);
            }
            input.ReadMessage(subBuilder);
            TicketId = subBuilder;
            break;
          }
          case 18: {
            global::PassKit.Grpc.EventTickets.TicketNumberRequest subBuilder = new global::PassKit.Grpc.EventTickets.TicketNumberRequest();
            if (requestCase_ == RequestOneofCase.TicketNumber) {
              subBuilder.MergeFrom(TicketNumber);
            }
            input.ReadMessage(subBuilder);
            TicketNumber = subBuilder;
            break;
          }
          case 26: {
            global::PassKit.Grpc.EventTickets.OrderNumberRequest subBuilder = new global::PassKit.Grpc.EventTickets.OrderNumberRequest();
            if (requestCase_ == RequestOneofCase.OrderNumber) {
              subBuilder.MergeFrom(OrderNumber);
            }
            input.ReadMessage(subBuilder);
            OrderNumber = subBuilder;
            break;
          }
          case 34:
          case 32: {
            format_.AddEntriesFrom(input, _repeated_format_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::PassKit.Grpc.Id subBuilder = new global::PassKit.Grpc.Id();
            if (requestCase_ == RequestOneofCase.TicketId) {
              subBuilder.MergeFrom(TicketId);
            }
            input.ReadMessage(subBuilder);
            TicketId = subBuilder;
            break;
          }
          case 18: {
            global::PassKit.Grpc.EventTickets.TicketNumberRequest subBuilder = new global::PassKit.Grpc.EventTickets.TicketNumberRequest();
            if (requestCase_ == RequestOneofCase.TicketNumber) {
              subBuilder.MergeFrom(TicketNumber);
            }
            input.ReadMessage(subBuilder);
            TicketNumber = subBuilder;
            break;
          }
          case 26: {
            global::PassKit.Grpc.EventTickets.OrderNumberRequest subBuilder = new global::PassKit.Grpc.EventTickets.OrderNumberRequest();
            if (requestCase_ == RequestOneofCase.OrderNumber) {
              subBuilder.MergeFrom(OrderNumber);
            }
            input.ReadMessage(subBuilder);
            OrderNumber = subBuilder;
            break;
          }
          case 34:
          case 32: {
            format_.AddEntriesFrom(ref input, _repeated_format_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Used to update the ticket holder details of a ticket by ID or ticket number.Required fields: ticketId or ticketNumber, person.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class EventTicketPerson : pb::IMessage<EventTicketPerson>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventTicketPerson> _parser = new pb::MessageParser<EventTicketPerson>(() => new EventTicketPerson());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<EventTicketPerson> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.EventTickets.TicketReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EventTicketPerson() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EventTicketPerson(EventTicketPerson other) : this() {
      person_ = other.person_ != null ? other.person_.Clone() : null;
      switch (other.RequestCase) {
        case RequestOneofCase.TicketId:
          TicketId = other.TicketId.Clone();
          break;
        case RequestOneofCase.TicketNumber:
          TicketNumber = other.TicketNumber.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EventTicketPerson Clone() {
      return new EventTicketPerson(this);
    }

    /// <summary>Field number for the "ticketId" field.</summary>
    public const int TicketIdFieldNumber = 1;
    /// <summary>
    /// PassKit generated ticket id (22 characters).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Id TicketId {
      get { return requestCase_ == RequestOneofCase.TicketId ? (global::PassKit.Grpc.Id) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.TicketId;
      }
    }

    /// <summary>Field number for the "ticketNumber" field.</summary>
    public const int TicketNumberFieldNumber = 2;
    /// <summary>
    /// Ticket Number.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.EventTickets.TicketNumberRequest TicketNumber {
      get { return requestCase_ == RequestOneofCase.TicketNumber ? (global::PassKit.Grpc.EventTickets.TicketNumberRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.TicketNumber;
      }
    }

    /// <summary>Field number for the "person" field.</summary>
    public const int PersonFieldNumber = 5;
    private global::PassKit.Grpc.Person person_;
    /// <summary>
    /// Personal details of the ticket holder.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Person Person {
      get { return person_; }
      set {
        person_ = value;
      }
    }

    private object request_;
    /// <summary>Enum of possible cases for the "request" oneof.</summary>
    public enum RequestOneofCase {
      None = 0,
      TicketId = 1,
      TicketNumber = 2,
    }
    private RequestOneofCase requestCase_ = RequestOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RequestOneofCase RequestCase {
      get { return requestCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRequest() {
      requestCase_ = RequestOneofCase.None;
      request_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as EventTicketPerson);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(EventTicketPerson other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TicketId, other.TicketId)) return false;
      if (!object.Equals(TicketNumber, other.TicketNumber)) return false;
      if (!object.Equals(Person, other.Person)) return false;
      if (RequestCase != other.RequestCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (requestCase_ == RequestOneofCase.TicketId) hash ^= TicketId.GetHashCode();
      if (requestCase_ == RequestOneofCase.TicketNumber) hash ^= TicketNumber.GetHashCode();
      if (person_ != null) hash ^= Person.GetHashCode();
      hash ^= (int) requestCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (requestCase_ == RequestOneofCase.TicketId) {
        output.WriteRawTag(10);
        output.WriteMessage(TicketId);
      }
      if (requestCase_ == RequestOneofCase.TicketNumber) {
        output.WriteRawTag(18);
        output.WriteMessage(TicketNumber);
      }
      if (person_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Person);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (requestCase_ == RequestOneofCase.TicketId) {
        output.WriteRawTag(10);
        output.WriteMessage(TicketId);
      }
      if (requestCase_ == RequestOneofCase.TicketNumber) {
        output.WriteRawTag(18);
        output.WriteMessage(TicketNumber);
      }
      if (person_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Person);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (requestCase_ == RequestOneofCase.TicketId) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TicketId);
      }
      if (requestCase_ == RequestOneofCase.TicketNumber) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TicketNumber);
      }
      if (person_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Person);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(EventTicketPerson other) {
      if (other == null) {
        return;
      }
      if (other.person_ != null) {
        if (person_ == null) {
          Person = new global::PassKit.Grpc.Person();
        }
        Person.MergeFrom(other.Person);
      }
      switch (other.RequestCase) {
        case RequestOneofCase.TicketId:
          if (TicketId == null) {
            TicketId = new global::PassKit.Grpc.Id();
          }
          TicketId.MergeFrom(other.TicketId);
          break;
        case RequestOneofCase.TicketNumber:
          if (TicketNumber == null) {
            TicketNumber = new global::PassKit.Grpc.EventTickets.TicketNumberRequest();
          }
          TicketNumber.MergeFrom(other.TicketNumber);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::PassKit.Grpc.Id subBuilder = new global::PassKit.Grpc.Id();
            if (requestCase_ == RequestOneofCase.TicketId) {
              subBuilder.MergeFrom(TicketId);
            }
            input.ReadMessage(subBuilder);
            TicketId = subBuilder;
            break;
          }
          case 18: {
            global::PassKit.Grpc.EventTickets.TicketNumberRequest subBuilder = new global::PassKit.Grpc.EventTickets.TicketNumberRequest();
            if (requestCase_ == RequestOneofCase.TicketNumber) {
              subBuilder.MergeFrom(TicketNumber);
            }
            input.ReadMessage(subBuilder);
            TicketNumber = subBuilder;
            break;
          }
          case 42: {
            if (person_ == null) {
              Person = new global::PassKit.Grpc.Person();
            }
            input.ReadMessage(Person);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::PassKit.Grpc.Id subBuilder = new global::PassKit.Grpc.Id();
            if (requestCase_ == RequestOneofCase.TicketId) {
              subBuilder.MergeFrom(TicketId);
            }
            input.ReadMessage(subBuilder);
            TicketId = subBuilder;
            break;
          }
          case 18: {
            global::PassKit.Grpc.EventTickets.TicketNumberRequest subBuilder = new global::PassKit.Grpc.EventTickets.TicketNumberRequest();
            if (requestCase_ == RequestOneofCase.TicketNumber) {
              subBuilder.MergeFrom(TicketNumber);
            }
            input.ReadMessage(subBuilder);
            TicketNumber = subBuilder;
            break;
          }
          case 42: {
            if (person_ == null) {
              Person = new global::PassKit.Grpc.Person();
            }
            input.ReadMessage(Person);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
