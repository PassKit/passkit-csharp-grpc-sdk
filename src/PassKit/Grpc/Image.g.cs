// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: io/image/image.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PassKit.Grpc {

  /// <summary>Holder for reflection information generated from io/image/image.proto</summary>
  public static partial class ImageReflection {

    #region Descriptor
    /// <summary>File descriptor for io/image/image.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ImageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRpby9pbWFnZS9pbWFnZS5wcm90bxICaW8aHGlvL2NvbW1vbi9sb2NhbGl6",
            "YXRpb24ucHJvdG8aLnByb3RvYy1nZW4tb3BlbmFwaXYyL29wdGlvbnMvYW5u",
            "b3RhdGlvbnMucHJvdG8aH2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJv",
            "dG8isgMKCEltYWdlSWRzEgwKBGljb24YASABKAkSDAoEbG9nbxgCIAEoCRIR",
            "CglhcHBsZUxvZ28YAyABKAkSDAoEaGVybxgEIAEoCRISCgpldmVudFN0cmlw",
            "GAUgASgJEg0KBXN0cmlwGAYgASgJEhEKCXRodW1ibmFpbBgHIAEoCRISCgpi",
            "YWNrZ3JvdW5kGAggASgJEg4KBmZvb3RlchgJIAEoCRIQCghzZWN1cml0eRgK",
            "IAEoCRIRCglwcml2aWxlZ2UYCyABKAkSFwoPYWlybGluZUFsbGlhbmNlGAwg",
            "ASgJEhcKD3BlcnNvbmFsaXphdGlvbhgNIAEoCRIOCgZiYW5uZXIYDiABKAkS",
            "DwoHbWVzc2FnZRgPIAEoCRIPCgdwcm9maWxlGBAgASgJEhAKCGFwcEltYWdl",
            "GBEgASgJEhQKDHN0YW1wZWRJbWFnZRgSIAEoCRIWCg51bnN0YW1wZWRJbWFn",
            "ZRgTIAEoCRISCgpzdGFtcEltYWdlGBQgASgJOjKSQS8KLSoJSW1hZ2UgSWRz",
            "MhlUaGlzIG1hbmFnZXMgaW1hZ2VzIGJ5IGlk0gEEaWNvbiK/CQoJSW1hZ2VE",
            "YXRhEgwKBGljb24YASABKAkSDAoEbG9nbxgCIAEoCRIRCglhcHBsZUxvZ28Y",
            "AyABKAkSDAoEaGVybxgEIAEoCRISCgpldmVudFN0cmlwGAUgASgJEg0KBXN0",
            "cmlwGAYgASgJEhEKCXRodW1ibmFpbBgHIAEoCRISCgpiYWNrZ3JvdW5kGAgg",
            "ASgJEg4KBmZvb3RlchgJIAEoCRIQCghzZWN1cml0eRgKIAEoCRIRCglwcml2",
            "aWxlZ2UYCyABKAkSFwoPYWlybGluZUFsbGlhbmNlGAwgASgJEhcKD3BlcnNv",
            "bmFsaXphdGlvbhgNIAEoCRIOCgZiYW5uZXIYDiABKAkSDwoHbWVzc2FnZRgP",
            "IAEoCRIPCgdwcm9maWxlGBAgASgJEhAKCGFwcEltYWdlGBEgASgJEhQKDHN0",
            "YW1wZWRJbWFnZRgSIAEoCRIWCg51bnN0YW1wZWRJbWFnZRgTIAEoCRIpCgtz",
            "dGFtcENvbmZpZxgUIAEoCzIULmlvLlN0YW1wSW1hZ2VDb25maWcSKgoNbG9j",
            "YWxpemVkSWNvbhgfIAEoCzITLmlvLkxvY2FsaXplZFN0cmluZxIqCg1sb2Nh",
            "bGl6ZWRMb2dvGCAgASgLMhMuaW8uTG9jYWxpemVkU3RyaW5nEi8KEmxvY2Fs",
            "aXplZEFwcGxlTG9nbxghIAEoCzITLmlvLkxvY2FsaXplZFN0cmluZxIqCg1s",
            "b2NhbGl6ZWRIZXJvGCIgASgLMhMuaW8uTG9jYWxpemVkU3RyaW5nEjAKE2xv",
            "Y2FsaXplZEV2ZW50U3RyaXAYIyABKAsyEy5pby5Mb2NhbGl6ZWRTdHJpbmcS",
            "KwoObG9jYWxpemVkU3RyaXAYJCABKAsyEy5pby5Mb2NhbGl6ZWRTdHJpbmcS",
            "LwoSbG9jYWxpemVkVGh1bWJuYWlsGCUgASgLMhMuaW8uTG9jYWxpemVkU3Ry",
            "aW5nEjAKE2xvY2FsaXplZEJhY2tncm91bmQYJiABKAsyEy5pby5Mb2NhbGl6",
            "ZWRTdHJpbmcSLAoPbG9jYWxpemVkRm9vdGVyGCcgASgLMhMuaW8uTG9jYWxp",
            "emVkU3RyaW5nEi4KEWxvY2FsaXplZFNlY3VyaXR5GCggASgLMhMuaW8uTG9j",
            "YWxpemVkU3RyaW5nEi8KEmxvY2FsaXplZFByaXZpbGVnZRgpIAEoCzITLmlv",
            "LkxvY2FsaXplZFN0cmluZxI1Chhsb2NhbGl6ZWRBaXJsaW5lQWxsaWFuY2UY",
            "KiABKAsyEy5pby5Mb2NhbGl6ZWRTdHJpbmcSNQoYbG9jYWxpemVkUGVyc29u",
            "YWxpemF0aW9uGCsgASgLMhMuaW8uTG9jYWxpemVkU3RyaW5nEiwKD2xvY2Fs",
            "aXplZEJhbm5lchgsIAEoCzITLmlvLkxvY2FsaXplZFN0cmluZxItChBsb2Nh",
            "bGl6ZWRNZXNzYWdlGC0gASgLMhMuaW8uTG9jYWxpemVkU3RyaW5nOlaSQVMK",
            "USoKSW1hZ2UgRGF0YTJDSW1hZ2UgZGF0YSBjYW4gYmUgcHJvdmlkZWQgYXMg",
            "ZWl0aGVyIGEgdXJsIG9yIGJhc2UgNjQgZW5jb2RlZCBkYXRhLiLpAQoLSW1h",
            "Z2VSZWNvcmQSCgoCaWQYASABKAkSDAoEbmFtZRgCIAEoCRILCgN1cmwYAyAB",
            "KAkSGQoDdXNlGAUgASgOMgwuaW8uSW1hZ2VVc2USIwoJbGFuZ3VhZ2VzGAYg",
            "AygOMhAuaW8uTGFuZ3VhZ2VDb2RlEhUKDW93bmVyVXNlcm5hbWUYByABKAkS",
            "LQoJY3JlYXRlZEF0GAggASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFt",
            "cBItCgl1cGRhdGVkQXQYCSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0",
            "YW1wIiYKEVByb2ZpbGVJbWFnZUlucHV0EhEKCWltYWdlRGF0YRgBIAEoCSIx",
            "Cg5NdWx0aXBsZUltYWdlcxIfCgZpbWFnZXMYASADKAsyDy5pby5JbWFnZVJl",
            "Y29yZCIvChFTdGFtcEltYWdlUmVxdWVzdBIKCgJpZBgBIAEoCRIOCgZzdGF0",
            "dXMYAiABKAQijAEKEENyZWF0ZUltYWdlSW5wdXQSDAoEbmFtZRgBIAEoCRIg",
            "CglpbWFnZURhdGEYAiABKAsyDS5pby5JbWFnZURhdGE6SJJBRQpDKhJDcmVh",
            "dGUgSW1hZ2UgSW5wdXQyGlRoaXMgY3JlYXRlcyBpbWFnZSByZWNvcmQu0gEE",
            "bmFtZdIBCWltYWdlRGF0YSLCAQoQVXBkYXRlSW1hZ2VJbnB1dBIKCgJpZBgB",
            "IAEoCRIMCgRuYW1lGAIgASgJEhEKCWltYWdlRGF0YRgDIAEoCRIvChJsb2Nh",
            "bGl6ZWRJbWFnZURhdGEYBCABKAsyEy5pby5Mb2NhbGl6ZWRTdHJpbmc6UJJB",
            "TQpLKhJVcGRhdGUgSW1hZ2UgSW5wdXQyMFRoaXMgbWFuYWdlcyBpbWFnZXMg",
            "c2V0IGZvciBkaWZmZXJlbnQgbGFuZ3VhZ2VzLtIBAmlkIhwKC0ltYWdlQnVu",
            "ZGxlEg0KBWltYWdlGAEgASgMIpsBChNMb2NhbGl6ZWRJbWFnZUlucHV0EgoK",
            "AmlkGAEgASgJEhQKDGxhbmd1YWdlQ29kZRgCIAEoCTpikkFfCl0qFUxvY2Fs",
            "aXplZCBJbWFnZSBJbnB1dDIwVGhpcyBtYW5hZ2VzIGltYWdlcyBzZXQgZm9y",
            "IGRpZmZlcmVudCBsYW5ndWFnZXMu0gECaWTSAQxsYW5ndWFnZUNvZGUizgQK",
            "EFN0YW1wSW1hZ2VDb25maWcSCgoCaWQYASABKAkSDwoHcGFkZGluZxgCIAEo",
            "AhITCgt0b3RhbFN0YW1wcxgDIAEoDRISCgpzdGFtcEltYWdlGAQgASgJEhQK",
            "DHVuc3RhbXBJbWFnZRgFIAEoCRIXCg9iYWNrZ3JvdW5kSW1hZ2UYBiABKAkS",
            "FwoPYmFja2dyb3VuZENvbG9yGAcgASgJEhkKEWJhY2tncm91bmRPcGFjaXR5",
            "GAggASgCEhIKCnN0YW1wQ29sb3IYCSABKAkSFAoMc3RhbXBPcGFjaXR5GAog",
            "ASgCEhQKDHVuc3RhbXBDb2xvchgLIAEoCRIWCg51bnN0YW1wT3BhY2l0eRgM",
            "IAEoAhIUCgxwbGFjZWhvbGRlcnMYDSABKAgSGAoQcGxhY2Vob2xkZXJDb2xv",
            "chgOIAEoCRIaChJwbGFjZWhvbGRlck9wYWNpdHkYDyABKAISHgoWcGxhY2Vo",
            "b2xkZXJCb3JkZXJDb2xvchgQIAEoCRIgChhwbGFjZWhvbGRlckJvcmRlck9w",
            "YWNpdHkYESABKAISGgoScmV3YXJkUGxhY2Vob2xkZXJzGBIgASgIEhkKEXJl",
            "d2FyZEJvcmRlckNvbG9yGBMgASgJEhsKE3Jld2FyZEJvcmRlck9wYWNpdHkY",
            "FCABKAISHQoVcmV3YXJkQmFja2dyb3VuZENvbG9yGBUgASgJEh8KF3Jld2Fy",
            "ZEJhY2tncm91bmRPcGFjaXR5GBYgASgCEhcKD3Jld2FyZFBvc2l0aW9ucxgX",
            "IAEoBCquAgoISW1hZ2VVc2USCAoEaWNvbhAAEggKBGxvZ28QARINCglhcHBs",
            "ZUxvZ28QAhIICgRoZXJvEAMSDgoKZXZlbnRTdHJpcBAEEgkKBXN0cmlwEAUS",
            "DQoJdGh1bWJuYWlsEAYSDgoKYmFja2dyb3VuZBAHEgoKBmZvb3RlchAIEgwK",
            "CHNlY3VyaXR5EAkSDQoJcHJpdmlsZWdlEAoSEwoPYWlybGluZUFsbGlhbmNl",
            "EAsSEwoPcGVyc29uYWxpemF0aW9uEAwSCgoGYmFubmVyEA0SCwoHbWVzc2Fn",
            "ZRAOEgsKB3Byb2ZpbGUQDxIMCghhcHBJbWFnZRAQEhAKDHN0YW1wZWRJbWFn",
            "ZRASEhIKDnVuc3RhbXBlZEltYWdlEBMSDgoKc3RhbXBJbWFnZRAUQkcKEGNv",
            "bS5wYXNza2l0LmdycGNaJHN0YXNoLnBhc3NraXQuY29tL2lvL21vZGVsL3Nk",
            "ay9nby9pb6oCDFBhc3NLaXQuR3JwY2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::PassKit.Grpc.LocalizationReflection.Descriptor, global::PassKit.Grpc.Gateway.ProtocGenOpenapiv2.Options.AnnotationsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PassKit.Grpc.ImageUse), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.ImageIds), global::PassKit.Grpc.ImageIds.Parser, new[]{ "Icon", "Logo", "AppleLogo", "Hero", "EventStrip", "Strip", "Thumbnail", "Background", "Footer", "Security", "Privilege", "AirlineAlliance", "Personalization", "Banner", "Message", "Profile", "AppImage", "StampedImage", "UnstampedImage", "StampImage" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.ImageData), global::PassKit.Grpc.ImageData.Parser, new[]{ "Icon", "Logo", "AppleLogo", "Hero", "EventStrip", "Strip", "Thumbnail", "Background", "Footer", "Security", "Privilege", "AirlineAlliance", "Personalization", "Banner", "Message", "Profile", "AppImage", "StampedImage", "UnstampedImage", "StampConfig", "LocalizedIcon", "LocalizedLogo", "LocalizedAppleLogo", "LocalizedHero", "LocalizedEventStrip", "LocalizedStrip", "LocalizedThumbnail", "LocalizedBackground", "LocalizedFooter", "LocalizedSecurity", "LocalizedPrivilege", "LocalizedAirlineAlliance", "LocalizedPersonalization", "LocalizedBanner", "LocalizedMessage" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.ImageRecord), global::PassKit.Grpc.ImageRecord.Parser, new[]{ "Id", "Name", "Url", "Use", "Languages", "OwnerUsername", "CreatedAt", "UpdatedAt" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.ProfileImageInput), global::PassKit.Grpc.ProfileImageInput.Parser, new[]{ "ImageData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.MultipleImages), global::PassKit.Grpc.MultipleImages.Parser, new[]{ "Images" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.StampImageRequest), global::PassKit.Grpc.StampImageRequest.Parser, new[]{ "Id", "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.CreateImageInput), global::PassKit.Grpc.CreateImageInput.Parser, new[]{ "Name", "ImageData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.UpdateImageInput), global::PassKit.Grpc.UpdateImageInput.Parser, new[]{ "Id", "Name", "ImageData", "LocalizedImageData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.ImageBundle), global::PassKit.Grpc.ImageBundle.Parser, new[]{ "Image" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.LocalizedImageInput), global::PassKit.Grpc.LocalizedImageInput.Parser, new[]{ "Id", "LanguageCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.StampImageConfig), global::PassKit.Grpc.StampImageConfig.Parser, new[]{ "Id", "Padding", "TotalStamps", "StampImage", "UnstampImage", "BackgroundImage", "BackgroundColor", "BackgroundOpacity", "StampColor", "StampOpacity", "UnstampColor", "UnstampOpacity", "Placeholders", "PlaceholderColor", "PlaceholderOpacity", "PlaceholderBorderColor", "PlaceholderBorderOpacity", "RewardPlaceholders", "RewardBorderColor", "RewardBorderOpacity", "RewardBackgroundColor", "RewardBackgroundOpacity", "RewardPositions" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ImageUse {
    /// <summary>
    /// Mandatory icon, used in Apple Wallet lock screen (87px x 87px).
    /// </summary>
    [pbr::OriginalName("icon")] Icon = 0,
    /// <summary>
    /// Logo is circle-cropped by Google Pay, a 15% safety margin is recommended (660px x 660px).
    /// </summary>
    [pbr::OriginalName("logo")] Logo = 1,
    /// <summary>
    /// Apple logo can be used where a rectangular design is preferred for Apple Passes only.  If omitted, the square
    /// logo image will be used.  (&lt;=480px x 150px).
    /// </summary>
    [pbr::OriginalName("appleLogo")] AppleLogo = 2,
    /// <summary>
    /// Hero is the Google Pay strip and is also used in the dialog box when installing (1032px x 336px).
    /// </summary>
    [pbr::OriginalName("hero")] Hero = 3,
    /// <summary>
    /// Apple Wallet strip image for EventTicket pass types (1125px x 294px).
    /// </summary>
    [pbr::OriginalName("eventStrip")] EventStrip = 4,
    /// <summary>
    /// Apple Wallet strip image for other pass types with a  strip image (1125px x 432px).
    /// </summary>
    [pbr::OriginalName("strip")] Strip = 5,
    /// <summary>
    /// Used on Membership passes and Apple event tickets with a background image
    /// (>=320 x >=320 in a ratio range of 2:3-3:2).
    /// </summary>
    [pbr::OriginalName("thumbnail")] Thumbnail = 6,
    /// <summary>
    /// used only be Apple Event Ticket designs, this image is blurred to form a background and so can be a low quality
    /// image.  Note it may also be slightly cropped on some devices (180px x 220px).
    /// </summary>
    [pbr::OriginalName("background")] Background = 7,
    /// <summary>
    /// displays above the barcode for Apple Wallet Boarding pass tickets (858px x 45px).
    /// </summary>
    [pbr::OriginalName("footer")] Footer = 8,
    /// <summary>
    /// Google Pay - used to denote a security program on boarding pass types (E.g. TSA PreCheck®).  Width of 1600px is.
    /// shared with the boarding privilege logo (&lt;=1600px x 80px).
    /// </summary>
    [pbr::OriginalName("security")] Security = 9,
    /// <summary>
    /// Google Pay - used to denote a boarding privilege.  Width of 1600px is shared with the security program logo.
    /// (&lt;=1600px x 80px)
    /// </summary>
    [pbr::OriginalName("privilege")] Privilege = 10,
    /// <summary>
    /// Google Pay - used to denote airline alliance on boarding pass types (&lt;=1600px x 80px).
    /// </summary>
    [pbr::OriginalName("airlineAlliance")] AirlineAlliance = 11,
    /// <summary>
    /// For Apple Pay NFC passes whitelisted for personalization. Image is displayed after terms are presented
    /// (&lt;=450px x 120px).
    /// </summary>
    [pbr::OriginalName("personalization")] Personalization = 12,
    /// <summary>
    /// used on a landing page or email.  Image has no size constraints and will be treated as @2x pixel density.
    /// </summary>
    [pbr::OriginalName("banner")] Banner = 13,
    /// <summary>
    /// used for Google Pay in wallet promotional messages - for Apple Pay, the message will be rendered on a mobile
    /// website (1860px x &lt;=930px).
    /// </summary>
    [pbr::OriginalName("message")] Message = 14,
    /// <summary>
    /// used for user Profile images (300px x 300px).
    /// </summary>
    [pbr::OriginalName("profile")] Profile = 15,
    /// <summary>
    /// used for user App images in Google Pay (Google approval required, 300px x 300px).
    /// </summary>
    [pbr::OriginalName("appImage")] AppImage = 16,
    /// <summary>
    /// used for custom stamped images.
    /// </summary>
    [pbr::OriginalName("stampedImage")] StampedImage = 18,
    /// <summary>
    /// used for custom unstamped images.
    /// </summary>
    [pbr::OriginalName("unstampedImage")] UnstampedImage = 19,
    /// <summary>
    /// used for stamp / punch card type images. Indicates that the image has a stamp image config record.
    /// </summary>
    [pbr::OriginalName("stampImage")] StampImage = 20,
  }

  #endregion

  #region Messages
  /// <summary>
  /// See image 'Use' enum for descriptions and sizes.
  /// </summary>
  public sealed partial class ImageIds : pb::IMessage<ImageIds>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ImageIds> _parser = new pb::MessageParser<ImageIds>(() => new ImageIds());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageIds> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.ImageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageIds() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageIds(ImageIds other) : this() {
      icon_ = other.icon_;
      logo_ = other.logo_;
      appleLogo_ = other.appleLogo_;
      hero_ = other.hero_;
      eventStrip_ = other.eventStrip_;
      strip_ = other.strip_;
      thumbnail_ = other.thumbnail_;
      background_ = other.background_;
      footer_ = other.footer_;
      security_ = other.security_;
      privilege_ = other.privilege_;
      airlineAlliance_ = other.airlineAlliance_;
      personalization_ = other.personalization_;
      banner_ = other.banner_;
      message_ = other.message_;
      profile_ = other.profile_;
      appImage_ = other.appImage_;
      stampedImage_ = other.stampedImage_;
      unstampedImage_ = other.unstampedImage_;
      stampImage_ = other.stampImage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageIds Clone() {
      return new ImageIds(this);
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 1;
    private string icon_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "logo" field.</summary>
    public const int LogoFieldNumber = 2;
    private string logo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Logo {
      get { return logo_; }
      set {
        logo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "appleLogo" field.</summary>
    public const int AppleLogoFieldNumber = 3;
    private string appleLogo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppleLogo {
      get { return appleLogo_; }
      set {
        appleLogo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hero" field.</summary>
    public const int HeroFieldNumber = 4;
    private string hero_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hero {
      get { return hero_; }
      set {
        hero_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "eventStrip" field.</summary>
    public const int EventStripFieldNumber = 5;
    private string eventStrip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventStrip {
      get { return eventStrip_; }
      set {
        eventStrip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "strip" field.</summary>
    public const int StripFieldNumber = 6;
    private string strip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Strip {
      get { return strip_; }
      set {
        strip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "thumbnail" field.</summary>
    public const int ThumbnailFieldNumber = 7;
    private string thumbnail_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Thumbnail {
      get { return thumbnail_; }
      set {
        thumbnail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "background" field.</summary>
    public const int BackgroundFieldNumber = 8;
    private string background_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Background {
      get { return background_; }
      set {
        background_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "footer" field.</summary>
    public const int FooterFieldNumber = 9;
    private string footer_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Footer {
      get { return footer_; }
      set {
        footer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "security" field.</summary>
    public const int SecurityFieldNumber = 10;
    private string security_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Security {
      get { return security_; }
      set {
        security_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "privilege" field.</summary>
    public const int PrivilegeFieldNumber = 11;
    private string privilege_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Privilege {
      get { return privilege_; }
      set {
        privilege_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "airlineAlliance" field.</summary>
    public const int AirlineAllianceFieldNumber = 12;
    private string airlineAlliance_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AirlineAlliance {
      get { return airlineAlliance_; }
      set {
        airlineAlliance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "personalization" field.</summary>
    public const int PersonalizationFieldNumber = 13;
    private string personalization_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Personalization {
      get { return personalization_; }
      set {
        personalization_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "banner" field.</summary>
    public const int BannerFieldNumber = 14;
    private string banner_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Banner {
      get { return banner_; }
      set {
        banner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 15;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "profile" field.</summary>
    public const int ProfileFieldNumber = 16;
    private string profile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Profile {
      get { return profile_; }
      set {
        profile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "appImage" field.</summary>
    public const int AppImageFieldNumber = 17;
    private string appImage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppImage {
      get { return appImage_; }
      set {
        appImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stampedImage" field.</summary>
    public const int StampedImageFieldNumber = 18;
    private string stampedImage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StampedImage {
      get { return stampedImage_; }
      set {
        stampedImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unstampedImage" field.</summary>
    public const int UnstampedImageFieldNumber = 19;
    private string unstampedImage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnstampedImage {
      get { return unstampedImage_; }
      set {
        unstampedImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stampImage" field.</summary>
    public const int StampImageFieldNumber = 20;
    private string stampImage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StampImage {
      get { return stampImage_; }
      set {
        stampImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageIds);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageIds other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Icon != other.Icon) return false;
      if (Logo != other.Logo) return false;
      if (AppleLogo != other.AppleLogo) return false;
      if (Hero != other.Hero) return false;
      if (EventStrip != other.EventStrip) return false;
      if (Strip != other.Strip) return false;
      if (Thumbnail != other.Thumbnail) return false;
      if (Background != other.Background) return false;
      if (Footer != other.Footer) return false;
      if (Security != other.Security) return false;
      if (Privilege != other.Privilege) return false;
      if (AirlineAlliance != other.AirlineAlliance) return false;
      if (Personalization != other.Personalization) return false;
      if (Banner != other.Banner) return false;
      if (Message != other.Message) return false;
      if (Profile != other.Profile) return false;
      if (AppImage != other.AppImage) return false;
      if (StampedImage != other.StampedImage) return false;
      if (UnstampedImage != other.UnstampedImage) return false;
      if (StampImage != other.StampImage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      if (Logo.Length != 0) hash ^= Logo.GetHashCode();
      if (AppleLogo.Length != 0) hash ^= AppleLogo.GetHashCode();
      if (Hero.Length != 0) hash ^= Hero.GetHashCode();
      if (EventStrip.Length != 0) hash ^= EventStrip.GetHashCode();
      if (Strip.Length != 0) hash ^= Strip.GetHashCode();
      if (Thumbnail.Length != 0) hash ^= Thumbnail.GetHashCode();
      if (Background.Length != 0) hash ^= Background.GetHashCode();
      if (Footer.Length != 0) hash ^= Footer.GetHashCode();
      if (Security.Length != 0) hash ^= Security.GetHashCode();
      if (Privilege.Length != 0) hash ^= Privilege.GetHashCode();
      if (AirlineAlliance.Length != 0) hash ^= AirlineAlliance.GetHashCode();
      if (Personalization.Length != 0) hash ^= Personalization.GetHashCode();
      if (Banner.Length != 0) hash ^= Banner.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (Profile.Length != 0) hash ^= Profile.GetHashCode();
      if (AppImage.Length != 0) hash ^= AppImage.GetHashCode();
      if (StampedImage.Length != 0) hash ^= StampedImage.GetHashCode();
      if (UnstampedImage.Length != 0) hash ^= UnstampedImage.GetHashCode();
      if (StampImage.Length != 0) hash ^= StampImage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Icon.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Icon);
      }
      if (Logo.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Logo);
      }
      if (AppleLogo.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AppleLogo);
      }
      if (Hero.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Hero);
      }
      if (EventStrip.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(EventStrip);
      }
      if (Strip.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Strip);
      }
      if (Thumbnail.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Thumbnail);
      }
      if (Background.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Background);
      }
      if (Footer.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Footer);
      }
      if (Security.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Security);
      }
      if (Privilege.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Privilege);
      }
      if (AirlineAlliance.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(AirlineAlliance);
      }
      if (Personalization.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Personalization);
      }
      if (Banner.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Banner);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Message);
      }
      if (Profile.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Profile);
      }
      if (AppImage.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(AppImage);
      }
      if (StampedImage.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(StampedImage);
      }
      if (UnstampedImage.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(UnstampedImage);
      }
      if (StampImage.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(StampImage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Icon.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Icon);
      }
      if (Logo.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Logo);
      }
      if (AppleLogo.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AppleLogo);
      }
      if (Hero.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Hero);
      }
      if (EventStrip.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(EventStrip);
      }
      if (Strip.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Strip);
      }
      if (Thumbnail.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Thumbnail);
      }
      if (Background.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Background);
      }
      if (Footer.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Footer);
      }
      if (Security.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Security);
      }
      if (Privilege.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Privilege);
      }
      if (AirlineAlliance.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(AirlineAlliance);
      }
      if (Personalization.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Personalization);
      }
      if (Banner.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Banner);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Message);
      }
      if (Profile.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Profile);
      }
      if (AppImage.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(AppImage);
      }
      if (StampedImage.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(StampedImage);
      }
      if (UnstampedImage.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(UnstampedImage);
      }
      if (StampImage.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(StampImage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (Logo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Logo);
      }
      if (AppleLogo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppleLogo);
      }
      if (Hero.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hero);
      }
      if (EventStrip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventStrip);
      }
      if (Strip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Strip);
      }
      if (Thumbnail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Thumbnail);
      }
      if (Background.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Background);
      }
      if (Footer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Footer);
      }
      if (Security.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Security);
      }
      if (Privilege.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Privilege);
      }
      if (AirlineAlliance.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AirlineAlliance);
      }
      if (Personalization.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Personalization);
      }
      if (Banner.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Banner);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Profile.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Profile);
      }
      if (AppImage.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AppImage);
      }
      if (StampedImage.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StampedImage);
      }
      if (UnstampedImage.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UnstampedImage);
      }
      if (StampImage.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StampImage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageIds other) {
      if (other == null) {
        return;
      }
      if (other.Icon.Length != 0) {
        Icon = other.Icon;
      }
      if (other.Logo.Length != 0) {
        Logo = other.Logo;
      }
      if (other.AppleLogo.Length != 0) {
        AppleLogo = other.AppleLogo;
      }
      if (other.Hero.Length != 0) {
        Hero = other.Hero;
      }
      if (other.EventStrip.Length != 0) {
        EventStrip = other.EventStrip;
      }
      if (other.Strip.Length != 0) {
        Strip = other.Strip;
      }
      if (other.Thumbnail.Length != 0) {
        Thumbnail = other.Thumbnail;
      }
      if (other.Background.Length != 0) {
        Background = other.Background;
      }
      if (other.Footer.Length != 0) {
        Footer = other.Footer;
      }
      if (other.Security.Length != 0) {
        Security = other.Security;
      }
      if (other.Privilege.Length != 0) {
        Privilege = other.Privilege;
      }
      if (other.AirlineAlliance.Length != 0) {
        AirlineAlliance = other.AirlineAlliance;
      }
      if (other.Personalization.Length != 0) {
        Personalization = other.Personalization;
      }
      if (other.Banner.Length != 0) {
        Banner = other.Banner;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.Profile.Length != 0) {
        Profile = other.Profile;
      }
      if (other.AppImage.Length != 0) {
        AppImage = other.AppImage;
      }
      if (other.StampedImage.Length != 0) {
        StampedImage = other.StampedImage;
      }
      if (other.UnstampedImage.Length != 0) {
        UnstampedImage = other.UnstampedImage;
      }
      if (other.StampImage.Length != 0) {
        StampImage = other.StampImage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Icon = input.ReadString();
            break;
          }
          case 18: {
            Logo = input.ReadString();
            break;
          }
          case 26: {
            AppleLogo = input.ReadString();
            break;
          }
          case 34: {
            Hero = input.ReadString();
            break;
          }
          case 42: {
            EventStrip = input.ReadString();
            break;
          }
          case 50: {
            Strip = input.ReadString();
            break;
          }
          case 58: {
            Thumbnail = input.ReadString();
            break;
          }
          case 66: {
            Background = input.ReadString();
            break;
          }
          case 74: {
            Footer = input.ReadString();
            break;
          }
          case 82: {
            Security = input.ReadString();
            break;
          }
          case 90: {
            Privilege = input.ReadString();
            break;
          }
          case 98: {
            AirlineAlliance = input.ReadString();
            break;
          }
          case 106: {
            Personalization = input.ReadString();
            break;
          }
          case 114: {
            Banner = input.ReadString();
            break;
          }
          case 122: {
            Message = input.ReadString();
            break;
          }
          case 130: {
            Profile = input.ReadString();
            break;
          }
          case 138: {
            AppImage = input.ReadString();
            break;
          }
          case 146: {
            StampedImage = input.ReadString();
            break;
          }
          case 154: {
            UnstampedImage = input.ReadString();
            break;
          }
          case 162: {
            StampImage = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Icon = input.ReadString();
            break;
          }
          case 18: {
            Logo = input.ReadString();
            break;
          }
          case 26: {
            AppleLogo = input.ReadString();
            break;
          }
          case 34: {
            Hero = input.ReadString();
            break;
          }
          case 42: {
            EventStrip = input.ReadString();
            break;
          }
          case 50: {
            Strip = input.ReadString();
            break;
          }
          case 58: {
            Thumbnail = input.ReadString();
            break;
          }
          case 66: {
            Background = input.ReadString();
            break;
          }
          case 74: {
            Footer = input.ReadString();
            break;
          }
          case 82: {
            Security = input.ReadString();
            break;
          }
          case 90: {
            Privilege = input.ReadString();
            break;
          }
          case 98: {
            AirlineAlliance = input.ReadString();
            break;
          }
          case 106: {
            Personalization = input.ReadString();
            break;
          }
          case 114: {
            Banner = input.ReadString();
            break;
          }
          case 122: {
            Message = input.ReadString();
            break;
          }
          case 130: {
            Profile = input.ReadString();
            break;
          }
          case 138: {
            AppImage = input.ReadString();
            break;
          }
          case 146: {
            StampedImage = input.ReadString();
            break;
          }
          case 154: {
            UnstampedImage = input.ReadString();
            break;
          }
          case 162: {
            StampImage = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Images strings can be either a base64 image or a url. See image 'Use' enum for descriptions and sizes.
  /// </summary>
  public sealed partial class ImageData : pb::IMessage<ImageData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ImageData> _parser = new pb::MessageParser<ImageData>(() => new ImageData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.ImageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageData(ImageData other) : this() {
      icon_ = other.icon_;
      logo_ = other.logo_;
      appleLogo_ = other.appleLogo_;
      hero_ = other.hero_;
      eventStrip_ = other.eventStrip_;
      strip_ = other.strip_;
      thumbnail_ = other.thumbnail_;
      background_ = other.background_;
      footer_ = other.footer_;
      security_ = other.security_;
      privilege_ = other.privilege_;
      airlineAlliance_ = other.airlineAlliance_;
      personalization_ = other.personalization_;
      banner_ = other.banner_;
      message_ = other.message_;
      profile_ = other.profile_;
      appImage_ = other.appImage_;
      stampedImage_ = other.stampedImage_;
      unstampedImage_ = other.unstampedImage_;
      stampConfig_ = other.stampConfig_ != null ? other.stampConfig_.Clone() : null;
      localizedIcon_ = other.localizedIcon_ != null ? other.localizedIcon_.Clone() : null;
      localizedLogo_ = other.localizedLogo_ != null ? other.localizedLogo_.Clone() : null;
      localizedAppleLogo_ = other.localizedAppleLogo_ != null ? other.localizedAppleLogo_.Clone() : null;
      localizedHero_ = other.localizedHero_ != null ? other.localizedHero_.Clone() : null;
      localizedEventStrip_ = other.localizedEventStrip_ != null ? other.localizedEventStrip_.Clone() : null;
      localizedStrip_ = other.localizedStrip_ != null ? other.localizedStrip_.Clone() : null;
      localizedThumbnail_ = other.localizedThumbnail_ != null ? other.localizedThumbnail_.Clone() : null;
      localizedBackground_ = other.localizedBackground_ != null ? other.localizedBackground_.Clone() : null;
      localizedFooter_ = other.localizedFooter_ != null ? other.localizedFooter_.Clone() : null;
      localizedSecurity_ = other.localizedSecurity_ != null ? other.localizedSecurity_.Clone() : null;
      localizedPrivilege_ = other.localizedPrivilege_ != null ? other.localizedPrivilege_.Clone() : null;
      localizedAirlineAlliance_ = other.localizedAirlineAlliance_ != null ? other.localizedAirlineAlliance_.Clone() : null;
      localizedPersonalization_ = other.localizedPersonalization_ != null ? other.localizedPersonalization_.Clone() : null;
      localizedBanner_ = other.localizedBanner_ != null ? other.localizedBanner_.Clone() : null;
      localizedMessage_ = other.localizedMessage_ != null ? other.localizedMessage_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageData Clone() {
      return new ImageData(this);
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 1;
    private string icon_ = "";
    /// <summary>
    /// Mandatory icon, used in Apple Wallet lock screen (87px x 87px).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "logo" field.</summary>
    public const int LogoFieldNumber = 2;
    private string logo_ = "";
    /// <summary>
    /// Logo is circle-cropped by Google Pay, a 15% safety margin is recommended (660px x 660px).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Logo {
      get { return logo_; }
      set {
        logo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "appleLogo" field.</summary>
    public const int AppleLogoFieldNumber = 3;
    private string appleLogo_ = "";
    /// <summary>
    /// Apple logo can be used where a rectangular design is preferred for Apple Passes only.  If ommitted, the square logo image will be used.  (&lt;=480px x 150px).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppleLogo {
      get { return appleLogo_; }
      set {
        appleLogo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hero" field.</summary>
    public const int HeroFieldNumber = 4;
    private string hero_ = "";
    /// <summary>
    /// Hero is the Google Pay strip and is also used in the dialog box when installing (1032px x 336px).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hero {
      get { return hero_; }
      set {
        hero_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "eventStrip" field.</summary>
    public const int EventStripFieldNumber = 5;
    private string eventStrip_ = "";
    /// <summary>
    /// Apple Wallet strip image for EventTicket pass types (1125px x 294px).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventStrip {
      get { return eventStrip_; }
      set {
        eventStrip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "strip" field.</summary>
    public const int StripFieldNumber = 6;
    private string strip_ = "";
    /// <summary>
    /// Apple Wallet strip image for other pass types with a  strip image (1125px x 432px).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Strip {
      get { return strip_; }
      set {
        strip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "thumbnail" field.</summary>
    public const int ThumbnailFieldNumber = 7;
    private string thumbnail_ = "";
    /// <summary>
    /// Used on Membership passes and Apple event tickets with a background image (>=270px x >=270px in a ratio range of 2:3-3:2).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Thumbnail {
      get { return thumbnail_; }
      set {
        thumbnail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "background" field.</summary>
    public const int BackgroundFieldNumber = 8;
    private string background_ = "";
    /// <summary>
    /// Used only be Apple Event Ticket designs, this image is blurred to form a background and so can be a low quality image.  Note it may also be slightly cropped on some devices (180px x 220px).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Background {
      get { return background_; }
      set {
        background_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "footer" field.</summary>
    public const int FooterFieldNumber = 9;
    private string footer_ = "";
    /// <summary>
    /// Displays above the barcode for Apple Wallet Boarding pass tickets (858px x 45px)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Footer {
      get { return footer_; }
      set {
        footer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "security" field.</summary>
    public const int SecurityFieldNumber = 10;
    private string security_ = "";
    /// <summary>
    /// Google Pay - used to denote a security program on boarding pass types (E.g. TSA PreCheck®).  Width of 1600px is shared with the boarding privilege logo (&lt;=1600px x 80px).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Security {
      get { return security_; }
      set {
        security_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "privilege" field.</summary>
    public const int PrivilegeFieldNumber = 11;
    private string privilege_ = "";
    /// <summary>
    /// Google Pay - used to denote a boarding privilege.  Width of 1600px is shared with the security program logo (&lt;=1600px x 80px).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Privilege {
      get { return privilege_; }
      set {
        privilege_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "airlineAlliance" field.</summary>
    public const int AirlineAllianceFieldNumber = 12;
    private string airlineAlliance_ = "";
    /// <summary>
    /// Google Pay - used to denote airline alliance on boarding pass types (&lt;=1600px x 80px).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AirlineAlliance {
      get { return airlineAlliance_; }
      set {
        airlineAlliance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "personalization" field.</summary>
    public const int PersonalizationFieldNumber = 13;
    private string personalization_ = "";
    /// <summary>
    /// For Apple Pay NFC passes whitelisted for personalization. Image is displayed after terms are presented (&lt;=450px x 120px).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Personalization {
      get { return personalization_; }
      set {
        personalization_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "banner" field.</summary>
    public const int BannerFieldNumber = 14;
    private string banner_ = "";
    /// <summary>
    /// Used on a landing page or email.  Image has no size constraints and will be treated as @2x pixel density.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Banner {
      get { return banner_; }
      set {
        banner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 15;
    private string message_ = "";
    /// <summary>
    /// Used for Google Pay in wallet promotional messages - for Apple Pay, the message will be rendered on a mobile website (1860px x &lt;=930px).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "profile" field.</summary>
    public const int ProfileFieldNumber = 16;
    private string profile_ = "";
    /// <summary>
    /// Used for user Profile images (300px x 300px). Cannot be localized.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Profile {
      get { return profile_; }
      set {
        profile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "appImage" field.</summary>
    public const int AppImageFieldNumber = 17;
    private string appImage_ = "";
    /// <summary>
    /// Used for user app images in Google Pay Passes (300px x 300px). Cannot be localized.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppImage {
      get { return appImage_; }
      set {
        appImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stampedImage" field.</summary>
    public const int StampedImageFieldNumber = 18;
    private string stampedImage_ = "";
    /// <summary>
    /// Used for stamp and unstamped images for use with stamp/punch cards. Cannot be localized.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StampedImage {
      get { return stampedImage_; }
      set {
        stampedImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unstampedImage" field.</summary>
    public const int UnstampedImageFieldNumber = 19;
    private string unstampedImage_ = "";
    /// <summary>
    /// Used for stamp and unstamped images for use with stamp/punch cards. Cannot be localized.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnstampedImage {
      get { return unstampedImage_; }
      set {
        unstampedImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stampConfig" field.</summary>
    public const int StampConfigFieldNumber = 20;
    private global::PassKit.Grpc.StampImageConfig stampConfig_;
    /// <summary>
    /// Spec for a stamp image. Cannot be localized.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKit.Grpc.StampImageConfig StampConfig {
      get { return stampConfig_; }
      set {
        stampConfig_ = value;
      }
    }

    /// <summary>Field number for the "localizedIcon" field.</summary>
    public const int LocalizedIconFieldNumber = 31;
    private global::PassKit.Grpc.LocalizedString localizedIcon_;
    /// <summary>
    /// Sets different icon images for non-default languages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKit.Grpc.LocalizedString LocalizedIcon {
      get { return localizedIcon_; }
      set {
        localizedIcon_ = value;
      }
    }

    /// <summary>Field number for the "localizedLogo" field.</summary>
    public const int LocalizedLogoFieldNumber = 32;
    private global::PassKit.Grpc.LocalizedString localizedLogo_;
    /// <summary>
    /// Sets different logo images for non-default languages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKit.Grpc.LocalizedString LocalizedLogo {
      get { return localizedLogo_; }
      set {
        localizedLogo_ = value;
      }
    }

    /// <summary>Field number for the "localizedAppleLogo" field.</summary>
    public const int LocalizedAppleLogoFieldNumber = 33;
    private global::PassKit.Grpc.LocalizedString localizedAppleLogo_;
    /// <summary>
    /// Sets different Apple Logo images for non-default languages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKit.Grpc.LocalizedString LocalizedAppleLogo {
      get { return localizedAppleLogo_; }
      set {
        localizedAppleLogo_ = value;
      }
    }

    /// <summary>Field number for the "localizedHero" field.</summary>
    public const int LocalizedHeroFieldNumber = 34;
    private global::PassKit.Grpc.LocalizedString localizedHero_;
    /// <summary>
    /// Sets different hero images for non-default languages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKit.Grpc.LocalizedString LocalizedHero {
      get { return localizedHero_; }
      set {
        localizedHero_ = value;
      }
    }

    /// <summary>Field number for the "localizedEventStrip" field.</summary>
    public const int LocalizedEventStripFieldNumber = 35;
    private global::PassKit.Grpc.LocalizedString localizedEventStrip_;
    /// <summary>
    /// Sets different event strip images for non-default languages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKit.Grpc.LocalizedString LocalizedEventStrip {
      get { return localizedEventStrip_; }
      set {
        localizedEventStrip_ = value;
      }
    }

    /// <summary>Field number for the "localizedStrip" field.</summary>
    public const int LocalizedStripFieldNumber = 36;
    private global::PassKit.Grpc.LocalizedString localizedStrip_;
    /// <summary>
    /// Sets different strip images for non-default languages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKit.Grpc.LocalizedString LocalizedStrip {
      get { return localizedStrip_; }
      set {
        localizedStrip_ = value;
      }
    }

    /// <summary>Field number for the "localizedThumbnail" field.</summary>
    public const int LocalizedThumbnailFieldNumber = 37;
    private global::PassKit.Grpc.LocalizedString localizedThumbnail_;
    /// <summary>
    /// Sets different thumbnail images for non-default languages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKit.Grpc.LocalizedString LocalizedThumbnail {
      get { return localizedThumbnail_; }
      set {
        localizedThumbnail_ = value;
      }
    }

    /// <summary>Field number for the "localizedBackground" field.</summary>
    public const int LocalizedBackgroundFieldNumber = 38;
    private global::PassKit.Grpc.LocalizedString localizedBackground_;
    /// <summary>
    /// Sets different background images for non-default languages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKit.Grpc.LocalizedString LocalizedBackground {
      get { return localizedBackground_; }
      set {
        localizedBackground_ = value;
      }
    }

    /// <summary>Field number for the "localizedFooter" field.</summary>
    public const int LocalizedFooterFieldNumber = 39;
    private global::PassKit.Grpc.LocalizedString localizedFooter_;
    /// <summary>
    /// Sets different footer images for non-default languages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKit.Grpc.LocalizedString LocalizedFooter {
      get { return localizedFooter_; }
      set {
        localizedFooter_ = value;
      }
    }

    /// <summary>Field number for the "localizedSecurity" field.</summary>
    public const int LocalizedSecurityFieldNumber = 40;
    private global::PassKit.Grpc.LocalizedString localizedSecurity_;
    /// <summary>
    /// Sets different security images for non-default languages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKit.Grpc.LocalizedString LocalizedSecurity {
      get { return localizedSecurity_; }
      set {
        localizedSecurity_ = value;
      }
    }

    /// <summary>Field number for the "localizedPrivilege" field.</summary>
    public const int LocalizedPrivilegeFieldNumber = 41;
    private global::PassKit.Grpc.LocalizedString localizedPrivilege_;
    /// <summary>
    /// Sets different privilege images for non-default languages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKit.Grpc.LocalizedString LocalizedPrivilege {
      get { return localizedPrivilege_; }
      set {
        localizedPrivilege_ = value;
      }
    }

    /// <summary>Field number for the "localizedAirlineAlliance" field.</summary>
    public const int LocalizedAirlineAllianceFieldNumber = 42;
    private global::PassKit.Grpc.LocalizedString localizedAirlineAlliance_;
    /// <summary>
    /// Sets different airline alliance images for non-default languages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKit.Grpc.LocalizedString LocalizedAirlineAlliance {
      get { return localizedAirlineAlliance_; }
      set {
        localizedAirlineAlliance_ = value;
      }
    }

    /// <summary>Field number for the "localizedPersonalization" field.</summary>
    public const int LocalizedPersonalizationFieldNumber = 43;
    private global::PassKit.Grpc.LocalizedString localizedPersonalization_;
    /// <summary>
    /// Sets different personalized images for non-default languages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKit.Grpc.LocalizedString LocalizedPersonalization {
      get { return localizedPersonalization_; }
      set {
        localizedPersonalization_ = value;
      }
    }

    /// <summary>Field number for the "localizedBanner" field.</summary>
    public const int LocalizedBannerFieldNumber = 44;
    private global::PassKit.Grpc.LocalizedString localizedBanner_;
    /// <summary>
    /// Sets different banner images for non-default languages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKit.Grpc.LocalizedString LocalizedBanner {
      get { return localizedBanner_; }
      set {
        localizedBanner_ = value;
      }
    }

    /// <summary>Field number for the "localizedMessage" field.</summary>
    public const int LocalizedMessageFieldNumber = 45;
    private global::PassKit.Grpc.LocalizedString localizedMessage_;
    /// <summary>
    /// Sets different message images for non-default languages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKit.Grpc.LocalizedString LocalizedMessage {
      get { return localizedMessage_; }
      set {
        localizedMessage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Icon != other.Icon) return false;
      if (Logo != other.Logo) return false;
      if (AppleLogo != other.AppleLogo) return false;
      if (Hero != other.Hero) return false;
      if (EventStrip != other.EventStrip) return false;
      if (Strip != other.Strip) return false;
      if (Thumbnail != other.Thumbnail) return false;
      if (Background != other.Background) return false;
      if (Footer != other.Footer) return false;
      if (Security != other.Security) return false;
      if (Privilege != other.Privilege) return false;
      if (AirlineAlliance != other.AirlineAlliance) return false;
      if (Personalization != other.Personalization) return false;
      if (Banner != other.Banner) return false;
      if (Message != other.Message) return false;
      if (Profile != other.Profile) return false;
      if (AppImage != other.AppImage) return false;
      if (StampedImage != other.StampedImage) return false;
      if (UnstampedImage != other.UnstampedImage) return false;
      if (!object.Equals(StampConfig, other.StampConfig)) return false;
      if (!object.Equals(LocalizedIcon, other.LocalizedIcon)) return false;
      if (!object.Equals(LocalizedLogo, other.LocalizedLogo)) return false;
      if (!object.Equals(LocalizedAppleLogo, other.LocalizedAppleLogo)) return false;
      if (!object.Equals(LocalizedHero, other.LocalizedHero)) return false;
      if (!object.Equals(LocalizedEventStrip, other.LocalizedEventStrip)) return false;
      if (!object.Equals(LocalizedStrip, other.LocalizedStrip)) return false;
      if (!object.Equals(LocalizedThumbnail, other.LocalizedThumbnail)) return false;
      if (!object.Equals(LocalizedBackground, other.LocalizedBackground)) return false;
      if (!object.Equals(LocalizedFooter, other.LocalizedFooter)) return false;
      if (!object.Equals(LocalizedSecurity, other.LocalizedSecurity)) return false;
      if (!object.Equals(LocalizedPrivilege, other.LocalizedPrivilege)) return false;
      if (!object.Equals(LocalizedAirlineAlliance, other.LocalizedAirlineAlliance)) return false;
      if (!object.Equals(LocalizedPersonalization, other.LocalizedPersonalization)) return false;
      if (!object.Equals(LocalizedBanner, other.LocalizedBanner)) return false;
      if (!object.Equals(LocalizedMessage, other.LocalizedMessage)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      if (Logo.Length != 0) hash ^= Logo.GetHashCode();
      if (AppleLogo.Length != 0) hash ^= AppleLogo.GetHashCode();
      if (Hero.Length != 0) hash ^= Hero.GetHashCode();
      if (EventStrip.Length != 0) hash ^= EventStrip.GetHashCode();
      if (Strip.Length != 0) hash ^= Strip.GetHashCode();
      if (Thumbnail.Length != 0) hash ^= Thumbnail.GetHashCode();
      if (Background.Length != 0) hash ^= Background.GetHashCode();
      if (Footer.Length != 0) hash ^= Footer.GetHashCode();
      if (Security.Length != 0) hash ^= Security.GetHashCode();
      if (Privilege.Length != 0) hash ^= Privilege.GetHashCode();
      if (AirlineAlliance.Length != 0) hash ^= AirlineAlliance.GetHashCode();
      if (Personalization.Length != 0) hash ^= Personalization.GetHashCode();
      if (Banner.Length != 0) hash ^= Banner.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (Profile.Length != 0) hash ^= Profile.GetHashCode();
      if (AppImage.Length != 0) hash ^= AppImage.GetHashCode();
      if (StampedImage.Length != 0) hash ^= StampedImage.GetHashCode();
      if (UnstampedImage.Length != 0) hash ^= UnstampedImage.GetHashCode();
      if (stampConfig_ != null) hash ^= StampConfig.GetHashCode();
      if (localizedIcon_ != null) hash ^= LocalizedIcon.GetHashCode();
      if (localizedLogo_ != null) hash ^= LocalizedLogo.GetHashCode();
      if (localizedAppleLogo_ != null) hash ^= LocalizedAppleLogo.GetHashCode();
      if (localizedHero_ != null) hash ^= LocalizedHero.GetHashCode();
      if (localizedEventStrip_ != null) hash ^= LocalizedEventStrip.GetHashCode();
      if (localizedStrip_ != null) hash ^= LocalizedStrip.GetHashCode();
      if (localizedThumbnail_ != null) hash ^= LocalizedThumbnail.GetHashCode();
      if (localizedBackground_ != null) hash ^= LocalizedBackground.GetHashCode();
      if (localizedFooter_ != null) hash ^= LocalizedFooter.GetHashCode();
      if (localizedSecurity_ != null) hash ^= LocalizedSecurity.GetHashCode();
      if (localizedPrivilege_ != null) hash ^= LocalizedPrivilege.GetHashCode();
      if (localizedAirlineAlliance_ != null) hash ^= LocalizedAirlineAlliance.GetHashCode();
      if (localizedPersonalization_ != null) hash ^= LocalizedPersonalization.GetHashCode();
      if (localizedBanner_ != null) hash ^= LocalizedBanner.GetHashCode();
      if (localizedMessage_ != null) hash ^= LocalizedMessage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Icon.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Icon);
      }
      if (Logo.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Logo);
      }
      if (AppleLogo.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AppleLogo);
      }
      if (Hero.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Hero);
      }
      if (EventStrip.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(EventStrip);
      }
      if (Strip.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Strip);
      }
      if (Thumbnail.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Thumbnail);
      }
      if (Background.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Background);
      }
      if (Footer.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Footer);
      }
      if (Security.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Security);
      }
      if (Privilege.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Privilege);
      }
      if (AirlineAlliance.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(AirlineAlliance);
      }
      if (Personalization.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Personalization);
      }
      if (Banner.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Banner);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Message);
      }
      if (Profile.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Profile);
      }
      if (AppImage.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(AppImage);
      }
      if (StampedImage.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(StampedImage);
      }
      if (UnstampedImage.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(UnstampedImage);
      }
      if (stampConfig_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(StampConfig);
      }
      if (localizedIcon_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(LocalizedIcon);
      }
      if (localizedLogo_ != null) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(LocalizedLogo);
      }
      if (localizedAppleLogo_ != null) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(LocalizedAppleLogo);
      }
      if (localizedHero_ != null) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(LocalizedHero);
      }
      if (localizedEventStrip_ != null) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(LocalizedEventStrip);
      }
      if (localizedStrip_ != null) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(LocalizedStrip);
      }
      if (localizedThumbnail_ != null) {
        output.WriteRawTag(170, 2);
        output.WriteMessage(LocalizedThumbnail);
      }
      if (localizedBackground_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(LocalizedBackground);
      }
      if (localizedFooter_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(LocalizedFooter);
      }
      if (localizedSecurity_ != null) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(LocalizedSecurity);
      }
      if (localizedPrivilege_ != null) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(LocalizedPrivilege);
      }
      if (localizedAirlineAlliance_ != null) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(LocalizedAirlineAlliance);
      }
      if (localizedPersonalization_ != null) {
        output.WriteRawTag(218, 2);
        output.WriteMessage(LocalizedPersonalization);
      }
      if (localizedBanner_ != null) {
        output.WriteRawTag(226, 2);
        output.WriteMessage(LocalizedBanner);
      }
      if (localizedMessage_ != null) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(LocalizedMessage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Icon.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Icon);
      }
      if (Logo.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Logo);
      }
      if (AppleLogo.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AppleLogo);
      }
      if (Hero.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Hero);
      }
      if (EventStrip.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(EventStrip);
      }
      if (Strip.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Strip);
      }
      if (Thumbnail.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Thumbnail);
      }
      if (Background.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Background);
      }
      if (Footer.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Footer);
      }
      if (Security.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Security);
      }
      if (Privilege.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Privilege);
      }
      if (AirlineAlliance.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(AirlineAlliance);
      }
      if (Personalization.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Personalization);
      }
      if (Banner.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Banner);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Message);
      }
      if (Profile.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Profile);
      }
      if (AppImage.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(AppImage);
      }
      if (StampedImage.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(StampedImage);
      }
      if (UnstampedImage.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(UnstampedImage);
      }
      if (stampConfig_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(StampConfig);
      }
      if (localizedIcon_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(LocalizedIcon);
      }
      if (localizedLogo_ != null) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(LocalizedLogo);
      }
      if (localizedAppleLogo_ != null) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(LocalizedAppleLogo);
      }
      if (localizedHero_ != null) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(LocalizedHero);
      }
      if (localizedEventStrip_ != null) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(LocalizedEventStrip);
      }
      if (localizedStrip_ != null) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(LocalizedStrip);
      }
      if (localizedThumbnail_ != null) {
        output.WriteRawTag(170, 2);
        output.WriteMessage(LocalizedThumbnail);
      }
      if (localizedBackground_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(LocalizedBackground);
      }
      if (localizedFooter_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(LocalizedFooter);
      }
      if (localizedSecurity_ != null) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(LocalizedSecurity);
      }
      if (localizedPrivilege_ != null) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(LocalizedPrivilege);
      }
      if (localizedAirlineAlliance_ != null) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(LocalizedAirlineAlliance);
      }
      if (localizedPersonalization_ != null) {
        output.WriteRawTag(218, 2);
        output.WriteMessage(LocalizedPersonalization);
      }
      if (localizedBanner_ != null) {
        output.WriteRawTag(226, 2);
        output.WriteMessage(LocalizedBanner);
      }
      if (localizedMessage_ != null) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(LocalizedMessage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (Logo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Logo);
      }
      if (AppleLogo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppleLogo);
      }
      if (Hero.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hero);
      }
      if (EventStrip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventStrip);
      }
      if (Strip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Strip);
      }
      if (Thumbnail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Thumbnail);
      }
      if (Background.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Background);
      }
      if (Footer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Footer);
      }
      if (Security.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Security);
      }
      if (Privilege.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Privilege);
      }
      if (AirlineAlliance.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AirlineAlliance);
      }
      if (Personalization.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Personalization);
      }
      if (Banner.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Banner);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Profile.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Profile);
      }
      if (AppImage.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AppImage);
      }
      if (StampedImage.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StampedImage);
      }
      if (UnstampedImage.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UnstampedImage);
      }
      if (stampConfig_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StampConfig);
      }
      if (localizedIcon_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LocalizedIcon);
      }
      if (localizedLogo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LocalizedLogo);
      }
      if (localizedAppleLogo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LocalizedAppleLogo);
      }
      if (localizedHero_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LocalizedHero);
      }
      if (localizedEventStrip_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LocalizedEventStrip);
      }
      if (localizedStrip_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LocalizedStrip);
      }
      if (localizedThumbnail_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LocalizedThumbnail);
      }
      if (localizedBackground_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LocalizedBackground);
      }
      if (localizedFooter_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LocalizedFooter);
      }
      if (localizedSecurity_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LocalizedSecurity);
      }
      if (localizedPrivilege_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LocalizedPrivilege);
      }
      if (localizedAirlineAlliance_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LocalizedAirlineAlliance);
      }
      if (localizedPersonalization_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LocalizedPersonalization);
      }
      if (localizedBanner_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LocalizedBanner);
      }
      if (localizedMessage_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LocalizedMessage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageData other) {
      if (other == null) {
        return;
      }
      if (other.Icon.Length != 0) {
        Icon = other.Icon;
      }
      if (other.Logo.Length != 0) {
        Logo = other.Logo;
      }
      if (other.AppleLogo.Length != 0) {
        AppleLogo = other.AppleLogo;
      }
      if (other.Hero.Length != 0) {
        Hero = other.Hero;
      }
      if (other.EventStrip.Length != 0) {
        EventStrip = other.EventStrip;
      }
      if (other.Strip.Length != 0) {
        Strip = other.Strip;
      }
      if (other.Thumbnail.Length != 0) {
        Thumbnail = other.Thumbnail;
      }
      if (other.Background.Length != 0) {
        Background = other.Background;
      }
      if (other.Footer.Length != 0) {
        Footer = other.Footer;
      }
      if (other.Security.Length != 0) {
        Security = other.Security;
      }
      if (other.Privilege.Length != 0) {
        Privilege = other.Privilege;
      }
      if (other.AirlineAlliance.Length != 0) {
        AirlineAlliance = other.AirlineAlliance;
      }
      if (other.Personalization.Length != 0) {
        Personalization = other.Personalization;
      }
      if (other.Banner.Length != 0) {
        Banner = other.Banner;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.Profile.Length != 0) {
        Profile = other.Profile;
      }
      if (other.AppImage.Length != 0) {
        AppImage = other.AppImage;
      }
      if (other.StampedImage.Length != 0) {
        StampedImage = other.StampedImage;
      }
      if (other.UnstampedImage.Length != 0) {
        UnstampedImage = other.UnstampedImage;
      }
      if (other.stampConfig_ != null) {
        if (stampConfig_ == null) {
          StampConfig = new global::PassKit.Grpc.StampImageConfig();
        }
        StampConfig.MergeFrom(other.StampConfig);
      }
      if (other.localizedIcon_ != null) {
        if (localizedIcon_ == null) {
          LocalizedIcon = new global::PassKit.Grpc.LocalizedString();
        }
        LocalizedIcon.MergeFrom(other.LocalizedIcon);
      }
      if (other.localizedLogo_ != null) {
        if (localizedLogo_ == null) {
          LocalizedLogo = new global::PassKit.Grpc.LocalizedString();
        }
        LocalizedLogo.MergeFrom(other.LocalizedLogo);
      }
      if (other.localizedAppleLogo_ != null) {
        if (localizedAppleLogo_ == null) {
          LocalizedAppleLogo = new global::PassKit.Grpc.LocalizedString();
        }
        LocalizedAppleLogo.MergeFrom(other.LocalizedAppleLogo);
      }
      if (other.localizedHero_ != null) {
        if (localizedHero_ == null) {
          LocalizedHero = new global::PassKit.Grpc.LocalizedString();
        }
        LocalizedHero.MergeFrom(other.LocalizedHero);
      }
      if (other.localizedEventStrip_ != null) {
        if (localizedEventStrip_ == null) {
          LocalizedEventStrip = new global::PassKit.Grpc.LocalizedString();
        }
        LocalizedEventStrip.MergeFrom(other.LocalizedEventStrip);
      }
      if (other.localizedStrip_ != null) {
        if (localizedStrip_ == null) {
          LocalizedStrip = new global::PassKit.Grpc.LocalizedString();
        }
        LocalizedStrip.MergeFrom(other.LocalizedStrip);
      }
      if (other.localizedThumbnail_ != null) {
        if (localizedThumbnail_ == null) {
          LocalizedThumbnail = new global::PassKit.Grpc.LocalizedString();
        }
        LocalizedThumbnail.MergeFrom(other.LocalizedThumbnail);
      }
      if (other.localizedBackground_ != null) {
        if (localizedBackground_ == null) {
          LocalizedBackground = new global::PassKit.Grpc.LocalizedString();
        }
        LocalizedBackground.MergeFrom(other.LocalizedBackground);
      }
      if (other.localizedFooter_ != null) {
        if (localizedFooter_ == null) {
          LocalizedFooter = new global::PassKit.Grpc.LocalizedString();
        }
        LocalizedFooter.MergeFrom(other.LocalizedFooter);
      }
      if (other.localizedSecurity_ != null) {
        if (localizedSecurity_ == null) {
          LocalizedSecurity = new global::PassKit.Grpc.LocalizedString();
        }
        LocalizedSecurity.MergeFrom(other.LocalizedSecurity);
      }
      if (other.localizedPrivilege_ != null) {
        if (localizedPrivilege_ == null) {
          LocalizedPrivilege = new global::PassKit.Grpc.LocalizedString();
        }
        LocalizedPrivilege.MergeFrom(other.LocalizedPrivilege);
      }
      if (other.localizedAirlineAlliance_ != null) {
        if (localizedAirlineAlliance_ == null) {
          LocalizedAirlineAlliance = new global::PassKit.Grpc.LocalizedString();
        }
        LocalizedAirlineAlliance.MergeFrom(other.LocalizedAirlineAlliance);
      }
      if (other.localizedPersonalization_ != null) {
        if (localizedPersonalization_ == null) {
          LocalizedPersonalization = new global::PassKit.Grpc.LocalizedString();
        }
        LocalizedPersonalization.MergeFrom(other.LocalizedPersonalization);
      }
      if (other.localizedBanner_ != null) {
        if (localizedBanner_ == null) {
          LocalizedBanner = new global::PassKit.Grpc.LocalizedString();
        }
        LocalizedBanner.MergeFrom(other.LocalizedBanner);
      }
      if (other.localizedMessage_ != null) {
        if (localizedMessage_ == null) {
          LocalizedMessage = new global::PassKit.Grpc.LocalizedString();
        }
        LocalizedMessage.MergeFrom(other.LocalizedMessage);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Icon = input.ReadString();
            break;
          }
          case 18: {
            Logo = input.ReadString();
            break;
          }
          case 26: {
            AppleLogo = input.ReadString();
            break;
          }
          case 34: {
            Hero = input.ReadString();
            break;
          }
          case 42: {
            EventStrip = input.ReadString();
            break;
          }
          case 50: {
            Strip = input.ReadString();
            break;
          }
          case 58: {
            Thumbnail = input.ReadString();
            break;
          }
          case 66: {
            Background = input.ReadString();
            break;
          }
          case 74: {
            Footer = input.ReadString();
            break;
          }
          case 82: {
            Security = input.ReadString();
            break;
          }
          case 90: {
            Privilege = input.ReadString();
            break;
          }
          case 98: {
            AirlineAlliance = input.ReadString();
            break;
          }
          case 106: {
            Personalization = input.ReadString();
            break;
          }
          case 114: {
            Banner = input.ReadString();
            break;
          }
          case 122: {
            Message = input.ReadString();
            break;
          }
          case 130: {
            Profile = input.ReadString();
            break;
          }
          case 138: {
            AppImage = input.ReadString();
            break;
          }
          case 146: {
            StampedImage = input.ReadString();
            break;
          }
          case 154: {
            UnstampedImage = input.ReadString();
            break;
          }
          case 162: {
            if (stampConfig_ == null) {
              StampConfig = new global::PassKit.Grpc.StampImageConfig();
            }
            input.ReadMessage(StampConfig);
            break;
          }
          case 250: {
            if (localizedIcon_ == null) {
              LocalizedIcon = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedIcon);
            break;
          }
          case 258: {
            if (localizedLogo_ == null) {
              LocalizedLogo = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedLogo);
            break;
          }
          case 266: {
            if (localizedAppleLogo_ == null) {
              LocalizedAppleLogo = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedAppleLogo);
            break;
          }
          case 274: {
            if (localizedHero_ == null) {
              LocalizedHero = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedHero);
            break;
          }
          case 282: {
            if (localizedEventStrip_ == null) {
              LocalizedEventStrip = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedEventStrip);
            break;
          }
          case 290: {
            if (localizedStrip_ == null) {
              LocalizedStrip = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedStrip);
            break;
          }
          case 298: {
            if (localizedThumbnail_ == null) {
              LocalizedThumbnail = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedThumbnail);
            break;
          }
          case 306: {
            if (localizedBackground_ == null) {
              LocalizedBackground = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedBackground);
            break;
          }
          case 314: {
            if (localizedFooter_ == null) {
              LocalizedFooter = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedFooter);
            break;
          }
          case 322: {
            if (localizedSecurity_ == null) {
              LocalizedSecurity = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedSecurity);
            break;
          }
          case 330: {
            if (localizedPrivilege_ == null) {
              LocalizedPrivilege = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedPrivilege);
            break;
          }
          case 338: {
            if (localizedAirlineAlliance_ == null) {
              LocalizedAirlineAlliance = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedAirlineAlliance);
            break;
          }
          case 346: {
            if (localizedPersonalization_ == null) {
              LocalizedPersonalization = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedPersonalization);
            break;
          }
          case 354: {
            if (localizedBanner_ == null) {
              LocalizedBanner = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedBanner);
            break;
          }
          case 362: {
            if (localizedMessage_ == null) {
              LocalizedMessage = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedMessage);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Icon = input.ReadString();
            break;
          }
          case 18: {
            Logo = input.ReadString();
            break;
          }
          case 26: {
            AppleLogo = input.ReadString();
            break;
          }
          case 34: {
            Hero = input.ReadString();
            break;
          }
          case 42: {
            EventStrip = input.ReadString();
            break;
          }
          case 50: {
            Strip = input.ReadString();
            break;
          }
          case 58: {
            Thumbnail = input.ReadString();
            break;
          }
          case 66: {
            Background = input.ReadString();
            break;
          }
          case 74: {
            Footer = input.ReadString();
            break;
          }
          case 82: {
            Security = input.ReadString();
            break;
          }
          case 90: {
            Privilege = input.ReadString();
            break;
          }
          case 98: {
            AirlineAlliance = input.ReadString();
            break;
          }
          case 106: {
            Personalization = input.ReadString();
            break;
          }
          case 114: {
            Banner = input.ReadString();
            break;
          }
          case 122: {
            Message = input.ReadString();
            break;
          }
          case 130: {
            Profile = input.ReadString();
            break;
          }
          case 138: {
            AppImage = input.ReadString();
            break;
          }
          case 146: {
            StampedImage = input.ReadString();
            break;
          }
          case 154: {
            UnstampedImage = input.ReadString();
            break;
          }
          case 162: {
            if (stampConfig_ == null) {
              StampConfig = new global::PassKit.Grpc.StampImageConfig();
            }
            input.ReadMessage(StampConfig);
            break;
          }
          case 250: {
            if (localizedIcon_ == null) {
              LocalizedIcon = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedIcon);
            break;
          }
          case 258: {
            if (localizedLogo_ == null) {
              LocalizedLogo = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedLogo);
            break;
          }
          case 266: {
            if (localizedAppleLogo_ == null) {
              LocalizedAppleLogo = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedAppleLogo);
            break;
          }
          case 274: {
            if (localizedHero_ == null) {
              LocalizedHero = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedHero);
            break;
          }
          case 282: {
            if (localizedEventStrip_ == null) {
              LocalizedEventStrip = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedEventStrip);
            break;
          }
          case 290: {
            if (localizedStrip_ == null) {
              LocalizedStrip = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedStrip);
            break;
          }
          case 298: {
            if (localizedThumbnail_ == null) {
              LocalizedThumbnail = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedThumbnail);
            break;
          }
          case 306: {
            if (localizedBackground_ == null) {
              LocalizedBackground = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedBackground);
            break;
          }
          case 314: {
            if (localizedFooter_ == null) {
              LocalizedFooter = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedFooter);
            break;
          }
          case 322: {
            if (localizedSecurity_ == null) {
              LocalizedSecurity = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedSecurity);
            break;
          }
          case 330: {
            if (localizedPrivilege_ == null) {
              LocalizedPrivilege = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedPrivilege);
            break;
          }
          case 338: {
            if (localizedAirlineAlliance_ == null) {
              LocalizedAirlineAlliance = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedAirlineAlliance);
            break;
          }
          case 346: {
            if (localizedPersonalization_ == null) {
              LocalizedPersonalization = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedPersonalization);
            break;
          }
          case 354: {
            if (localizedBanner_ == null) {
              LocalizedBanner = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedBanner);
            break;
          }
          case 362: {
            if (localizedMessage_ == null) {
              LocalizedMessage = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedMessage);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ImageRecord : pb::IMessage<ImageRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ImageRecord> _parser = new pb::MessageParser<ImageRecord>(() => new ImageRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.ImageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageRecord(ImageRecord other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      url_ = other.url_;
      use_ = other.use_;
      languages_ = other.languages_.Clone();
      ownerUsername_ = other.ownerUsername_;
      createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
      updatedAt_ = other.updatedAt_ != null ? other.updatedAt_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageRecord Clone() {
      return new ImageRecord(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 3;
    private string url_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "use" field.</summary>
    public const int UseFieldNumber = 5;
    private global::PassKit.Grpc.ImageUse use_ = global::PassKit.Grpc.ImageUse.Icon;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKit.Grpc.ImageUse Use {
      get { return use_; }
      set {
        use_ = value;
      }
    }

    /// <summary>Field number for the "languages" field.</summary>
    public const int LanguagesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::PassKit.Grpc.LanguageCode> _repeated_languages_codec
        = pb::FieldCodec.ForEnum(50, x => (int) x, x => (global::PassKit.Grpc.LanguageCode) x);
    private readonly pbc::RepeatedField<global::PassKit.Grpc.LanguageCode> languages_ = new pbc::RepeatedField<global::PassKit.Grpc.LanguageCode>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PassKit.Grpc.LanguageCode> Languages {
      get { return languages_; }
    }

    /// <summary>Field number for the "ownerUsername" field.</summary>
    public const int OwnerUsernameFieldNumber = 7;
    private string ownerUsername_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OwnerUsername {
      get { return ownerUsername_; }
      set {
        ownerUsername_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "createdAt" field.</summary>
    public const int CreatedAtFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "updatedAt" field.</summary>
    public const int UpdatedAtFieldNumber = 9;
    private global::Google.Protobuf.WellKnownTypes.Timestamp updatedAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp UpdatedAt {
      get { return updatedAt_; }
      set {
        updatedAt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Url != other.Url) return false;
      if (Use != other.Use) return false;
      if(!languages_.Equals(other.languages_)) return false;
      if (OwnerUsername != other.OwnerUsername) return false;
      if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
      if (!object.Equals(UpdatedAt, other.UpdatedAt)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (Use != global::PassKit.Grpc.ImageUse.Icon) hash ^= Use.GetHashCode();
      hash ^= languages_.GetHashCode();
      if (OwnerUsername.Length != 0) hash ^= OwnerUsername.GetHashCode();
      if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
      if (updatedAt_ != null) hash ^= UpdatedAt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Url.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Url);
      }
      if (Use != global::PassKit.Grpc.ImageUse.Icon) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Use);
      }
      languages_.WriteTo(output, _repeated_languages_codec);
      if (OwnerUsername.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(OwnerUsername);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(CreatedAt);
      }
      if (updatedAt_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(UpdatedAt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Url.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Url);
      }
      if (Use != global::PassKit.Grpc.ImageUse.Icon) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Use);
      }
      languages_.WriteTo(ref output, _repeated_languages_codec);
      if (OwnerUsername.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(OwnerUsername);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(CreatedAt);
      }
      if (updatedAt_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(UpdatedAt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (Use != global::PassKit.Grpc.ImageUse.Icon) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Use);
      }
      size += languages_.CalculateSize(_repeated_languages_codec);
      if (OwnerUsername.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerUsername);
      }
      if (createdAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
      }
      if (updatedAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdatedAt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageRecord other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      if (other.Use != global::PassKit.Grpc.ImageUse.Icon) {
        Use = other.Use;
      }
      languages_.Add(other.languages_);
      if (other.OwnerUsername.Length != 0) {
        OwnerUsername = other.OwnerUsername;
      }
      if (other.createdAt_ != null) {
        if (createdAt_ == null) {
          CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedAt.MergeFrom(other.CreatedAt);
      }
      if (other.updatedAt_ != null) {
        if (updatedAt_ == null) {
          UpdatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        UpdatedAt.MergeFrom(other.UpdatedAt);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Url = input.ReadString();
            break;
          }
          case 40: {
            Use = (global::PassKit.Grpc.ImageUse) input.ReadEnum();
            break;
          }
          case 50:
          case 48: {
            languages_.AddEntriesFrom(input, _repeated_languages_codec);
            break;
          }
          case 58: {
            OwnerUsername = input.ReadString();
            break;
          }
          case 66: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
          case 74: {
            if (updatedAt_ == null) {
              UpdatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(UpdatedAt);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Url = input.ReadString();
            break;
          }
          case 40: {
            Use = (global::PassKit.Grpc.ImageUse) input.ReadEnum();
            break;
          }
          case 50:
          case 48: {
            languages_.AddEntriesFrom(ref input, _repeated_languages_codec);
            break;
          }
          case 58: {
            OwnerUsername = input.ReadString();
            break;
          }
          case 66: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
          case 74: {
            if (updatedAt_ == null) {
              UpdatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(UpdatedAt);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ProfileImageInput : pb::IMessage<ProfileImageInput>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ProfileImageInput> _parser = new pb::MessageParser<ProfileImageInput>(() => new ProfileImageInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProfileImageInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.ImageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileImageInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileImageInput(ProfileImageInput other) : this() {
      imageData_ = other.imageData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileImageInput Clone() {
      return new ProfileImageInput(this);
    }

    /// <summary>Field number for the "imageData" field.</summary>
    public const int ImageDataFieldNumber = 1;
    private string imageData_ = "";
    /// <summary>
    /// Provide an image URL or base64 image data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageData {
      get { return imageData_; }
      set {
        imageData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProfileImageInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProfileImageInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ImageData != other.ImageData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ImageData.Length != 0) hash ^= ImageData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ImageData.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ImageData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ImageData.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ImageData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ImageData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProfileImageInput other) {
      if (other == null) {
        return;
      }
      if (other.ImageData.Length != 0) {
        ImageData = other.ImageData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ImageData = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ImageData = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MultipleImages : pb::IMessage<MultipleImages>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MultipleImages> _parser = new pb::MessageParser<MultipleImages>(() => new MultipleImages());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MultipleImages> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.ImageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultipleImages() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultipleImages(MultipleImages other) : this() {
      images_ = other.images_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultipleImages Clone() {
      return new MultipleImages(this);
    }

    /// <summary>Field number for the "images" field.</summary>
    public const int ImagesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PassKit.Grpc.ImageRecord> _repeated_images_codec
        = pb::FieldCodec.ForMessage(10, global::PassKit.Grpc.ImageRecord.Parser);
    private readonly pbc::RepeatedField<global::PassKit.Grpc.ImageRecord> images_ = new pbc::RepeatedField<global::PassKit.Grpc.ImageRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PassKit.Grpc.ImageRecord> Images {
      get { return images_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MultipleImages);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MultipleImages other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!images_.Equals(other.images_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= images_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      images_.WriteTo(output, _repeated_images_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      images_.WriteTo(ref output, _repeated_images_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += images_.CalculateSize(_repeated_images_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MultipleImages other) {
      if (other == null) {
        return;
      }
      images_.Add(other.images_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            images_.AddEntriesFrom(input, _repeated_images_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            images_.AddEntriesFrom(ref input, _repeated_images_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class StampImageRequest : pb::IMessage<StampImageRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StampImageRequest> _parser = new pb::MessageParser<StampImageRequest>(() => new StampImageRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StampImageRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.ImageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StampImageRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StampImageRequest(StampImageRequest other) : this() {
      id_ = other.id_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StampImageRequest Clone() {
      return new StampImageRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// PassKit Image Id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private ulong status_;
    /// <summary>
    /// a bitmask indicating the stamped status (E.g. a value of 22 indicates stamps 2, 3 and 5 are stamped).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StampImageRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StampImageRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Status != 0UL) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Status != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Status != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Status != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StampImageRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Status != 0UL) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Status = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Status = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CreateImageInput : pb::IMessage<CreateImageInput>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CreateImageInput> _parser = new pb::MessageParser<CreateImageInput>(() => new CreateImageInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateImageInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.ImageReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateImageInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateImageInput(CreateImageInput other) : this() {
      name_ = other.name_;
      imageData_ = other.imageData_ != null ? other.imageData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateImageInput Clone() {
      return new CreateImageInput(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// If multiple images types are uploaded, then the image type will be appended to the name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "imageData" field.</summary>
    public const int ImageDataFieldNumber = 2;
    private global::PassKit.Grpc.ImageData imageData_;
    /// <summary>
    /// Image data can be either a base64 image or a url.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKit.Grpc.ImageData ImageData {
      get { return imageData_; }
      set {
        imageData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateImageInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateImageInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(ImageData, other.ImageData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (imageData_ != null) hash ^= ImageData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (imageData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ImageData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (imageData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ImageData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (imageData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ImageData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateImageInput other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.imageData_ != null) {
        if (imageData_ == null) {
          ImageData = new global::PassKit.Grpc.ImageData();
        }
        ImageData.MergeFrom(other.ImageData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (imageData_ == null) {
              ImageData = new global::PassKit.Grpc.ImageData();
            }
            input.ReadMessage(ImageData);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (imageData_ == null) {
              ImageData = new global::PassKit.Grpc.ImageData();
            }
            input.ReadMessage(ImageData);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class UpdateImageInput : pb::IMessage<UpdateImageInput>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UpdateImageInput> _parser = new pb::MessageParser<UpdateImageInput>(() => new UpdateImageInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateImageInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.ImageReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateImageInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateImageInput(UpdateImageInput other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      imageData_ = other.imageData_;
      localizedImageData_ = other.localizedImageData_ != null ? other.localizedImageData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateImageInput Clone() {
      return new UpdateImageInput(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// The image id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// Optional, if omitted, the original name will remain the same.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "imageData" field.</summary>
    public const int ImageDataFieldNumber = 3;
    private string imageData_ = "";
    /// <summary>
    /// Optional, if omitted, the original image will remain the same.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageData {
      get { return imageData_; }
      set {
        imageData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "localizedImageData" field.</summary>
    public const int LocalizedImageDataFieldNumber = 4;
    private global::PassKit.Grpc.LocalizedString localizedImageData_;
    /// <summary>
    /// Optional, provided localizations will be added/replaced, existing omitted localizations will remain in place.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKit.Grpc.LocalizedString LocalizedImageData {
      get { return localizedImageData_; }
      set {
        localizedImageData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateImageInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateImageInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (ImageData != other.ImageData) return false;
      if (!object.Equals(LocalizedImageData, other.LocalizedImageData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ImageData.Length != 0) hash ^= ImageData.GetHashCode();
      if (localizedImageData_ != null) hash ^= LocalizedImageData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (ImageData.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ImageData);
      }
      if (localizedImageData_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LocalizedImageData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (ImageData.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ImageData);
      }
      if (localizedImageData_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LocalizedImageData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ImageData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageData);
      }
      if (localizedImageData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalizedImageData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateImageInput other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ImageData.Length != 0) {
        ImageData = other.ImageData;
      }
      if (other.localizedImageData_ != null) {
        if (localizedImageData_ == null) {
          LocalizedImageData = new global::PassKit.Grpc.LocalizedString();
        }
        LocalizedImageData.MergeFrom(other.LocalizedImageData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            ImageData = input.ReadString();
            break;
          }
          case 34: {
            if (localizedImageData_ == null) {
              LocalizedImageData = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedImageData);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            ImageData = input.ReadString();
            break;
          }
          case 34: {
            if (localizedImageData_ == null) {
              LocalizedImageData = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedImageData);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ImageBundle : pb::IMessage<ImageBundle>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ImageBundle> _parser = new pb::MessageParser<ImageBundle>(() => new ImageBundle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageBundle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.ImageReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageBundle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageBundle(ImageBundle other) : this() {
      image_ = other.image_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageBundle Clone() {
      return new ImageBundle(this);
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 1;
    private pb::ByteString image_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Image {
      get { return image_; }
      set {
        image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageBundle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageBundle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Image != other.Image) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Image.Length != 0) hash ^= Image.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Image.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Image);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Image.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Image);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Image.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Image);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageBundle other) {
      if (other == null) {
        return;
      }
      if (other.Image.Length != 0) {
        Image = other.Image;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Image = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Image = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LocalizedImageInput : pb::IMessage<LocalizedImageInput>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LocalizedImageInput> _parser = new pb::MessageParser<LocalizedImageInput>(() => new LocalizedImageInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LocalizedImageInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.ImageReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalizedImageInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalizedImageInput(LocalizedImageInput other) : this() {
      id_ = other.id_;
      languageCode_ = other.languageCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalizedImageInput Clone() {
      return new LocalizedImageInput(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// Image id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "languageCode" field.</summary>
    public const int LanguageCodeFieldNumber = 2;
    private string languageCode_ = "";
    /// <summary>
    /// Language code of the image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LanguageCode {
      get { return languageCode_; }
      set {
        languageCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LocalizedImageInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LocalizedImageInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (LanguageCode != other.LanguageCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (LanguageCode.Length != 0) hash ^= LanguageCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (LanguageCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LanguageCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (LanguageCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LanguageCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (LanguageCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LanguageCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LocalizedImageInput other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.LanguageCode.Length != 0) {
        LanguageCode = other.LanguageCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            LanguageCode = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            LanguageCode = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class StampImageConfig : pb::IMessage<StampImageConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StampImageConfig> _parser = new pb::MessageParser<StampImageConfig>(() => new StampImageConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StampImageConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.ImageReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StampImageConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StampImageConfig(StampImageConfig other) : this() {
      id_ = other.id_;
      padding_ = other.padding_;
      totalStamps_ = other.totalStamps_;
      stampImage_ = other.stampImage_;
      unstampImage_ = other.unstampImage_;
      backgroundImage_ = other.backgroundImage_;
      backgroundColor_ = other.backgroundColor_;
      backgroundOpacity_ = other.backgroundOpacity_;
      stampColor_ = other.stampColor_;
      stampOpacity_ = other.stampOpacity_;
      unstampColor_ = other.unstampColor_;
      unstampOpacity_ = other.unstampOpacity_;
      placeholders_ = other.placeholders_;
      placeholderColor_ = other.placeholderColor_;
      placeholderOpacity_ = other.placeholderOpacity_;
      placeholderBorderColor_ = other.placeholderBorderColor_;
      placeholderBorderOpacity_ = other.placeholderBorderOpacity_;
      rewardPlaceholders_ = other.rewardPlaceholders_;
      rewardBorderColor_ = other.rewardBorderColor_;
      rewardBorderOpacity_ = other.rewardBorderOpacity_;
      rewardBackgroundColor_ = other.rewardBackgroundColor_;
      rewardBackgroundOpacity_ = other.rewardBackgroundOpacity_;
      rewardPositions_ = other.rewardPositions_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StampImageConfig Clone() {
      return new StampImageConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "padding" field.</summary>
    public const int PaddingFieldNumber = 2;
    private float padding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Padding {
      get { return padding_; }
      set {
        padding_ = value;
      }
    }

    /// <summary>Field number for the "totalStamps" field.</summary>
    public const int TotalStampsFieldNumber = 3;
    private uint totalStamps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalStamps {
      get { return totalStamps_; }
      set {
        totalStamps_ = value;
      }
    }

    /// <summary>Field number for the "stampImage" field.</summary>
    public const int StampImageFieldNumber = 4;
    private string stampImage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StampImage {
      get { return stampImage_; }
      set {
        stampImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unstampImage" field.</summary>
    public const int UnstampImageFieldNumber = 5;
    private string unstampImage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnstampImage {
      get { return unstampImage_; }
      set {
        unstampImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "backgroundImage" field.</summary>
    public const int BackgroundImageFieldNumber = 6;
    private string backgroundImage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BackgroundImage {
      get { return backgroundImage_; }
      set {
        backgroundImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "backgroundColor" field.</summary>
    public const int BackgroundColorFieldNumber = 7;
    private string backgroundColor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BackgroundColor {
      get { return backgroundColor_; }
      set {
        backgroundColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "backgroundOpacity" field.</summary>
    public const int BackgroundOpacityFieldNumber = 8;
    private float backgroundOpacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BackgroundOpacity {
      get { return backgroundOpacity_; }
      set {
        backgroundOpacity_ = value;
      }
    }

    /// <summary>Field number for the "stampColor" field.</summary>
    public const int StampColorFieldNumber = 9;
    private string stampColor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StampColor {
      get { return stampColor_; }
      set {
        stampColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stampOpacity" field.</summary>
    public const int StampOpacityFieldNumber = 10;
    private float stampOpacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StampOpacity {
      get { return stampOpacity_; }
      set {
        stampOpacity_ = value;
      }
    }

    /// <summary>Field number for the "unstampColor" field.</summary>
    public const int UnstampColorFieldNumber = 11;
    private string unstampColor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnstampColor {
      get { return unstampColor_; }
      set {
        unstampColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unstampOpacity" field.</summary>
    public const int UnstampOpacityFieldNumber = 12;
    private float unstampOpacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float UnstampOpacity {
      get { return unstampOpacity_; }
      set {
        unstampOpacity_ = value;
      }
    }

    /// <summary>Field number for the "placeholders" field.</summary>
    public const int PlaceholdersFieldNumber = 13;
    private bool placeholders_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Placeholders {
      get { return placeholders_; }
      set {
        placeholders_ = value;
      }
    }

    /// <summary>Field number for the "placeholderColor" field.</summary>
    public const int PlaceholderColorFieldNumber = 14;
    private string placeholderColor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlaceholderColor {
      get { return placeholderColor_; }
      set {
        placeholderColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "placeholderOpacity" field.</summary>
    public const int PlaceholderOpacityFieldNumber = 15;
    private float placeholderOpacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PlaceholderOpacity {
      get { return placeholderOpacity_; }
      set {
        placeholderOpacity_ = value;
      }
    }

    /// <summary>Field number for the "placeholderBorderColor" field.</summary>
    public const int PlaceholderBorderColorFieldNumber = 16;
    private string placeholderBorderColor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlaceholderBorderColor {
      get { return placeholderBorderColor_; }
      set {
        placeholderBorderColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "placeholderBorderOpacity" field.</summary>
    public const int PlaceholderBorderOpacityFieldNumber = 17;
    private float placeholderBorderOpacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PlaceholderBorderOpacity {
      get { return placeholderBorderOpacity_; }
      set {
        placeholderBorderOpacity_ = value;
      }
    }

    /// <summary>Field number for the "rewardPlaceholders" field.</summary>
    public const int RewardPlaceholdersFieldNumber = 18;
    private bool rewardPlaceholders_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RewardPlaceholders {
      get { return rewardPlaceholders_; }
      set {
        rewardPlaceholders_ = value;
      }
    }

    /// <summary>Field number for the "rewardBorderColor" field.</summary>
    public const int RewardBorderColorFieldNumber = 19;
    private string rewardBorderColor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RewardBorderColor {
      get { return rewardBorderColor_; }
      set {
        rewardBorderColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rewardBorderOpacity" field.</summary>
    public const int RewardBorderOpacityFieldNumber = 20;
    private float rewardBorderOpacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RewardBorderOpacity {
      get { return rewardBorderOpacity_; }
      set {
        rewardBorderOpacity_ = value;
      }
    }

    /// <summary>Field number for the "rewardBackgroundColor" field.</summary>
    public const int RewardBackgroundColorFieldNumber = 21;
    private string rewardBackgroundColor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RewardBackgroundColor {
      get { return rewardBackgroundColor_; }
      set {
        rewardBackgroundColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rewardBackgroundOpacity" field.</summary>
    public const int RewardBackgroundOpacityFieldNumber = 22;
    private float rewardBackgroundOpacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RewardBackgroundOpacity {
      get { return rewardBackgroundOpacity_; }
      set {
        rewardBackgroundOpacity_ = value;
      }
    }

    /// <summary>Field number for the "rewardPositions" field.</summary>
    public const int RewardPositionsFieldNumber = 23;
    private ulong rewardPositions_;
    /// <summary>
    /// takes a bitmask of rewards positions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RewardPositions {
      get { return rewardPositions_; }
      set {
        rewardPositions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StampImageConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StampImageConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Padding, other.Padding)) return false;
      if (TotalStamps != other.TotalStamps) return false;
      if (StampImage != other.StampImage) return false;
      if (UnstampImage != other.UnstampImage) return false;
      if (BackgroundImage != other.BackgroundImage) return false;
      if (BackgroundColor != other.BackgroundColor) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BackgroundOpacity, other.BackgroundOpacity)) return false;
      if (StampColor != other.StampColor) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StampOpacity, other.StampOpacity)) return false;
      if (UnstampColor != other.UnstampColor) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UnstampOpacity, other.UnstampOpacity)) return false;
      if (Placeholders != other.Placeholders) return false;
      if (PlaceholderColor != other.PlaceholderColor) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PlaceholderOpacity, other.PlaceholderOpacity)) return false;
      if (PlaceholderBorderColor != other.PlaceholderBorderColor) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PlaceholderBorderOpacity, other.PlaceholderBorderOpacity)) return false;
      if (RewardPlaceholders != other.RewardPlaceholders) return false;
      if (RewardBorderColor != other.RewardBorderColor) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RewardBorderOpacity, other.RewardBorderOpacity)) return false;
      if (RewardBackgroundColor != other.RewardBackgroundColor) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RewardBackgroundOpacity, other.RewardBackgroundOpacity)) return false;
      if (RewardPositions != other.RewardPositions) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Padding != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Padding);
      if (TotalStamps != 0) hash ^= TotalStamps.GetHashCode();
      if (StampImage.Length != 0) hash ^= StampImage.GetHashCode();
      if (UnstampImage.Length != 0) hash ^= UnstampImage.GetHashCode();
      if (BackgroundImage.Length != 0) hash ^= BackgroundImage.GetHashCode();
      if (BackgroundColor.Length != 0) hash ^= BackgroundColor.GetHashCode();
      if (BackgroundOpacity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BackgroundOpacity);
      if (StampColor.Length != 0) hash ^= StampColor.GetHashCode();
      if (StampOpacity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StampOpacity);
      if (UnstampColor.Length != 0) hash ^= UnstampColor.GetHashCode();
      if (UnstampOpacity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UnstampOpacity);
      if (Placeholders != false) hash ^= Placeholders.GetHashCode();
      if (PlaceholderColor.Length != 0) hash ^= PlaceholderColor.GetHashCode();
      if (PlaceholderOpacity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PlaceholderOpacity);
      if (PlaceholderBorderColor.Length != 0) hash ^= PlaceholderBorderColor.GetHashCode();
      if (PlaceholderBorderOpacity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PlaceholderBorderOpacity);
      if (RewardPlaceholders != false) hash ^= RewardPlaceholders.GetHashCode();
      if (RewardBorderColor.Length != 0) hash ^= RewardBorderColor.GetHashCode();
      if (RewardBorderOpacity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RewardBorderOpacity);
      if (RewardBackgroundColor.Length != 0) hash ^= RewardBackgroundColor.GetHashCode();
      if (RewardBackgroundOpacity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RewardBackgroundOpacity);
      if (RewardPositions != 0UL) hash ^= RewardPositions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Padding != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Padding);
      }
      if (TotalStamps != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TotalStamps);
      }
      if (StampImage.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(StampImage);
      }
      if (UnstampImage.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(UnstampImage);
      }
      if (BackgroundImage.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BackgroundImage);
      }
      if (BackgroundColor.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(BackgroundColor);
      }
      if (BackgroundOpacity != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(BackgroundOpacity);
      }
      if (StampColor.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(StampColor);
      }
      if (StampOpacity != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(StampOpacity);
      }
      if (UnstampColor.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(UnstampColor);
      }
      if (UnstampOpacity != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(UnstampOpacity);
      }
      if (Placeholders != false) {
        output.WriteRawTag(104);
        output.WriteBool(Placeholders);
      }
      if (PlaceholderColor.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(PlaceholderColor);
      }
      if (PlaceholderOpacity != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(PlaceholderOpacity);
      }
      if (PlaceholderBorderColor.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(PlaceholderBorderColor);
      }
      if (PlaceholderBorderOpacity != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(PlaceholderBorderOpacity);
      }
      if (RewardPlaceholders != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(RewardPlaceholders);
      }
      if (RewardBorderColor.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(RewardBorderColor);
      }
      if (RewardBorderOpacity != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(RewardBorderOpacity);
      }
      if (RewardBackgroundColor.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(RewardBackgroundColor);
      }
      if (RewardBackgroundOpacity != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(RewardBackgroundOpacity);
      }
      if (RewardPositions != 0UL) {
        output.WriteRawTag(184, 1);
        output.WriteUInt64(RewardPositions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Padding != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Padding);
      }
      if (TotalStamps != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TotalStamps);
      }
      if (StampImage.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(StampImage);
      }
      if (UnstampImage.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(UnstampImage);
      }
      if (BackgroundImage.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BackgroundImage);
      }
      if (BackgroundColor.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(BackgroundColor);
      }
      if (BackgroundOpacity != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(BackgroundOpacity);
      }
      if (StampColor.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(StampColor);
      }
      if (StampOpacity != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(StampOpacity);
      }
      if (UnstampColor.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(UnstampColor);
      }
      if (UnstampOpacity != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(UnstampOpacity);
      }
      if (Placeholders != false) {
        output.WriteRawTag(104);
        output.WriteBool(Placeholders);
      }
      if (PlaceholderColor.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(PlaceholderColor);
      }
      if (PlaceholderOpacity != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(PlaceholderOpacity);
      }
      if (PlaceholderBorderColor.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(PlaceholderBorderColor);
      }
      if (PlaceholderBorderOpacity != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(PlaceholderBorderOpacity);
      }
      if (RewardPlaceholders != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(RewardPlaceholders);
      }
      if (RewardBorderColor.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(RewardBorderColor);
      }
      if (RewardBorderOpacity != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(RewardBorderOpacity);
      }
      if (RewardBackgroundColor.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(RewardBackgroundColor);
      }
      if (RewardBackgroundOpacity != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(RewardBackgroundOpacity);
      }
      if (RewardPositions != 0UL) {
        output.WriteRawTag(184, 1);
        output.WriteUInt64(RewardPositions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Padding != 0F) {
        size += 1 + 4;
      }
      if (TotalStamps != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalStamps);
      }
      if (StampImage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StampImage);
      }
      if (UnstampImage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnstampImage);
      }
      if (BackgroundImage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BackgroundImage);
      }
      if (BackgroundColor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BackgroundColor);
      }
      if (BackgroundOpacity != 0F) {
        size += 1 + 4;
      }
      if (StampColor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StampColor);
      }
      if (StampOpacity != 0F) {
        size += 1 + 4;
      }
      if (UnstampColor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnstampColor);
      }
      if (UnstampOpacity != 0F) {
        size += 1 + 4;
      }
      if (Placeholders != false) {
        size += 1 + 1;
      }
      if (PlaceholderColor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlaceholderColor);
      }
      if (PlaceholderOpacity != 0F) {
        size += 1 + 4;
      }
      if (PlaceholderBorderColor.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PlaceholderBorderColor);
      }
      if (PlaceholderBorderOpacity != 0F) {
        size += 2 + 4;
      }
      if (RewardPlaceholders != false) {
        size += 2 + 1;
      }
      if (RewardBorderColor.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RewardBorderColor);
      }
      if (RewardBorderOpacity != 0F) {
        size += 2 + 4;
      }
      if (RewardBackgroundColor.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RewardBackgroundColor);
      }
      if (RewardBackgroundOpacity != 0F) {
        size += 2 + 4;
      }
      if (RewardPositions != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(RewardPositions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StampImageConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Padding != 0F) {
        Padding = other.Padding;
      }
      if (other.TotalStamps != 0) {
        TotalStamps = other.TotalStamps;
      }
      if (other.StampImage.Length != 0) {
        StampImage = other.StampImage;
      }
      if (other.UnstampImage.Length != 0) {
        UnstampImage = other.UnstampImage;
      }
      if (other.BackgroundImage.Length != 0) {
        BackgroundImage = other.BackgroundImage;
      }
      if (other.BackgroundColor.Length != 0) {
        BackgroundColor = other.BackgroundColor;
      }
      if (other.BackgroundOpacity != 0F) {
        BackgroundOpacity = other.BackgroundOpacity;
      }
      if (other.StampColor.Length != 0) {
        StampColor = other.StampColor;
      }
      if (other.StampOpacity != 0F) {
        StampOpacity = other.StampOpacity;
      }
      if (other.UnstampColor.Length != 0) {
        UnstampColor = other.UnstampColor;
      }
      if (other.UnstampOpacity != 0F) {
        UnstampOpacity = other.UnstampOpacity;
      }
      if (other.Placeholders != false) {
        Placeholders = other.Placeholders;
      }
      if (other.PlaceholderColor.Length != 0) {
        PlaceholderColor = other.PlaceholderColor;
      }
      if (other.PlaceholderOpacity != 0F) {
        PlaceholderOpacity = other.PlaceholderOpacity;
      }
      if (other.PlaceholderBorderColor.Length != 0) {
        PlaceholderBorderColor = other.PlaceholderBorderColor;
      }
      if (other.PlaceholderBorderOpacity != 0F) {
        PlaceholderBorderOpacity = other.PlaceholderBorderOpacity;
      }
      if (other.RewardPlaceholders != false) {
        RewardPlaceholders = other.RewardPlaceholders;
      }
      if (other.RewardBorderColor.Length != 0) {
        RewardBorderColor = other.RewardBorderColor;
      }
      if (other.RewardBorderOpacity != 0F) {
        RewardBorderOpacity = other.RewardBorderOpacity;
      }
      if (other.RewardBackgroundColor.Length != 0) {
        RewardBackgroundColor = other.RewardBackgroundColor;
      }
      if (other.RewardBackgroundOpacity != 0F) {
        RewardBackgroundOpacity = other.RewardBackgroundOpacity;
      }
      if (other.RewardPositions != 0UL) {
        RewardPositions = other.RewardPositions;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 21: {
            Padding = input.ReadFloat();
            break;
          }
          case 24: {
            TotalStamps = input.ReadUInt32();
            break;
          }
          case 34: {
            StampImage = input.ReadString();
            break;
          }
          case 42: {
            UnstampImage = input.ReadString();
            break;
          }
          case 50: {
            BackgroundImage = input.ReadString();
            break;
          }
          case 58: {
            BackgroundColor = input.ReadString();
            break;
          }
          case 69: {
            BackgroundOpacity = input.ReadFloat();
            break;
          }
          case 74: {
            StampColor = input.ReadString();
            break;
          }
          case 85: {
            StampOpacity = input.ReadFloat();
            break;
          }
          case 90: {
            UnstampColor = input.ReadString();
            break;
          }
          case 101: {
            UnstampOpacity = input.ReadFloat();
            break;
          }
          case 104: {
            Placeholders = input.ReadBool();
            break;
          }
          case 114: {
            PlaceholderColor = input.ReadString();
            break;
          }
          case 125: {
            PlaceholderOpacity = input.ReadFloat();
            break;
          }
          case 130: {
            PlaceholderBorderColor = input.ReadString();
            break;
          }
          case 141: {
            PlaceholderBorderOpacity = input.ReadFloat();
            break;
          }
          case 144: {
            RewardPlaceholders = input.ReadBool();
            break;
          }
          case 154: {
            RewardBorderColor = input.ReadString();
            break;
          }
          case 165: {
            RewardBorderOpacity = input.ReadFloat();
            break;
          }
          case 170: {
            RewardBackgroundColor = input.ReadString();
            break;
          }
          case 181: {
            RewardBackgroundOpacity = input.ReadFloat();
            break;
          }
          case 184: {
            RewardPositions = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 21: {
            Padding = input.ReadFloat();
            break;
          }
          case 24: {
            TotalStamps = input.ReadUInt32();
            break;
          }
          case 34: {
            StampImage = input.ReadString();
            break;
          }
          case 42: {
            UnstampImage = input.ReadString();
            break;
          }
          case 50: {
            BackgroundImage = input.ReadString();
            break;
          }
          case 58: {
            BackgroundColor = input.ReadString();
            break;
          }
          case 69: {
            BackgroundOpacity = input.ReadFloat();
            break;
          }
          case 74: {
            StampColor = input.ReadString();
            break;
          }
          case 85: {
            StampOpacity = input.ReadFloat();
            break;
          }
          case 90: {
            UnstampColor = input.ReadString();
            break;
          }
          case 101: {
            UnstampOpacity = input.ReadFloat();
            break;
          }
          case 104: {
            Placeholders = input.ReadBool();
            break;
          }
          case 114: {
            PlaceholderColor = input.ReadString();
            break;
          }
          case 125: {
            PlaceholderOpacity = input.ReadFloat();
            break;
          }
          case 130: {
            PlaceholderBorderColor = input.ReadString();
            break;
          }
          case 141: {
            PlaceholderBorderOpacity = input.ReadFloat();
            break;
          }
          case 144: {
            RewardPlaceholders = input.ReadBool();
            break;
          }
          case 154: {
            RewardBorderColor = input.ReadString();
            break;
          }
          case 165: {
            RewardBorderOpacity = input.ReadFloat();
            break;
          }
          case 170: {
            RewardBackgroundColor = input.ReadString();
            break;
          }
          case 181: {
            RewardBackgroundOpacity = input.ReadFloat();
            break;
          }
          case 184: {
            RewardPositions = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
