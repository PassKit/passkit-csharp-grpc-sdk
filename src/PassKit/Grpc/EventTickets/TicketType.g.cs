// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: io/event_tickets/ticket_type.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PassKit.Grpc.EventTickets {

  /// <summary>Holder for reflection information generated from io/event_tickets/ticket_type.proto</summary>
  public static partial class TicketTypeReflection {

    #region Descriptor
    /// <summary>File descriptor for io/event_tickets/ticket_type.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TicketTypeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiJpby9ldmVudF90aWNrZXRzL3RpY2tldF90eXBlLnByb3RvEg1ldmVudF90",
            "aWNrZXRzGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvGhxpby9j",
            "b21tb24vbG9jYWxpemF0aW9uLnByb3RvGhZpby9jb21tb24vZmlsdGVyLnBy",
            "b3RvGi5wcm90b2MtZ2VuLW9wZW5hcGl2Mi9vcHRpb25zL2Fubm90YXRpb25z",
            "LnByb3RvIr8ECgpUaWNrZXRUeXBlEhEKAmlkGAEgASgJQgWSQQJAARILCgN1",
            "aWQYAiABKAkSFAoMcHJvZHVjdGlvbklkGAMgASgJEgwKBG5hbWUYBCABKAkS",
            "KgoNbG9jYWxpemVkTmFtZRgFIAEoCzITLmlvLkxvY2FsaXplZFN0cmluZxIc",
            "ChR0aWNrZXRUeXBlQ29uZGl0aW9ucxgGIAEoCRI6Ch1sb2NhbGl6ZWRUaWNr",
            "ZXRUeXBlQ29uZGl0aW9ucxgHIAEoCzITLmlvLkxvY2FsaXplZFN0cmluZxIi",
            "ChpiZWZvcmVSZWRlZW1QYXNzVGVtcGxhdGVJZBgIIAEoCRIhChlhZnRlclJl",
            "ZGVlbVBhc3NUZW1wbGF0ZUlkGAkgASgJEjIKB2NyZWF0ZWQYCiABKAsyGi5n",
            "b29nbGUucHJvdG9idWYuVGltZXN0YW1wQgWSQQJAARIyCgd1cGRhdGVkGAsg",
            "ASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEIFkkECQAE6twGSQbMB",
            "CrABKgtUaWNrZXQgVHlwZTJuVGlja2V0IFR5cGUgaG9sZHMgZGV0YWlscyBh",
            "Ym91dCB0aGUgdGlja2V0IHR5cGUsIGFuZCBsaW5rcyB0byB0aGUgYmVmb3Jl",
            "ICYgYWZ0ZXIgcmVkZWVtIFBhc3MgVGVtcGxhdGUgRGVzaWducy7SAQxwcm9k",
            "dWN0aW9uSWTSAQRuYW1l0gEaYmVmb3JlUmVkZWVtUGFzc1RlbXBsYXRlSWQi",
            "NAoPR2V0QnlVaWRSZXF1ZXN0EhQKDHByb2R1Y3Rpb25JZBgBIAEoCRILCgN1",
            "aWQYAiABKAki0wEKF1RpY2tldFR5cGVMaW1pdGVkRmllbGRzEgoKAmlkGAEg",
            "ASgJEgsKA3VpZBgCIAEoCRIMCgRuYW1lGAMgASgJOpABkkGMAQqJASoXVGlj",
            "a2V0IFR5cGUgKExpZ2h0IHZlcikyblRpY2tldCBUeXBlIGhvbGRzIGRldGFp",
            "bHMgYWJvdXQgdGhlIHRpY2tldCB0eXBlLCBhbmQgbGlua3MgdG8gdGhlIGJl",
            "Zm9yZSAmIGFmdGVyIHJlZGVlbSBQYXNzIFRlbXBsYXRlIERlc2lnbnMuIksK",
            "FVRpY2tldFR5cGVMaXN0UmVxdWVzdBIUCgxwcm9kdWN0aW9uSWQYASABKAkS",
            "HAoHZmlsdGVycxgCIAEoCzILLmlvLkZpbHRlcnNCbwodY29tLnBhc3NraXQu",
            "Z3JwYy5FdmVudFRpY2tldHNaMnN0YXNoLnBhc3NraXQuY29tL2lvL21vZGVs",
            "L3Nkay9nby9pby9ldmVudF90aWNrZXRzqgIZUGFzc0tpdC5HcnBjLkV2ZW50",
            "VGlja2V0c2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::PassKit.Grpc.LocalizationReflection.Descriptor, global::PassKit.Grpc.FilterReflection.Descriptor, global::PassKit.Grpc.Gateway.ProtocGenOpenapiv2.Options.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.EventTickets.TicketType), global::PassKit.Grpc.EventTickets.TicketType.Parser, new[]{ "Id", "Uid", "ProductionId", "Name", "LocalizedName", "TicketTypeConditions", "LocalizedTicketTypeConditions", "BeforeRedeemPassTemplateId", "AfterRedeemPassTemplateId", "Created", "Updated" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.EventTickets.GetByUidRequest), global::PassKit.Grpc.EventTickets.GetByUidRequest.Parser, new[]{ "ProductionId", "Uid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.EventTickets.TicketTypeLimitedFields), global::PassKit.Grpc.EventTickets.TicketTypeLimitedFields.Parser, new[]{ "Id", "Uid", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.EventTickets.TicketTypeListRequest), global::PassKit.Grpc.EventTickets.TicketTypeListRequest.Parser, new[]{ "ProductionId", "Filters" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// The Ticket Type Details
  /// </summary>
  public sealed partial class TicketType : pb::IMessage<TicketType>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TicketType> _parser = new pb::MessageParser<TicketType>(() => new TicketType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TicketType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.EventTickets.TicketTypeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketType(TicketType other) : this() {
      id_ = other.id_;
      uid_ = other.uid_;
      productionId_ = other.productionId_;
      name_ = other.name_;
      localizedName_ = other.localizedName_ != null ? other.localizedName_.Clone() : null;
      ticketTypeConditions_ = other.ticketTypeConditions_;
      localizedTicketTypeConditions_ = other.localizedTicketTypeConditions_ != null ? other.localizedTicketTypeConditions_.Clone() : null;
      beforeRedeemPassTemplateId_ = other.beforeRedeemPassTemplateId_;
      afterRedeemPassTemplateId_ = other.afterRedeemPassTemplateId_;
      created_ = other.created_ != null ? other.created_.Clone() : null;
      updated_ = other.updated_ != null ? other.updated_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketType Clone() {
      return new TicketType(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// PassKit generated ticket type id (22 characters).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private string uid_ = "";
    /// <summary>
    /// User generated ticket type id; unique within the Production.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "productionId" field.</summary>
    public const int ProductionIdFieldNumber = 3;
    private string productionId_ = "";
    /// <summary>
    /// The Production the ticket type belongs to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductionId {
      get { return productionId_; }
      set {
        productionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    /// <summary>
    /// Name of the ticket type. Internal use only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "localizedName" field.</summary>
    public const int LocalizedNameFieldNumber = 5;
    private global::PassKit.Grpc.LocalizedString localizedName_;
    /// <summary>
    /// Localized name of the ticket type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKit.Grpc.LocalizedString LocalizedName {
      get { return localizedName_; }
      set {
        localizedName_ = value;
      }
    }

    /// <summary>Field number for the "ticketTypeConditions" field.</summary>
    public const int TicketTypeConditionsFieldNumber = 6;
    private string ticketTypeConditions_ = "";
    /// <summary>
    /// Terms &amp; conditions specifically for this ticket type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TicketTypeConditions {
      get { return ticketTypeConditions_; }
      set {
        ticketTypeConditions_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "localizedTicketTypeConditions" field.</summary>
    public const int LocalizedTicketTypeConditionsFieldNumber = 7;
    private global::PassKit.Grpc.LocalizedString localizedTicketTypeConditions_;
    /// <summary>
    /// Localized ticket conditions for this ticket type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKit.Grpc.LocalizedString LocalizedTicketTypeConditions {
      get { return localizedTicketTypeConditions_; }
      set {
        localizedTicketTypeConditions_ = value;
      }
    }

    /// <summary>Field number for the "beforeRedeemPassTemplateId" field.</summary>
    public const int BeforeRedeemPassTemplateIdFieldNumber = 8;
    private string beforeRedeemPassTemplateId_ = "";
    /// <summary>
    /// The pass template design ID that tickets will use when initially issued.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BeforeRedeemPassTemplateId {
      get { return beforeRedeemPassTemplateId_; }
      set {
        beforeRedeemPassTemplateId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "afterRedeemPassTemplateId" field.</summary>
    public const int AfterRedeemPassTemplateIdFieldNumber = 9;
    private string afterRedeemPassTemplateId_ = "";
    /// <summary>
    /// Optional pass template ID that tickets will use after the ticket holder checked into the venue (when the ticket switches to its redeemed state).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AfterRedeemPassTemplateId {
      get { return afterRedeemPassTemplateId_; }
      set {
        afterRedeemPassTemplateId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created" field.</summary>
    public const int CreatedFieldNumber = 10;
    private global::Google.Protobuf.WellKnownTypes.Timestamp created_;
    /// <summary>
    /// The date the ticket type was created. Cannot be set via the API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Created {
      get { return created_; }
      set {
        created_ = value;
      }
    }

    /// <summary>Field number for the "updated" field.</summary>
    public const int UpdatedFieldNumber = 11;
    private global::Google.Protobuf.WellKnownTypes.Timestamp updated_;
    /// <summary>
    /// The date the ticket type updated. Cannot be set via the API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Updated {
      get { return updated_; }
      set {
        updated_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TicketType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TicketType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Uid != other.Uid) return false;
      if (ProductionId != other.ProductionId) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(LocalizedName, other.LocalizedName)) return false;
      if (TicketTypeConditions != other.TicketTypeConditions) return false;
      if (!object.Equals(LocalizedTicketTypeConditions, other.LocalizedTicketTypeConditions)) return false;
      if (BeforeRedeemPassTemplateId != other.BeforeRedeemPassTemplateId) return false;
      if (AfterRedeemPassTemplateId != other.AfterRedeemPassTemplateId) return false;
      if (!object.Equals(Created, other.Created)) return false;
      if (!object.Equals(Updated, other.Updated)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (ProductionId.Length != 0) hash ^= ProductionId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (localizedName_ != null) hash ^= LocalizedName.GetHashCode();
      if (TicketTypeConditions.Length != 0) hash ^= TicketTypeConditions.GetHashCode();
      if (localizedTicketTypeConditions_ != null) hash ^= LocalizedTicketTypeConditions.GetHashCode();
      if (BeforeRedeemPassTemplateId.Length != 0) hash ^= BeforeRedeemPassTemplateId.GetHashCode();
      if (AfterRedeemPassTemplateId.Length != 0) hash ^= AfterRedeemPassTemplateId.GetHashCode();
      if (created_ != null) hash ^= Created.GetHashCode();
      if (updated_ != null) hash ^= Updated.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uid);
      }
      if (ProductionId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ProductionId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (localizedName_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(LocalizedName);
      }
      if (TicketTypeConditions.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(TicketTypeConditions);
      }
      if (localizedTicketTypeConditions_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(LocalizedTicketTypeConditions);
      }
      if (BeforeRedeemPassTemplateId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(BeforeRedeemPassTemplateId);
      }
      if (AfterRedeemPassTemplateId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(AfterRedeemPassTemplateId);
      }
      if (created_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Created);
      }
      if (updated_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Updated);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uid);
      }
      if (ProductionId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ProductionId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (localizedName_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(LocalizedName);
      }
      if (TicketTypeConditions.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(TicketTypeConditions);
      }
      if (localizedTicketTypeConditions_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(LocalizedTicketTypeConditions);
      }
      if (BeforeRedeemPassTemplateId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(BeforeRedeemPassTemplateId);
      }
      if (AfterRedeemPassTemplateId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(AfterRedeemPassTemplateId);
      }
      if (created_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Created);
      }
      if (updated_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Updated);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (ProductionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductionId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (localizedName_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalizedName);
      }
      if (TicketTypeConditions.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TicketTypeConditions);
      }
      if (localizedTicketTypeConditions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalizedTicketTypeConditions);
      }
      if (BeforeRedeemPassTemplateId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BeforeRedeemPassTemplateId);
      }
      if (AfterRedeemPassTemplateId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AfterRedeemPassTemplateId);
      }
      if (created_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Created);
      }
      if (updated_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Updated);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TicketType other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.ProductionId.Length != 0) {
        ProductionId = other.ProductionId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.localizedName_ != null) {
        if (localizedName_ == null) {
          LocalizedName = new global::PassKit.Grpc.LocalizedString();
        }
        LocalizedName.MergeFrom(other.LocalizedName);
      }
      if (other.TicketTypeConditions.Length != 0) {
        TicketTypeConditions = other.TicketTypeConditions;
      }
      if (other.localizedTicketTypeConditions_ != null) {
        if (localizedTicketTypeConditions_ == null) {
          LocalizedTicketTypeConditions = new global::PassKit.Grpc.LocalizedString();
        }
        LocalizedTicketTypeConditions.MergeFrom(other.LocalizedTicketTypeConditions);
      }
      if (other.BeforeRedeemPassTemplateId.Length != 0) {
        BeforeRedeemPassTemplateId = other.BeforeRedeemPassTemplateId;
      }
      if (other.AfterRedeemPassTemplateId.Length != 0) {
        AfterRedeemPassTemplateId = other.AfterRedeemPassTemplateId;
      }
      if (other.created_ != null) {
        if (created_ == null) {
          Created = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Created.MergeFrom(other.Created);
      }
      if (other.updated_ != null) {
        if (updated_ == null) {
          Updated = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Updated.MergeFrom(other.Updated);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Uid = input.ReadString();
            break;
          }
          case 26: {
            ProductionId = input.ReadString();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            if (localizedName_ == null) {
              LocalizedName = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedName);
            break;
          }
          case 50: {
            TicketTypeConditions = input.ReadString();
            break;
          }
          case 58: {
            if (localizedTicketTypeConditions_ == null) {
              LocalizedTicketTypeConditions = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedTicketTypeConditions);
            break;
          }
          case 66: {
            BeforeRedeemPassTemplateId = input.ReadString();
            break;
          }
          case 74: {
            AfterRedeemPassTemplateId = input.ReadString();
            break;
          }
          case 82: {
            if (created_ == null) {
              Created = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Created);
            break;
          }
          case 90: {
            if (updated_ == null) {
              Updated = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Updated);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Uid = input.ReadString();
            break;
          }
          case 26: {
            ProductionId = input.ReadString();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            if (localizedName_ == null) {
              LocalizedName = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedName);
            break;
          }
          case 50: {
            TicketTypeConditions = input.ReadString();
            break;
          }
          case 58: {
            if (localizedTicketTypeConditions_ == null) {
              LocalizedTicketTypeConditions = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedTicketTypeConditions);
            break;
          }
          case 66: {
            BeforeRedeemPassTemplateId = input.ReadString();
            break;
          }
          case 74: {
            AfterRedeemPassTemplateId = input.ReadString();
            break;
          }
          case 82: {
            if (created_ == null) {
              Created = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Created);
            break;
          }
          case 90: {
            if (updated_ == null) {
              Updated = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Updated);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GetByUidRequest : pb::IMessage<GetByUidRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetByUidRequest> _parser = new pb::MessageParser<GetByUidRequest>(() => new GetByUidRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetByUidRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.EventTickets.TicketTypeReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetByUidRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetByUidRequest(GetByUidRequest other) : this() {
      productionId_ = other.productionId_;
      uid_ = other.uid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetByUidRequest Clone() {
      return new GetByUidRequest(this);
    }

    /// <summary>Field number for the "productionId" field.</summary>
    public const int ProductionIdFieldNumber = 1;
    private string productionId_ = "";
    /// <summary>
    /// The production id of the ticket type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductionId {
      get { return productionId_; }
      set {
        productionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private string uid_ = "";
    /// <summary>
    /// User defined id of the ticket type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetByUidRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetByUidRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProductionId != other.ProductionId) return false;
      if (Uid != other.Uid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProductionId.Length != 0) hash ^= ProductionId.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ProductionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProductionId);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ProductionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProductionId);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProductionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductionId);
      }
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetByUidRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProductionId.Length != 0) {
        ProductionId = other.ProductionId;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ProductionId = input.ReadString();
            break;
          }
          case 18: {
            Uid = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ProductionId = input.ReadString();
            break;
          }
          case 18: {
            Uid = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TicketTypeLimitedFields : pb::IMessage<TicketTypeLimitedFields>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TicketTypeLimitedFields> _parser = new pb::MessageParser<TicketTypeLimitedFields>(() => new TicketTypeLimitedFields());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TicketTypeLimitedFields> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.EventTickets.TicketTypeReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketTypeLimitedFields() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketTypeLimitedFields(TicketTypeLimitedFields other) : this() {
      id_ = other.id_;
      uid_ = other.uid_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketTypeLimitedFields Clone() {
      return new TicketTypeLimitedFields(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// PassKit generated ticket type id (22 characters).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private string uid_ = "";
    /// <summary>
    /// User generated ticket type id; unique within the Production.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    /// Name of the ticket type. Internal use only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TicketTypeLimitedFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TicketTypeLimitedFields other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Uid != other.Uid) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TicketTypeLimitedFields other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Uid = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Uid = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TicketTypeListRequest : pb::IMessage<TicketTypeListRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TicketTypeListRequest> _parser = new pb::MessageParser<TicketTypeListRequest>(() => new TicketTypeListRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TicketTypeListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.EventTickets.TicketTypeReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketTypeListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketTypeListRequest(TicketTypeListRequest other) : this() {
      productionId_ = other.productionId_;
      filters_ = other.filters_ != null ? other.filters_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketTypeListRequest Clone() {
      return new TicketTypeListRequest(this);
    }

    /// <summary>Field number for the "productionId" field.</summary>
    public const int ProductionIdFieldNumber = 1;
    private string productionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductionId {
      get { return productionId_; }
      set {
        productionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filters" field.</summary>
    public const int FiltersFieldNumber = 2;
    private global::PassKit.Grpc.Filters filters_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKit.Grpc.Filters Filters {
      get { return filters_; }
      set {
        filters_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TicketTypeListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TicketTypeListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProductionId != other.ProductionId) return false;
      if (!object.Equals(Filters, other.Filters)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProductionId.Length != 0) hash ^= ProductionId.GetHashCode();
      if (filters_ != null) hash ^= Filters.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ProductionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProductionId);
      }
      if (filters_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Filters);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ProductionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProductionId);
      }
      if (filters_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Filters);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProductionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductionId);
      }
      if (filters_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Filters);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TicketTypeListRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProductionId.Length != 0) {
        ProductionId = other.ProductionId;
      }
      if (other.filters_ != null) {
        if (filters_ == null) {
          Filters = new global::PassKit.Grpc.Filters();
        }
        Filters.MergeFrom(other.Filters);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ProductionId = input.ReadString();
            break;
          }
          case 18: {
            if (filters_ == null) {
              Filters = new global::PassKit.Grpc.Filters();
            }
            input.ReadMessage(Filters);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ProductionId = input.ReadString();
            break;
          }
          case 18: {
            if (filters_ == null) {
              Filters = new global::PassKit.Grpc.Filters();
            }
            input.ReadMessage(Filters);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
