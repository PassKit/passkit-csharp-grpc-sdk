// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: io/flights/boarding_pass.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PassKit.Grpc.Flights {

  /// <summary>Holder for reflection information generated from io/flights/boarding_pass.proto</summary>
  public static partial class BoardingPassReflection {

    #region Descriptor
    /// <summary>File descriptor for io/flights/boarding_pass.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BoardingPassReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5pby9mbGlnaHRzL2JvYXJkaW5nX3Bhc3MucHJvdG8SB2ZsaWdodHMaGmlv",
            "L2ZsaWdodHMvcGFzc2VuZ2VyLnByb3RvGhhpby9mbGlnaHRzL2JhcmNvZGUu",
            "cHJvdG8aKGlvL2ZsaWdodHMvY2FiaW5fY29kZXMvY2FiaW5fY29kZXMucHJv",
            "dG8aHmlvL2NvbW1vbi9jb21tb25fb2JqZWN0cy5wcm90bxoZaW8vY29tbW9u",
            "L3Byb3hpbWl0eS5wcm90bxoVaW8vY29tbW9uL2xpbmtzLnByb3RvGhdpby9j",
            "b21tb24vbWV0cmljcy5wcm90bxoucHJvdG9jLWdlbi1vcGVuYXBpdjIvb3B0",
            "aW9ucy9hbm5vdGF0aW9ucy5wcm90byK/DwoSQm9hcmRpbmdQYXNzUmVjb3Jk",
            "EgoKAmlkGAEgASgJEjIKE29wZXJhdGluZ0NhcnJpZXJQTlIYAiABKAlCFZJB",
            "EooBD15bQS1aMC05XXs1LDd9JBLYAgoLcmVsYXRlZFBOUnMYAyADKAlCwgKS",
            "Qb4CMpcCUmVsYXRlZCBQTlJzIGNhbiBiZSB1c2VkIHRvIGluZGV4IHRoZSBy",
            "ZWNvcmQgYW5kIGNhbiBiZSB0aGUgbWFya2V0aW5nIGNhcnJpZXIgUE5SIG9y",
            "IGEgbWFzdGVyIFBOUiBjb250YWluaW5nIG11bHRpcGxlIGJvb2tpbmdzLiBJ",
            "ZiByZXF1aXJlZCwgYSByZWxhdGVkIFBOUiBjYW4gYmUgZm9sbG93ZWQgYnkg",
            "dGhlIHR3byBvciB0aHJlZSBjaGFyYWN0ZXIgZGVzaWduYXRvciBvZiB0aGUg",
            "Y2FycmllciBvciBDUlMgY29udHJvbGxpbmcgdGhlIFBOUiwgc2VwYXJhdGVk",
            "IGJ5IGFuIG9ibGlxdWUuigEhXltBLVowLTldezUsN30oXC9bQS1aMC05XXsy",
            "LDN9KT8kEioKDHRpY2tldE51bWJlchgEIAEoCUIUkkERigEOXihbMC05XXsz",
            "LDEwfSQSHwoJdGlja2V0TGVnGAUgASgFQgySQQlpAAAAAAAA8D8SKQoNYm9h",
            "cmRpbmdQb2ludBgGIAEoCUISkkEPigEMXltBLVpdezMsNH0kEioKDmRlcGxh",
            "bmluZ1BvaW50GAcgASgJQhKSQQ+KAQxeW0EtWl17Myw0fSQSHQoLY2Fycmll",
            "ckNvZGUYCCABKAlCCJJBBXgDgAECEhsKDGZsaWdodE51bWJlchgJIAEoCUIF",
            "kkECeAUSHwoNZGVwYXJ0dXJlRGF0ZRgLIAEoCzIILmlvLkRhdGUSJQoJcGFz",
            "c2VuZ2VyGAwgASgLMhIuZmxpZ2h0cy5QYXNzZW5nZXISDQoFY2xhc3MYDSAB",
            "KAkSNQoPY29tcGFydG1lbnRDb2RlGA4gASgOMhwuY2FiaW5fY29kZXMuQ29t",
            "cGFydG1lbnRDb2RlEhkKCnNlYXROdW1iZXIYDyABKAlCBZJBAngFEhYKDnNl",
            "cXVlbmNlTnVtYmVyGBAgASgFEhUKDWJvYXJkaW5nR3JvdXAYESABKAkSGAoQ",
            "Ym9hcmRpbmdQb3NpdGlvbhgSIAEoCRImChRmcmVlQmFnZ2FnZUFsbG93YW5j",
            "ZRgTIAEoCUIIkkEFeAOAAQMSIgoQY2FycnlPbkFsbG93YW5jZRgUIAEoCUII",
            "kkEFeAOAAQMSEAoIc3NyQ29kZXMYFSADKAkSCwoDb3NpGBYgASgJEg8KB3Jl",
            "bWFya3MYFyABKAkSMQoPcGFzc2VuZ2VyU3RhdHVzGBggASgOMhguZmxpZ2h0",
            "cy5QYXNzZW5nZXJTdGF0dXMSMwoQY29uZGl0aW9uYWxJdGVtcxgZIAEoCzIZ",
            "LmZsaWdodHMuQ29uZGl0aW9uYWxJdGVtcxIWCg5iYXJjb2RlUGF5bG9hZBga",
            "IAEoCRIVCg1zZWN1cml0eUltYWdlGBsgASgJEhYKDnByaXZpbGVnZUltYWdl",
            "GBwgASgJEhMKC2Zvb3RlckltYWdlGB0gASgJEjEKEGxvY2F0aW9uTWVzc2Fn",
            "ZXMYHiADKAsyDy5pby5HUFNMb2NhdGlvbkIGkkEDoAEKEioKDmJlYWNvbk1l",
            "c3NhZ2VzGB8gAygLMgouaW8uQmVhY29uQgaSQQOgAQoSHwoFbGlua3MYICAD",
            "KAsyCC5pby5MaW5rQgaSQQOgAQoSHQoVYmFyY29kZUFkZGl0aW9uYWxEYXRh",
            "GCEgASgJEhQKDGluZmFudFBhc3NJZBgiIAEoCRIqChNhZGRpdGlvbmFsRGF0",
            "YUl0ZW1zGCMgASgLMg0uaW8uRGF0YUl0ZW1zEh4KCG1ldGFkYXRhGCQgASgL",
            "MgwuaW8uTWV0YWRhdGE6+gOSQfYDCvMDKhRCb2FyZGluZyBQYXNzIFJlY29y",
            "ZDLZAkEgQm9hcmRpbmcgUGFzcyByZWNvcmQgaXMgdW5pcXVlIHRvIGFuIGlu",
            "ZGl2aWR1YWwgcGFzc2VuZ2VyIGpvdXJuZXkgZm9ybSBhIGJvYXJkaW5nIHBv",
            "aW50IHRvIGEgZGVwbGFuaW5nIHBvaW50LiBBIENhcnJpZXIgYW5kIGEgRmxp",
            "Z2h0IERlc2lnbmF0aW9uIHJlY29yZCBtdXN0IGV4aXN0LiBJZiBhIEZsaWdo",
            "dCByZWNvcmQgZG9lcyBub3QgYWxyZWFkeSBleGlzdCwgdGhlbiBpdCB3aWxs",
            "IGJlIGF1dG8tZ2VuZXJhdGVkIGJhc2VkIG9uIHRoZSBGbGlnaHQgRGVzaWdu",
            "YXRpb24gcmVjb3JkIChhbmQgb3RoZXIgcHVibGljbHkgYXZhaWxhYmxlIGRh",
            "dGEgaWYgc3Vic2NyaWJlZCB0byBkYXRhIHVwZGF0ZXMpLtIBE29wZXJhdGlu",
            "Z0NhcnJpZXJQTlLSAQ5zZXF1ZW5jZU51bWJlctIBDWJvYXJkaW5nUG9pbnTS",
            "AQ5kZXBsYW5pbmdQb2ludNIBDGZsaWdodE51bWJlctIBDWRlcGFydHVyZURh",
            "dGXSAQlwYXNzZW5nZXLSAQtjYXJyaWVyQ29kZSK5AgonQm9hcmRpbmdQYXNz",
            "UmVjb3JkUmVxdWVzdEJ5VGlja2V0TnVtYmVyEioKDHRpY2tldE51bWJlchgB",
            "IAEoCUIUkkERigEOXihbMC05XXszLDEwfSQSEQoJdGlja2V0TGVnGAIgASgF",
            "EhUKDWJvYXJkaW5nUG9pbnQYAyABKAk6twGSQbMBCrABKiVCb2FyZGluZyBQ",
            "YXNzIFJlY29yZCBCeSBUaWNrZXQgTnVtYmVyMnhVc2VkIHRvIGFjY2VzcyBh",
            "IHNpbmdsZSBib2FyZGluZyBwYXNzIG9yIGJvYXJkaW5nIHBhc3MgcmVjb3Jk",
            "LiAgRWl0aGVyIGEgdGlja2V0IGxlZyBvciBib2FyZGluZyBwb2ludCBzaG91",
            "bGQgYmUgcHJvdmlkZWTSAQx0aWNrZXROdW1iZXIi+QIKIEJvYXJkaW5nUGFz",
            "c1JlY29yZFJlcXVlc3RCeUluZGV4Eh0KC2NhcnJpZXJDb2RlGAEgASgJQgiS",
            "QQV4A4ABAhIbCgxmbGlnaHROdW1iZXIYAiABKAlCBZJBAngFEh8KDWRlcGFy",
            "dHVyZURhdGUYAyABKAsyCC5pby5EYXRlEikKDWJvYXJkaW5nUG9pbnQYBCAB",
            "KAlCEpJBD4oBDF5bQS1aXXszLDR9JBIWCg5zZXF1ZW5jZU51bWJlchgFIAEo",
            "BTq0AZJBsAEKrQEqHUJvYXJkaW5nIFBhc3MgUmVjb3JkIEJ5IEluZGV4Mj5V",
            "c2VkIHRvIGFjY2VzcyBhIHNpbmdsZSBib2FyZGluZyBwYXNzIG9yIGJvYXJk",
            "aW5nIHBhc3MgcmVjb3JkLtIBC2NhcnJpZXJDb2Rl0gEMZmxpZ2h0TnVtYmVy",
            "0gENZGVwYXJ0dXJlRGF0ZdIBDWJvYXJkaW5nUG9pbnTSAQ5zZXF1ZW5jZU51",
            "bWJlciKfAgoTQm9hcmRpbmdQYXNzUmVxdWVzdBJICgx0aWNrZXROdW1iZXIY",
            "ASABKAsyMC5mbGlnaHRzLkJvYXJkaW5nUGFzc1JlY29yZFJlcXVlc3RCeVRp",
            "Y2tldE51bWJlckgAEjoKBWluZGV4GAIgASgLMikuZmxpZ2h0cy5Cb2FyZGlu",
            "Z1Bhc3NSZWNvcmRSZXF1ZXN0QnlJbmRleEgAEjcKA3BuchgDIAEoCzIoLmZs",
            "aWdodHMuQm9hcmRpbmdQYXNzZXNGb3JCb29raW5nUmVxdWVzdEgAEhgKBnBh",
            "c3NJZBgEIAEoCzIGLmlvLklkSAASJAoGZm9ybWF0GAUgAygOMhQuaW8uUGFz",
            "c0J1bmRsZUZvcm1hdEIJCgdyZXF1ZXN0IsYBChlCb2FyZGluZ1Bhc3NSZWNv",
            "cmRSZXF1ZXN0EkgKDHRpY2tldE51bWJlchgBIAEoCzIwLmZsaWdodHMuQm9h",
            "cmRpbmdQYXNzUmVjb3JkUmVxdWVzdEJ5VGlja2V0TnVtYmVySAASOgoFaW5k",
            "ZXgYAiABKAsyKS5mbGlnaHRzLkJvYXJkaW5nUGFzc1JlY29yZFJlcXVlc3RC",
            "eUluZGV4SAASGAoGcGFzc0lkGAMgASgLMgYuaW8uSWRIAEIJCgdyZXF1ZXN0",
            "ItgBCh9Cb2FyZGluZ1Bhc3Nlc0ZvckJvb2tpbmdSZXF1ZXN0EgsKA3BuchgB",
            "IAEoCRIRCgl0aWNrZXRMZWcYAiABKAUSFQoNYm9hcmRpbmdQb2ludBgDIAEo",
            "CTp+kkF7CnkqIkJvYXJkaW5nIFBhc3MgUmVjb3JkIEJ5IFBOUiByZWNvcmQy",
            "TVVzZWQgdG8gYWNjZXNzIGEgc2luZ2xlIG9yIG11bHRpcGxlIGJvYXJkaW5n",
            "IHBhc3NlZCBvciBib2FyZGluZyBwYXNzIHJlY29yZHMu0gEDcG5yIkAKFkJv",
            "YXJkaW5nUGFzc2VzUmVzcG9uc2USJgoOYm9hcmRpbmdQYXNzZXMYASADKAsy",
            "Di5pby5QYXNzQnVuZGxlQl8KGGNvbS5wYXNza2l0LmdycGMuRmxpZ2h0c1os",
            "c3Rhc2gucGFzc2tpdC5jb20vaW8vbW9kZWwvc2RrL2dvL2lvL2ZsaWdodHOq",
            "AhRQYXNzS2l0LkdycGMuRmxpZ2h0c2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::PassKit.Grpc.Flights.PassengerReflection.Descriptor, global::PassKit.Grpc.Flights.BarcodeReflection.Descriptor, global::PassKit.Grpc.Flights.CabinCodes.CabinCodesReflection.Descriptor, global::PassKit.Grpc.CommonObjectsReflection.Descriptor, global::PassKit.Grpc.ProximityReflection.Descriptor, global::PassKit.Grpc.LinksReflection.Descriptor, global::PassKit.Grpc.MetricsReflection.Descriptor, global::PassKit.Grpc.Gateway.ProtocGenOpenapiv2.Options.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.Flights.BoardingPassRecord), global::PassKit.Grpc.Flights.BoardingPassRecord.Parser, new[]{ "Id", "OperatingCarrierPNR", "RelatedPNRs", "TicketNumber", "TicketLeg", "BoardingPoint", "DeplaningPoint", "CarrierCode", "FlightNumber", "DepartureDate", "Passenger", "Class", "CompartmentCode", "SeatNumber", "SequenceNumber", "BoardingGroup", "BoardingPosition", "FreeBaggageAllowance", "CarryOnAllowance", "SsrCodes", "Osi", "Remarks", "PassengerStatus", "ConditionalItems", "BarcodePayload", "SecurityImage", "PrivilegeImage", "FooterImage", "LocationMessages", "BeaconMessages", "Links", "BarcodeAdditionalData", "InfantPassId", "AdditionalDataItems", "Metadata" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.Flights.BoardingPassRecordRequestByTicketNumber), global::PassKit.Grpc.Flights.BoardingPassRecordRequestByTicketNumber.Parser, new[]{ "TicketNumber", "TicketLeg", "BoardingPoint" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.Flights.BoardingPassRecordRequestByIndex), global::PassKit.Grpc.Flights.BoardingPassRecordRequestByIndex.Parser, new[]{ "CarrierCode", "FlightNumber", "DepartureDate", "BoardingPoint", "SequenceNumber" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.Flights.BoardingPassRequest), global::PassKit.Grpc.Flights.BoardingPassRequest.Parser, new[]{ "TicketNumber", "Index", "Pnr", "PassId", "Format" }, new[]{ "Request" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.Flights.BoardingPassRecordRequest), global::PassKit.Grpc.Flights.BoardingPassRecordRequest.Parser, new[]{ "TicketNumber", "Index", "PassId" }, new[]{ "Request" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.Flights.BoardingPassesForBookingRequest), global::PassKit.Grpc.Flights.BoardingPassesForBookingRequest.Parser, new[]{ "Pnr", "TicketLeg", "BoardingPoint" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.Flights.BoardingPassesResponse), global::PassKit.Grpc.Flights.BoardingPassesResponse.Parser, new[]{ "BoardingPasses" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A Boarding Pass record is unique to an individual passenger journey form a boarding point to a deplaning point. A Carrier and a Flight Designation record must exist. If a Flight record does not already exist, then it will be auto-generated based on the Flight Designation record and other publicly available data.
  /// </summary>
  public sealed partial class BoardingPassRecord : pb::IMessage<BoardingPassRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BoardingPassRecord> _parser = new pb::MessageParser<BoardingPassRecord>(() => new BoardingPassRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BoardingPassRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.Flights.BoardingPassReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BoardingPassRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BoardingPassRecord(BoardingPassRecord other) : this() {
      id_ = other.id_;
      operatingCarrierPNR_ = other.operatingCarrierPNR_;
      relatedPNRs_ = other.relatedPNRs_.Clone();
      ticketNumber_ = other.ticketNumber_;
      ticketLeg_ = other.ticketLeg_;
      boardingPoint_ = other.boardingPoint_;
      deplaningPoint_ = other.deplaningPoint_;
      carrierCode_ = other.carrierCode_;
      flightNumber_ = other.flightNumber_;
      departureDate_ = other.departureDate_ != null ? other.departureDate_.Clone() : null;
      passenger_ = other.passenger_ != null ? other.passenger_.Clone() : null;
      class_ = other.class_;
      compartmentCode_ = other.compartmentCode_;
      seatNumber_ = other.seatNumber_;
      sequenceNumber_ = other.sequenceNumber_;
      boardingGroup_ = other.boardingGroup_;
      boardingPosition_ = other.boardingPosition_;
      freeBaggageAllowance_ = other.freeBaggageAllowance_;
      carryOnAllowance_ = other.carryOnAllowance_;
      ssrCodes_ = other.ssrCodes_.Clone();
      osi_ = other.osi_;
      remarks_ = other.remarks_;
      passengerStatus_ = other.passengerStatus_;
      conditionalItems_ = other.conditionalItems_ != null ? other.conditionalItems_.Clone() : null;
      barcodePayload_ = other.barcodePayload_;
      securityImage_ = other.securityImage_;
      privilegeImage_ = other.privilegeImage_;
      footerImage_ = other.footerImage_;
      locationMessages_ = other.locationMessages_.Clone();
      beaconMessages_ = other.beaconMessages_.Clone();
      links_ = other.links_.Clone();
      barcodeAdditionalData_ = other.barcodeAdditionalData_;
      infantPassId_ = other.infantPassId_;
      additionalDataItems_ = other.additionalDataItems_ != null ? other.additionalDataItems_.Clone() : null;
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BoardingPassRecord Clone() {
      return new BoardingPassRecord(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// Id assigned by PassKit to represent the boarding pass record. It will be used as the serial number in Apple Wallet and as the Object identifier for Google Wallet. This field is not writable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "operatingCarrierPNR" field.</summary>
    public const int OperatingCarrierPNRFieldNumber = 2;
    private string operatingCarrierPNR_ = "";
    /// <summary>
    /// PNR code of the carrier operating the flight, independent of code-share, lease or other issues.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OperatingCarrierPNR {
      get { return operatingCarrierPNR_; }
      set {
        operatingCarrierPNR_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "relatedPNRs" field.</summary>
    public const int RelatedPNRsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_relatedPNRs_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> relatedPNRs_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Up to three related PNRs can be used to index the record and can be the marketing carrier PNR or a master PNR containing multiple bookings. If required, a related PNR can be followed by the two or three character designator of the carrier or CRS controlling the PNR, separated by an oblique.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> RelatedPNRs {
      get { return relatedPNRs_; }
    }

    /// <summary>Field number for the "ticketNumber" field.</summary>
    public const int TicketNumberFieldNumber = 4;
    private string ticketNumber_ = "";
    /// <summary>
    /// Ticket number can optionally be prefixed by the 3 digit airline code, followed by a 10 digit ticket number.  For ticket numbers less than 10 digits, pad with zeros.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TicketNumber {
      get { return ticketNumber_; }
      set {
        ticketNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticketLeg" field.</summary>
    public const int TicketLegFieldNumber = 5;
    private int ticketLeg_;
    /// <summary>
    /// The leg of the ticketed journey. For a return flight, the outbound flight would be leg 1 and the inbound flight would be leg 2.  For Direct flights, a ticketed leg includes all stops between the boarding point and deplaning point. Leg cannot be zero and ticket/leg combination cannot already exist for a 'create' call.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TicketLeg {
      get { return ticketLeg_; }
      set {
        ticketLeg_ = value;
      }
    }

    /// <summary>Field number for the "boardingPoint" field.</summary>
    public const int BoardingPointFieldNumber = 6;
    private string boardingPoint_ = "";
    /// <summary>
    /// 3 letter IATA code or 4 letter ICAO code of the passenger boarding point.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BoardingPoint {
      get { return boardingPoint_; }
      set {
        boardingPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deplaningPoint" field.</summary>
    public const int DeplaningPointFieldNumber = 7;
    private string deplaningPoint_ = "";
    /// <summary>
    /// 3 letter IATA code or 4 letter ICAO code of the passenger deplaning point.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DeplaningPoint {
      get { return deplaningPoint_; }
      set {
        deplaningPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "carrierCode" field.</summary>
    public const int CarrierCodeFieldNumber = 8;
    private string carrierCode_ = "";
    /// <summary>
    /// The two or three character airline code of the marketing carrier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CarrierCode {
      get { return carrierCode_; }
      set {
        carrierCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "flightNumber" field.</summary>
    public const int FlightNumberFieldNumber = 9;
    private string flightNumber_ = "";
    /// <summary>
    /// The flight number of the marketing character (excluding the carrier code).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FlightNumber {
      get { return flightNumber_; }
      set {
        flightNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "departureDate" field.</summary>
    public const int DepartureDateFieldNumber = 11;
    private global::PassKit.Grpc.Date departureDate_;
    /// <summary>
    /// The date of departure in local airport time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Date DepartureDate {
      get { return departureDate_; }
      set {
        departureDate_ = value;
      }
    }

    /// <summary>Field number for the "passenger" field.</summary>
    public const int PassengerFieldNumber = 12;
    private global::PassKit.Grpc.Flights.Passenger passenger_;
    /// <summary>
    /// Details of the passenger and any infant.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Flights.Passenger Passenger {
      get { return passenger_; }
      set {
        passenger_ = value;
      }
    }

    /// <summary>Field number for the "class" field.</summary>
    public const int ClassFieldNumber = 13;
    private string class_ = "";
    /// <summary>
    /// Free-form text that can be used to describe the ticket class, tier or cabin. E.g. "Business", "Premium Economy", "Club World".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Class {
      get { return class_; }
      set {
        class_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "compartmentCode" field.</summary>
    public const int CompartmentCodeFieldNumber = 14;
    private global::PassKit.Grpc.Flights.CabinCodes.CompartmentCode compartmentCode_ = global::PassKit.Grpc.Flights.CabinCodes.CompartmentCode.None;
    /// <summary>
    /// The compartment code / class of the ticket.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Flights.CabinCodes.CompartmentCode CompartmentCode {
      get { return compartmentCode_; }
      set {
        compartmentCode_ = value;
      }
    }

    /// <summary>Field number for the "seatNumber" field.</summary>
    public const int SeatNumberFieldNumber = 15;
    private string seatNumber_ = "";
    /// <summary>
    /// The allocated seat number.  The text "ANY" or "XXX" can be used where a free seating condition exists.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SeatNumber {
      get { return seatNumber_; }
      set {
        seatNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sequenceNumber" field.</summary>
    public const int SequenceNumberFieldNumber = 16;
    private int sequenceNumber_;
    /// <summary>
    /// The check in sequence number.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SequenceNumber {
      get { return sequenceNumber_; }
      set {
        sequenceNumber_ = value;
      }
    }

    /// <summary>Field number for the "boardingGroup" field.</summary>
    public const int BoardingGroupFieldNumber = 17;
    private string boardingGroup_ = "";
    /// <summary>
    /// A boarding group or zone indicator. This is displayed on the pass to assist passengers and ground-staff to expedite boarding.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BoardingGroup {
      get { return boardingGroup_; }
      set {
        boardingGroup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "boardingPosition" field.</summary>
    public const int BoardingPositionFieldNumber = 18;
    private string boardingPosition_ = "";
    /// <summary>
    /// An additional field to indicate boarding priority or order.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BoardingPosition {
      get { return boardingPosition_; }
      set {
        boardingPosition_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "freeBaggageAllowance" field.</summary>
    public const int FreeBaggageAllowanceFieldNumber = 19;
    private string freeBaggageAllowance_ = "";
    /// <summary>
    /// 3 character string comprising the quantity, followed by the unit code (PC - piece, L - lbs, K - kgs). E.g. 2PC, 20K.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FreeBaggageAllowance {
      get { return freeBaggageAllowance_; }
      set {
        freeBaggageAllowance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "carryOnAllowance" field.</summary>
    public const int CarryOnAllowanceFieldNumber = 20;
    private string carryOnAllowance_ = "";
    /// <summary>
    /// 3 character string comprising the quantity, followed by the unit code (PC - piece, L - lbs, K - kgs). E.g. 2PC, 20K.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CarryOnAllowance {
      get { return carryOnAllowance_; }
      set {
        carryOnAllowance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ssrCodes" field.</summary>
    public const int SsrCodesFieldNumber = 21;
    private static readonly pb::FieldCodec<string> _repeated_ssrCodes_codec
        = pb::FieldCodec.ForString(170);
    private readonly pbc::RepeatedField<string> ssrCodes_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// An array of SSR codes. Codes should be 4 capitalized letters. Codes may be annotated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> SsrCodes {
      get { return ssrCodes_; }
    }

    /// <summary>Field number for the "osi" field.</summary>
    public const int OsiFieldNumber = 22;
    private string osi_ = "";
    /// <summary>
    /// Other service information that may be relevant to the booking.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Osi {
      get { return osi_; }
      set {
        osi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "remarks" field.</summary>
    public const int RemarksFieldNumber = 23;
    private string remarks_ = "";
    /// <summary>
    /// Free text booking remarks.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Remarks {
      get { return remarks_; }
      set {
        remarks_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "passengerStatus" field.</summary>
    public const int PassengerStatusFieldNumber = 24;
    private global::PassKit.Grpc.Flights.PassengerStatus passengerStatus_ = global::PassKit.Grpc.Flights.PassengerStatus.IssuedNotCheckedIn;
    /// <summary>
    /// Passenger Description as detailed in IATA PSC Resolution 792 Attachment 'C'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Flights.PassengerStatus PassengerStatus {
      get { return passengerStatus_; }
      set {
        passengerStatus_ = value;
      }
    }

    /// <summary>Field number for the "conditionalItems" field.</summary>
    public const int ConditionalItemsFieldNumber = 25;
    private global::PassKit.Grpc.Flights.ConditionalItems conditionalItems_;
    /// <summary>
    /// Conditional items for the flight segment as described in IATA PSC Resolution 792.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Flights.ConditionalItems ConditionalItems {
      get { return conditionalItems_; }
      set {
        conditionalItems_ = value;
      }
    }

    /// <summary>Field number for the "barcodePayload" field.</summary>
    public const int BarcodePayloadFieldNumber = 26;
    private string barcodePayload_ = "";
    /// <summary>
    /// Payload to be encoded in the pass barcode. If omitted, an IATA BCBP Standard (Resolution 792) barcode will be generated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BarcodePayload {
      get { return barcodePayload_; }
      set {
        barcodePayload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "securityImage" field.</summary>
    public const int SecurityImageFieldNumber = 27;
    private string securityImage_ = "";
    /// <summary>
    /// Security image id for display above the barcode on a Google Pay pass.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SecurityImage {
      get { return securityImage_; }
      set {
        securityImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "privilegeImage" field.</summary>
    public const int PrivilegeImageFieldNumber = 28;
    private string privilegeImage_ = "";
    /// <summary>
    /// Privilege image id for display above the barcode on a Google Pay pass.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PrivilegeImage {
      get { return privilegeImage_; }
      set {
        privilegeImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "footerImage" field.</summary>
    public const int FooterImageFieldNumber = 29;
    private string footerImage_ = "";
    /// <summary>
    /// Footer image id for display above the barcode on iOS devices.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FooterImage {
      get { return footerImage_; }
      set {
        footerImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "locationMessages" field.</summary>
    public const int LocationMessagesFieldNumber = 30;
    private static readonly pb::FieldCodec<global::PassKit.Grpc.GPSLocation> _repeated_locationMessages_codec
        = pb::FieldCodec.ForMessage(242, global::PassKit.Grpc.GPSLocation.Parser);
    private readonly pbc::RepeatedField<global::PassKit.Grpc.GPSLocation> locationMessages_ = new pbc::RepeatedField<global::PassKit.Grpc.GPSLocation>();
    /// <summary>
    /// A list of up to 10 GPS locations where this boarding pass should be presented on the lock-screen. Values here will override the designation and flight values.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::PassKit.Grpc.GPSLocation> LocationMessages {
      get { return locationMessages_; }
    }

    /// <summary>Field number for the "beaconMessages" field.</summary>
    public const int BeaconMessagesFieldNumber = 31;
    private static readonly pb::FieldCodec<global::PassKit.Grpc.Beacon> _repeated_beaconMessages_codec
        = pb::FieldCodec.ForMessage(250, global::PassKit.Grpc.Beacon.Parser);
    private readonly pbc::RepeatedField<global::PassKit.Grpc.Beacon> beaconMessages_ = new pbc::RepeatedField<global::PassKit.Grpc.Beacon>();
    /// <summary>
    /// A list of up to 10 Beacon UUIDs that should trigger the boarding pass to be presented on the lock-screen. Values here will override the designation and flight values.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::PassKit.Grpc.Beacon> BeaconMessages {
      get { return beaconMessages_; }
    }

    /// <summary>Field number for the "links" field.</summary>
    public const int LinksFieldNumber = 32;
    private static readonly pb::FieldCodec<global::PassKit.Grpc.Link> _repeated_links_codec
        = pb::FieldCodec.ForMessage(258, global::PassKit.Grpc.Link.Parser);
    private readonly pbc::RepeatedField<global::PassKit.Grpc.Link> links_ = new pbc::RepeatedField<global::PassKit.Grpc.Link>();
    /// <summary>
    /// A list of links to be appended to the end of each boarding pass.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::PassKit.Grpc.Link> Links {
      get { return links_; }
    }

    /// <summary>Field number for the "barcodeAdditionalData" field.</summary>
    public const int BarcodeAdditionalDataFieldNumber = 33;
    private string barcodeAdditionalData_ = "";
    /// <summary>
    /// If PassKit are generating barcodes, airline use data (IATA item 4) to be included in the barcode.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BarcodeAdditionalData {
      get { return barcodeAdditionalData_; }
      set {
        barcodeAdditionalData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "infantPassId" field.</summary>
    public const int InfantPassIdFieldNumber = 34;
    private string infantPassId_ = "";
    /// <summary>
    /// If a passenger is travelling as an infant and the airline is not using conditional data with a passenger description of 6 (Adult With Infant), an id of the infant's boarding pass will be recorded here.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string InfantPassId {
      get { return infantPassId_; }
      set {
        infantPassId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "additionalDataItems" field.</summary>
    public const int AdditionalDataItemsFieldNumber = 35;
    private global::PassKit.Grpc.DataItems additionalDataItems_;
    /// <summary>
    /// Optional key value pairs to be added in to the flight record
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.DataItems AdditionalDataItems {
      get { return additionalDataItems_; }
      set {
        additionalDataItems_ = value;
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 36;
    private global::PassKit.Grpc.Metadata metadata_;
    /// <summary>
    /// Pass Metadata
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Metadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BoardingPassRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BoardingPassRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (OperatingCarrierPNR != other.OperatingCarrierPNR) return false;
      if(!relatedPNRs_.Equals(other.relatedPNRs_)) return false;
      if (TicketNumber != other.TicketNumber) return false;
      if (TicketLeg != other.TicketLeg) return false;
      if (BoardingPoint != other.BoardingPoint) return false;
      if (DeplaningPoint != other.DeplaningPoint) return false;
      if (CarrierCode != other.CarrierCode) return false;
      if (FlightNumber != other.FlightNumber) return false;
      if (!object.Equals(DepartureDate, other.DepartureDate)) return false;
      if (!object.Equals(Passenger, other.Passenger)) return false;
      if (Class != other.Class) return false;
      if (CompartmentCode != other.CompartmentCode) return false;
      if (SeatNumber != other.SeatNumber) return false;
      if (SequenceNumber != other.SequenceNumber) return false;
      if (BoardingGroup != other.BoardingGroup) return false;
      if (BoardingPosition != other.BoardingPosition) return false;
      if (FreeBaggageAllowance != other.FreeBaggageAllowance) return false;
      if (CarryOnAllowance != other.CarryOnAllowance) return false;
      if(!ssrCodes_.Equals(other.ssrCodes_)) return false;
      if (Osi != other.Osi) return false;
      if (Remarks != other.Remarks) return false;
      if (PassengerStatus != other.PassengerStatus) return false;
      if (!object.Equals(ConditionalItems, other.ConditionalItems)) return false;
      if (BarcodePayload != other.BarcodePayload) return false;
      if (SecurityImage != other.SecurityImage) return false;
      if (PrivilegeImage != other.PrivilegeImage) return false;
      if (FooterImage != other.FooterImage) return false;
      if(!locationMessages_.Equals(other.locationMessages_)) return false;
      if(!beaconMessages_.Equals(other.beaconMessages_)) return false;
      if(!links_.Equals(other.links_)) return false;
      if (BarcodeAdditionalData != other.BarcodeAdditionalData) return false;
      if (InfantPassId != other.InfantPassId) return false;
      if (!object.Equals(AdditionalDataItems, other.AdditionalDataItems)) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (OperatingCarrierPNR.Length != 0) hash ^= OperatingCarrierPNR.GetHashCode();
      hash ^= relatedPNRs_.GetHashCode();
      if (TicketNumber.Length != 0) hash ^= TicketNumber.GetHashCode();
      if (TicketLeg != 0) hash ^= TicketLeg.GetHashCode();
      if (BoardingPoint.Length != 0) hash ^= BoardingPoint.GetHashCode();
      if (DeplaningPoint.Length != 0) hash ^= DeplaningPoint.GetHashCode();
      if (CarrierCode.Length != 0) hash ^= CarrierCode.GetHashCode();
      if (FlightNumber.Length != 0) hash ^= FlightNumber.GetHashCode();
      if (departureDate_ != null) hash ^= DepartureDate.GetHashCode();
      if (passenger_ != null) hash ^= Passenger.GetHashCode();
      if (Class.Length != 0) hash ^= Class.GetHashCode();
      if (CompartmentCode != global::PassKit.Grpc.Flights.CabinCodes.CompartmentCode.None) hash ^= CompartmentCode.GetHashCode();
      if (SeatNumber.Length != 0) hash ^= SeatNumber.GetHashCode();
      if (SequenceNumber != 0) hash ^= SequenceNumber.GetHashCode();
      if (BoardingGroup.Length != 0) hash ^= BoardingGroup.GetHashCode();
      if (BoardingPosition.Length != 0) hash ^= BoardingPosition.GetHashCode();
      if (FreeBaggageAllowance.Length != 0) hash ^= FreeBaggageAllowance.GetHashCode();
      if (CarryOnAllowance.Length != 0) hash ^= CarryOnAllowance.GetHashCode();
      hash ^= ssrCodes_.GetHashCode();
      if (Osi.Length != 0) hash ^= Osi.GetHashCode();
      if (Remarks.Length != 0) hash ^= Remarks.GetHashCode();
      if (PassengerStatus != global::PassKit.Grpc.Flights.PassengerStatus.IssuedNotCheckedIn) hash ^= PassengerStatus.GetHashCode();
      if (conditionalItems_ != null) hash ^= ConditionalItems.GetHashCode();
      if (BarcodePayload.Length != 0) hash ^= BarcodePayload.GetHashCode();
      if (SecurityImage.Length != 0) hash ^= SecurityImage.GetHashCode();
      if (PrivilegeImage.Length != 0) hash ^= PrivilegeImage.GetHashCode();
      if (FooterImage.Length != 0) hash ^= FooterImage.GetHashCode();
      hash ^= locationMessages_.GetHashCode();
      hash ^= beaconMessages_.GetHashCode();
      hash ^= links_.GetHashCode();
      if (BarcodeAdditionalData.Length != 0) hash ^= BarcodeAdditionalData.GetHashCode();
      if (InfantPassId.Length != 0) hash ^= InfantPassId.GetHashCode();
      if (additionalDataItems_ != null) hash ^= AdditionalDataItems.GetHashCode();
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (OperatingCarrierPNR.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OperatingCarrierPNR);
      }
      relatedPNRs_.WriteTo(output, _repeated_relatedPNRs_codec);
      if (TicketNumber.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TicketNumber);
      }
      if (TicketLeg != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TicketLeg);
      }
      if (BoardingPoint.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BoardingPoint);
      }
      if (DeplaningPoint.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(DeplaningPoint);
      }
      if (CarrierCode.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(CarrierCode);
      }
      if (FlightNumber.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(FlightNumber);
      }
      if (departureDate_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DepartureDate);
      }
      if (passenger_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Passenger);
      }
      if (Class.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Class);
      }
      if (CompartmentCode != global::PassKit.Grpc.Flights.CabinCodes.CompartmentCode.None) {
        output.WriteRawTag(112);
        output.WriteEnum((int) CompartmentCode);
      }
      if (SeatNumber.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(SeatNumber);
      }
      if (SequenceNumber != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(SequenceNumber);
      }
      if (BoardingGroup.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(BoardingGroup);
      }
      if (BoardingPosition.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(BoardingPosition);
      }
      if (FreeBaggageAllowance.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(FreeBaggageAllowance);
      }
      if (CarryOnAllowance.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(CarryOnAllowance);
      }
      ssrCodes_.WriteTo(output, _repeated_ssrCodes_codec);
      if (Osi.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(Osi);
      }
      if (Remarks.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(Remarks);
      }
      if (PassengerStatus != global::PassKit.Grpc.Flights.PassengerStatus.IssuedNotCheckedIn) {
        output.WriteRawTag(192, 1);
        output.WriteEnum((int) PassengerStatus);
      }
      if (conditionalItems_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(ConditionalItems);
      }
      if (BarcodePayload.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(BarcodePayload);
      }
      if (SecurityImage.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(SecurityImage);
      }
      if (PrivilegeImage.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(PrivilegeImage);
      }
      if (FooterImage.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(FooterImage);
      }
      locationMessages_.WriteTo(output, _repeated_locationMessages_codec);
      beaconMessages_.WriteTo(output, _repeated_beaconMessages_codec);
      links_.WriteTo(output, _repeated_links_codec);
      if (BarcodeAdditionalData.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(BarcodeAdditionalData);
      }
      if (InfantPassId.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(InfantPassId);
      }
      if (additionalDataItems_ != null) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(AdditionalDataItems);
      }
      if (metadata_ != null) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(Metadata);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (OperatingCarrierPNR.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OperatingCarrierPNR);
      }
      relatedPNRs_.WriteTo(ref output, _repeated_relatedPNRs_codec);
      if (TicketNumber.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TicketNumber);
      }
      if (TicketLeg != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TicketLeg);
      }
      if (BoardingPoint.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BoardingPoint);
      }
      if (DeplaningPoint.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(DeplaningPoint);
      }
      if (CarrierCode.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(CarrierCode);
      }
      if (FlightNumber.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(FlightNumber);
      }
      if (departureDate_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DepartureDate);
      }
      if (passenger_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Passenger);
      }
      if (Class.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Class);
      }
      if (CompartmentCode != global::PassKit.Grpc.Flights.CabinCodes.CompartmentCode.None) {
        output.WriteRawTag(112);
        output.WriteEnum((int) CompartmentCode);
      }
      if (SeatNumber.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(SeatNumber);
      }
      if (SequenceNumber != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(SequenceNumber);
      }
      if (BoardingGroup.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(BoardingGroup);
      }
      if (BoardingPosition.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(BoardingPosition);
      }
      if (FreeBaggageAllowance.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(FreeBaggageAllowance);
      }
      if (CarryOnAllowance.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(CarryOnAllowance);
      }
      ssrCodes_.WriteTo(ref output, _repeated_ssrCodes_codec);
      if (Osi.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(Osi);
      }
      if (Remarks.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(Remarks);
      }
      if (PassengerStatus != global::PassKit.Grpc.Flights.PassengerStatus.IssuedNotCheckedIn) {
        output.WriteRawTag(192, 1);
        output.WriteEnum((int) PassengerStatus);
      }
      if (conditionalItems_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(ConditionalItems);
      }
      if (BarcodePayload.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(BarcodePayload);
      }
      if (SecurityImage.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(SecurityImage);
      }
      if (PrivilegeImage.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(PrivilegeImage);
      }
      if (FooterImage.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(FooterImage);
      }
      locationMessages_.WriteTo(ref output, _repeated_locationMessages_codec);
      beaconMessages_.WriteTo(ref output, _repeated_beaconMessages_codec);
      links_.WriteTo(ref output, _repeated_links_codec);
      if (BarcodeAdditionalData.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(BarcodeAdditionalData);
      }
      if (InfantPassId.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(InfantPassId);
      }
      if (additionalDataItems_ != null) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(AdditionalDataItems);
      }
      if (metadata_ != null) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(Metadata);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (OperatingCarrierPNR.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OperatingCarrierPNR);
      }
      size += relatedPNRs_.CalculateSize(_repeated_relatedPNRs_codec);
      if (TicketNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TicketNumber);
      }
      if (TicketLeg != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TicketLeg);
      }
      if (BoardingPoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BoardingPoint);
      }
      if (DeplaningPoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeplaningPoint);
      }
      if (CarrierCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CarrierCode);
      }
      if (FlightNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FlightNumber);
      }
      if (departureDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DepartureDate);
      }
      if (passenger_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Passenger);
      }
      if (Class.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Class);
      }
      if (CompartmentCode != global::PassKit.Grpc.Flights.CabinCodes.CompartmentCode.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CompartmentCode);
      }
      if (SeatNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SeatNumber);
      }
      if (SequenceNumber != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SequenceNumber);
      }
      if (BoardingGroup.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BoardingGroup);
      }
      if (BoardingPosition.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BoardingPosition);
      }
      if (FreeBaggageAllowance.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FreeBaggageAllowance);
      }
      if (CarryOnAllowance.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CarryOnAllowance);
      }
      size += ssrCodes_.CalculateSize(_repeated_ssrCodes_codec);
      if (Osi.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Osi);
      }
      if (Remarks.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Remarks);
      }
      if (PassengerStatus != global::PassKit.Grpc.Flights.PassengerStatus.IssuedNotCheckedIn) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PassengerStatus);
      }
      if (conditionalItems_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ConditionalItems);
      }
      if (BarcodePayload.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BarcodePayload);
      }
      if (SecurityImage.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SecurityImage);
      }
      if (PrivilegeImage.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PrivilegeImage);
      }
      if (FooterImage.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FooterImage);
      }
      size += locationMessages_.CalculateSize(_repeated_locationMessages_codec);
      size += beaconMessages_.CalculateSize(_repeated_beaconMessages_codec);
      size += links_.CalculateSize(_repeated_links_codec);
      if (BarcodeAdditionalData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BarcodeAdditionalData);
      }
      if (InfantPassId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(InfantPassId);
      }
      if (additionalDataItems_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AdditionalDataItems);
      }
      if (metadata_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BoardingPassRecord other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.OperatingCarrierPNR.Length != 0) {
        OperatingCarrierPNR = other.OperatingCarrierPNR;
      }
      relatedPNRs_.Add(other.relatedPNRs_);
      if (other.TicketNumber.Length != 0) {
        TicketNumber = other.TicketNumber;
      }
      if (other.TicketLeg != 0) {
        TicketLeg = other.TicketLeg;
      }
      if (other.BoardingPoint.Length != 0) {
        BoardingPoint = other.BoardingPoint;
      }
      if (other.DeplaningPoint.Length != 0) {
        DeplaningPoint = other.DeplaningPoint;
      }
      if (other.CarrierCode.Length != 0) {
        CarrierCode = other.CarrierCode;
      }
      if (other.FlightNumber.Length != 0) {
        FlightNumber = other.FlightNumber;
      }
      if (other.departureDate_ != null) {
        if (departureDate_ == null) {
          DepartureDate = new global::PassKit.Grpc.Date();
        }
        DepartureDate.MergeFrom(other.DepartureDate);
      }
      if (other.passenger_ != null) {
        if (passenger_ == null) {
          Passenger = new global::PassKit.Grpc.Flights.Passenger();
        }
        Passenger.MergeFrom(other.Passenger);
      }
      if (other.Class.Length != 0) {
        Class = other.Class;
      }
      if (other.CompartmentCode != global::PassKit.Grpc.Flights.CabinCodes.CompartmentCode.None) {
        CompartmentCode = other.CompartmentCode;
      }
      if (other.SeatNumber.Length != 0) {
        SeatNumber = other.SeatNumber;
      }
      if (other.SequenceNumber != 0) {
        SequenceNumber = other.SequenceNumber;
      }
      if (other.BoardingGroup.Length != 0) {
        BoardingGroup = other.BoardingGroup;
      }
      if (other.BoardingPosition.Length != 0) {
        BoardingPosition = other.BoardingPosition;
      }
      if (other.FreeBaggageAllowance.Length != 0) {
        FreeBaggageAllowance = other.FreeBaggageAllowance;
      }
      if (other.CarryOnAllowance.Length != 0) {
        CarryOnAllowance = other.CarryOnAllowance;
      }
      ssrCodes_.Add(other.ssrCodes_);
      if (other.Osi.Length != 0) {
        Osi = other.Osi;
      }
      if (other.Remarks.Length != 0) {
        Remarks = other.Remarks;
      }
      if (other.PassengerStatus != global::PassKit.Grpc.Flights.PassengerStatus.IssuedNotCheckedIn) {
        PassengerStatus = other.PassengerStatus;
      }
      if (other.conditionalItems_ != null) {
        if (conditionalItems_ == null) {
          ConditionalItems = new global::PassKit.Grpc.Flights.ConditionalItems();
        }
        ConditionalItems.MergeFrom(other.ConditionalItems);
      }
      if (other.BarcodePayload.Length != 0) {
        BarcodePayload = other.BarcodePayload;
      }
      if (other.SecurityImage.Length != 0) {
        SecurityImage = other.SecurityImage;
      }
      if (other.PrivilegeImage.Length != 0) {
        PrivilegeImage = other.PrivilegeImage;
      }
      if (other.FooterImage.Length != 0) {
        FooterImage = other.FooterImage;
      }
      locationMessages_.Add(other.locationMessages_);
      beaconMessages_.Add(other.beaconMessages_);
      links_.Add(other.links_);
      if (other.BarcodeAdditionalData.Length != 0) {
        BarcodeAdditionalData = other.BarcodeAdditionalData;
      }
      if (other.InfantPassId.Length != 0) {
        InfantPassId = other.InfantPassId;
      }
      if (other.additionalDataItems_ != null) {
        if (additionalDataItems_ == null) {
          AdditionalDataItems = new global::PassKit.Grpc.DataItems();
        }
        AdditionalDataItems.MergeFrom(other.AdditionalDataItems);
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::PassKit.Grpc.Metadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            OperatingCarrierPNR = input.ReadString();
            break;
          }
          case 26: {
            relatedPNRs_.AddEntriesFrom(input, _repeated_relatedPNRs_codec);
            break;
          }
          case 34: {
            TicketNumber = input.ReadString();
            break;
          }
          case 40: {
            TicketLeg = input.ReadInt32();
            break;
          }
          case 50: {
            BoardingPoint = input.ReadString();
            break;
          }
          case 58: {
            DeplaningPoint = input.ReadString();
            break;
          }
          case 66: {
            CarrierCode = input.ReadString();
            break;
          }
          case 74: {
            FlightNumber = input.ReadString();
            break;
          }
          case 90: {
            if (departureDate_ == null) {
              DepartureDate = new global::PassKit.Grpc.Date();
            }
            input.ReadMessage(DepartureDate);
            break;
          }
          case 98: {
            if (passenger_ == null) {
              Passenger = new global::PassKit.Grpc.Flights.Passenger();
            }
            input.ReadMessage(Passenger);
            break;
          }
          case 106: {
            Class = input.ReadString();
            break;
          }
          case 112: {
            CompartmentCode = (global::PassKit.Grpc.Flights.CabinCodes.CompartmentCode) input.ReadEnum();
            break;
          }
          case 122: {
            SeatNumber = input.ReadString();
            break;
          }
          case 128: {
            SequenceNumber = input.ReadInt32();
            break;
          }
          case 138: {
            BoardingGroup = input.ReadString();
            break;
          }
          case 146: {
            BoardingPosition = input.ReadString();
            break;
          }
          case 154: {
            FreeBaggageAllowance = input.ReadString();
            break;
          }
          case 162: {
            CarryOnAllowance = input.ReadString();
            break;
          }
          case 170: {
            ssrCodes_.AddEntriesFrom(input, _repeated_ssrCodes_codec);
            break;
          }
          case 178: {
            Osi = input.ReadString();
            break;
          }
          case 186: {
            Remarks = input.ReadString();
            break;
          }
          case 192: {
            PassengerStatus = (global::PassKit.Grpc.Flights.PassengerStatus) input.ReadEnum();
            break;
          }
          case 202: {
            if (conditionalItems_ == null) {
              ConditionalItems = new global::PassKit.Grpc.Flights.ConditionalItems();
            }
            input.ReadMessage(ConditionalItems);
            break;
          }
          case 210: {
            BarcodePayload = input.ReadString();
            break;
          }
          case 218: {
            SecurityImage = input.ReadString();
            break;
          }
          case 226: {
            PrivilegeImage = input.ReadString();
            break;
          }
          case 234: {
            FooterImage = input.ReadString();
            break;
          }
          case 242: {
            locationMessages_.AddEntriesFrom(input, _repeated_locationMessages_codec);
            break;
          }
          case 250: {
            beaconMessages_.AddEntriesFrom(input, _repeated_beaconMessages_codec);
            break;
          }
          case 258: {
            links_.AddEntriesFrom(input, _repeated_links_codec);
            break;
          }
          case 266: {
            BarcodeAdditionalData = input.ReadString();
            break;
          }
          case 274: {
            InfantPassId = input.ReadString();
            break;
          }
          case 282: {
            if (additionalDataItems_ == null) {
              AdditionalDataItems = new global::PassKit.Grpc.DataItems();
            }
            input.ReadMessage(AdditionalDataItems);
            break;
          }
          case 290: {
            if (metadata_ == null) {
              Metadata = new global::PassKit.Grpc.Metadata();
            }
            input.ReadMessage(Metadata);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            OperatingCarrierPNR = input.ReadString();
            break;
          }
          case 26: {
            relatedPNRs_.AddEntriesFrom(ref input, _repeated_relatedPNRs_codec);
            break;
          }
          case 34: {
            TicketNumber = input.ReadString();
            break;
          }
          case 40: {
            TicketLeg = input.ReadInt32();
            break;
          }
          case 50: {
            BoardingPoint = input.ReadString();
            break;
          }
          case 58: {
            DeplaningPoint = input.ReadString();
            break;
          }
          case 66: {
            CarrierCode = input.ReadString();
            break;
          }
          case 74: {
            FlightNumber = input.ReadString();
            break;
          }
          case 90: {
            if (departureDate_ == null) {
              DepartureDate = new global::PassKit.Grpc.Date();
            }
            input.ReadMessage(DepartureDate);
            break;
          }
          case 98: {
            if (passenger_ == null) {
              Passenger = new global::PassKit.Grpc.Flights.Passenger();
            }
            input.ReadMessage(Passenger);
            break;
          }
          case 106: {
            Class = input.ReadString();
            break;
          }
          case 112: {
            CompartmentCode = (global::PassKit.Grpc.Flights.CabinCodes.CompartmentCode) input.ReadEnum();
            break;
          }
          case 122: {
            SeatNumber = input.ReadString();
            break;
          }
          case 128: {
            SequenceNumber = input.ReadInt32();
            break;
          }
          case 138: {
            BoardingGroup = input.ReadString();
            break;
          }
          case 146: {
            BoardingPosition = input.ReadString();
            break;
          }
          case 154: {
            FreeBaggageAllowance = input.ReadString();
            break;
          }
          case 162: {
            CarryOnAllowance = input.ReadString();
            break;
          }
          case 170: {
            ssrCodes_.AddEntriesFrom(ref input, _repeated_ssrCodes_codec);
            break;
          }
          case 178: {
            Osi = input.ReadString();
            break;
          }
          case 186: {
            Remarks = input.ReadString();
            break;
          }
          case 192: {
            PassengerStatus = (global::PassKit.Grpc.Flights.PassengerStatus) input.ReadEnum();
            break;
          }
          case 202: {
            if (conditionalItems_ == null) {
              ConditionalItems = new global::PassKit.Grpc.Flights.ConditionalItems();
            }
            input.ReadMessage(ConditionalItems);
            break;
          }
          case 210: {
            BarcodePayload = input.ReadString();
            break;
          }
          case 218: {
            SecurityImage = input.ReadString();
            break;
          }
          case 226: {
            PrivilegeImage = input.ReadString();
            break;
          }
          case 234: {
            FooterImage = input.ReadString();
            break;
          }
          case 242: {
            locationMessages_.AddEntriesFrom(ref input, _repeated_locationMessages_codec);
            break;
          }
          case 250: {
            beaconMessages_.AddEntriesFrom(ref input, _repeated_beaconMessages_codec);
            break;
          }
          case 258: {
            links_.AddEntriesFrom(ref input, _repeated_links_codec);
            break;
          }
          case 266: {
            BarcodeAdditionalData = input.ReadString();
            break;
          }
          case 274: {
            InfantPassId = input.ReadString();
            break;
          }
          case 282: {
            if (additionalDataItems_ == null) {
              AdditionalDataItems = new global::PassKit.Grpc.DataItems();
            }
            input.ReadMessage(AdditionalDataItems);
            break;
          }
          case 290: {
            if (metadata_ == null) {
              Metadata = new global::PassKit.Grpc.Metadata();
            }
            input.ReadMessage(Metadata);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Boarding passes are indexed by ticket number and leg or boarding point. Either a journey leg or boarding point is required.
  /// </summary>
  public sealed partial class BoardingPassRecordRequestByTicketNumber : pb::IMessage<BoardingPassRecordRequestByTicketNumber>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BoardingPassRecordRequestByTicketNumber> _parser = new pb::MessageParser<BoardingPassRecordRequestByTicketNumber>(() => new BoardingPassRecordRequestByTicketNumber());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BoardingPassRecordRequestByTicketNumber> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.Flights.BoardingPassReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BoardingPassRecordRequestByTicketNumber() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BoardingPassRecordRequestByTicketNumber(BoardingPassRecordRequestByTicketNumber other) : this() {
      ticketNumber_ = other.ticketNumber_;
      ticketLeg_ = other.ticketLeg_;
      boardingPoint_ = other.boardingPoint_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BoardingPassRecordRequestByTicketNumber Clone() {
      return new BoardingPassRecordRequestByTicketNumber(this);
    }

    /// <summary>Field number for the "ticketNumber" field.</summary>
    public const int TicketNumberFieldNumber = 1;
    private string ticketNumber_ = "";
    /// <summary>
    /// Ticket number can optionally be prefixed by the 3 digit airline code, followed by a 10 digit ticket number.  For ticket numbers less than 10 digits, pad with zeros.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TicketNumber {
      get { return ticketNumber_; }
      set {
        ticketNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticketLeg" field.</summary>
    public const int TicketLegFieldNumber = 2;
    private int ticketLeg_;
    /// <summary>
    /// The leg of the ticketed journey. For a return flight, the outbound flight would be leg 1 and the inbound flight would be leg 2.  For Direct flights, a ticketed leg includes all stops between the boarding point and deplaning point. Leg cannot be zero and ticket/leg combination cannot already exist for a 'create' call.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TicketLeg {
      get { return ticketLeg_; }
      set {
        ticketLeg_ = value;
      }
    }

    /// <summary>Field number for the "boardingPoint" field.</summary>
    public const int BoardingPointFieldNumber = 3;
    private string boardingPoint_ = "";
    /// <summary>
    /// Required if no ticket leg. The 3 letter IATA code or 4 letter ICAO code of the passenger boarding point.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BoardingPoint {
      get { return boardingPoint_; }
      set {
        boardingPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BoardingPassRecordRequestByTicketNumber);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BoardingPassRecordRequestByTicketNumber other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TicketNumber != other.TicketNumber) return false;
      if (TicketLeg != other.TicketLeg) return false;
      if (BoardingPoint != other.BoardingPoint) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (TicketNumber.Length != 0) hash ^= TicketNumber.GetHashCode();
      if (TicketLeg != 0) hash ^= TicketLeg.GetHashCode();
      if (BoardingPoint.Length != 0) hash ^= BoardingPoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TicketNumber.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TicketNumber);
      }
      if (TicketLeg != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TicketLeg);
      }
      if (BoardingPoint.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BoardingPoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TicketNumber.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TicketNumber);
      }
      if (TicketLeg != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TicketLeg);
      }
      if (BoardingPoint.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BoardingPoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (TicketNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TicketNumber);
      }
      if (TicketLeg != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TicketLeg);
      }
      if (BoardingPoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BoardingPoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BoardingPassRecordRequestByTicketNumber other) {
      if (other == null) {
        return;
      }
      if (other.TicketNumber.Length != 0) {
        TicketNumber = other.TicketNumber;
      }
      if (other.TicketLeg != 0) {
        TicketLeg = other.TicketLeg;
      }
      if (other.BoardingPoint.Length != 0) {
        BoardingPoint = other.BoardingPoint;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TicketNumber = input.ReadString();
            break;
          }
          case 16: {
            TicketLeg = input.ReadInt32();
            break;
          }
          case 26: {
            BoardingPoint = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            TicketNumber = input.ReadString();
            break;
          }
          case 16: {
            TicketLeg = input.ReadInt32();
            break;
          }
          case 26: {
            BoardingPoint = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Boarding passes are indexed by carrier code, flight number, departure date, boarding point and sequence number.  All values are required.
  /// </summary>
  public sealed partial class BoardingPassRecordRequestByIndex : pb::IMessage<BoardingPassRecordRequestByIndex>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BoardingPassRecordRequestByIndex> _parser = new pb::MessageParser<BoardingPassRecordRequestByIndex>(() => new BoardingPassRecordRequestByIndex());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BoardingPassRecordRequestByIndex> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.Flights.BoardingPassReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BoardingPassRecordRequestByIndex() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BoardingPassRecordRequestByIndex(BoardingPassRecordRequestByIndex other) : this() {
      carrierCode_ = other.carrierCode_;
      flightNumber_ = other.flightNumber_;
      departureDate_ = other.departureDate_ != null ? other.departureDate_.Clone() : null;
      boardingPoint_ = other.boardingPoint_;
      sequenceNumber_ = other.sequenceNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BoardingPassRecordRequestByIndex Clone() {
      return new BoardingPassRecordRequestByIndex(this);
    }

    /// <summary>Field number for the "carrierCode" field.</summary>
    public const int CarrierCodeFieldNumber = 1;
    private string carrierCode_ = "";
    /// <summary>
    /// The two or three character airline code of the marketing carrier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CarrierCode {
      get { return carrierCode_; }
      set {
        carrierCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "flightNumber" field.</summary>
    public const int FlightNumberFieldNumber = 2;
    private string flightNumber_ = "";
    /// <summary>
    /// The flight number of the marketing character (excluding the carrier code).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FlightNumber {
      get { return flightNumber_; }
      set {
        flightNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "departureDate" field.</summary>
    public const int DepartureDateFieldNumber = 3;
    private global::PassKit.Grpc.Date departureDate_;
    /// <summary>
    /// The date of departure in local airport time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Date DepartureDate {
      get { return departureDate_; }
      set {
        departureDate_ = value;
      }
    }

    /// <summary>Field number for the "boardingPoint" field.</summary>
    public const int BoardingPointFieldNumber = 4;
    private string boardingPoint_ = "";
    /// <summary>
    /// 3 letter IATA code or 4 letter ICAO code of the passenger boarding point.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BoardingPoint {
      get { return boardingPoint_; }
      set {
        boardingPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sequenceNumber" field.</summary>
    public const int SequenceNumberFieldNumber = 5;
    private int sequenceNumber_;
    /// <summary>
    /// The check in sequence number.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SequenceNumber {
      get { return sequenceNumber_; }
      set {
        sequenceNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BoardingPassRecordRequestByIndex);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BoardingPassRecordRequestByIndex other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CarrierCode != other.CarrierCode) return false;
      if (FlightNumber != other.FlightNumber) return false;
      if (!object.Equals(DepartureDate, other.DepartureDate)) return false;
      if (BoardingPoint != other.BoardingPoint) return false;
      if (SequenceNumber != other.SequenceNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (CarrierCode.Length != 0) hash ^= CarrierCode.GetHashCode();
      if (FlightNumber.Length != 0) hash ^= FlightNumber.GetHashCode();
      if (departureDate_ != null) hash ^= DepartureDate.GetHashCode();
      if (BoardingPoint.Length != 0) hash ^= BoardingPoint.GetHashCode();
      if (SequenceNumber != 0) hash ^= SequenceNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CarrierCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CarrierCode);
      }
      if (FlightNumber.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FlightNumber);
      }
      if (departureDate_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DepartureDate);
      }
      if (BoardingPoint.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(BoardingPoint);
      }
      if (SequenceNumber != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SequenceNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CarrierCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CarrierCode);
      }
      if (FlightNumber.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FlightNumber);
      }
      if (departureDate_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DepartureDate);
      }
      if (BoardingPoint.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(BoardingPoint);
      }
      if (SequenceNumber != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SequenceNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (CarrierCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CarrierCode);
      }
      if (FlightNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FlightNumber);
      }
      if (departureDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DepartureDate);
      }
      if (BoardingPoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BoardingPoint);
      }
      if (SequenceNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SequenceNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BoardingPassRecordRequestByIndex other) {
      if (other == null) {
        return;
      }
      if (other.CarrierCode.Length != 0) {
        CarrierCode = other.CarrierCode;
      }
      if (other.FlightNumber.Length != 0) {
        FlightNumber = other.FlightNumber;
      }
      if (other.departureDate_ != null) {
        if (departureDate_ == null) {
          DepartureDate = new global::PassKit.Grpc.Date();
        }
        DepartureDate.MergeFrom(other.DepartureDate);
      }
      if (other.BoardingPoint.Length != 0) {
        BoardingPoint = other.BoardingPoint;
      }
      if (other.SequenceNumber != 0) {
        SequenceNumber = other.SequenceNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CarrierCode = input.ReadString();
            break;
          }
          case 18: {
            FlightNumber = input.ReadString();
            break;
          }
          case 26: {
            if (departureDate_ == null) {
              DepartureDate = new global::PassKit.Grpc.Date();
            }
            input.ReadMessage(DepartureDate);
            break;
          }
          case 34: {
            BoardingPoint = input.ReadString();
            break;
          }
          case 40: {
            SequenceNumber = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            CarrierCode = input.ReadString();
            break;
          }
          case 18: {
            FlightNumber = input.ReadString();
            break;
          }
          case 26: {
            if (departureDate_ == null) {
              DepartureDate = new global::PassKit.Grpc.Date();
            }
            input.ReadMessage(DepartureDate);
            break;
          }
          case 34: {
            BoardingPoint = input.ReadString();
            break;
          }
          case 40: {
            SequenceNumber = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Used to request a digital boarding pass by ticket number, index, PassKit ID or PNR.
  /// </summary>
  public sealed partial class BoardingPassRequest : pb::IMessage<BoardingPassRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BoardingPassRequest> _parser = new pb::MessageParser<BoardingPassRequest>(() => new BoardingPassRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BoardingPassRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.Flights.BoardingPassReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BoardingPassRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BoardingPassRequest(BoardingPassRequest other) : this() {
      format_ = other.format_.Clone();
      switch (other.RequestCase) {
        case RequestOneofCase.TicketNumber:
          TicketNumber = other.TicketNumber.Clone();
          break;
        case RequestOneofCase.Index:
          Index = other.Index.Clone();
          break;
        case RequestOneofCase.Pnr:
          Pnr = other.Pnr.Clone();
          break;
        case RequestOneofCase.PassId:
          PassId = other.PassId.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BoardingPassRequest Clone() {
      return new BoardingPassRequest(this);
    }

    /// <summary>Field number for the "ticketNumber" field.</summary>
    public const int TicketNumberFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Flights.BoardingPassRecordRequestByTicketNumber TicketNumber {
      get { return requestCase_ == RequestOneofCase.TicketNumber ? (global::PassKit.Grpc.Flights.BoardingPassRecordRequestByTicketNumber) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.TicketNumber;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Flights.BoardingPassRecordRequestByIndex Index {
      get { return requestCase_ == RequestOneofCase.Index ? (global::PassKit.Grpc.Flights.BoardingPassRecordRequestByIndex) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.Index;
      }
    }

    /// <summary>Field number for the "pnr" field.</summary>
    public const int PnrFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Flights.BoardingPassesForBookingRequest Pnr {
      get { return requestCase_ == RequestOneofCase.Pnr ? (global::PassKit.Grpc.Flights.BoardingPassesForBookingRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.Pnr;
      }
    }

    /// <summary>Field number for the "passId" field.</summary>
    public const int PassIdFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Id PassId {
      get { return requestCase_ == RequestOneofCase.PassId ? (global::PassKit.Grpc.Id) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.PassId;
      }
    }

    /// <summary>Field number for the "format" field.</summary>
    public const int FormatFieldNumber = 5;
    private static readonly pb::FieldCodec<global::PassKit.Grpc.PassBundleFormat> _repeated_format_codec
        = pb::FieldCodec.ForEnum(42, x => (int) x, x => (global::PassKit.Grpc.PassBundleFormat) x);
    private readonly pbc::RepeatedField<global::PassKit.Grpc.PassBundleFormat> format_ = new pbc::RepeatedField<global::PassKit.Grpc.PassBundleFormat>();
    /// <summary>
    /// Optional. If omitted, return the URL to the web pass landing page. Not used when getting or deleting the underlying boarding pass record.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::PassKit.Grpc.PassBundleFormat> Format {
      get { return format_; }
    }

    private object request_;
    /// <summary>Enum of possible cases for the "request" oneof.</summary>
    public enum RequestOneofCase {
      None = 0,
      TicketNumber = 1,
      Index = 2,
      Pnr = 3,
      PassId = 4,
    }
    private RequestOneofCase requestCase_ = RequestOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RequestOneofCase RequestCase {
      get { return requestCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRequest() {
      requestCase_ = RequestOneofCase.None;
      request_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BoardingPassRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BoardingPassRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TicketNumber, other.TicketNumber)) return false;
      if (!object.Equals(Index, other.Index)) return false;
      if (!object.Equals(Pnr, other.Pnr)) return false;
      if (!object.Equals(PassId, other.PassId)) return false;
      if(!format_.Equals(other.format_)) return false;
      if (RequestCase != other.RequestCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (requestCase_ == RequestOneofCase.TicketNumber) hash ^= TicketNumber.GetHashCode();
      if (requestCase_ == RequestOneofCase.Index) hash ^= Index.GetHashCode();
      if (requestCase_ == RequestOneofCase.Pnr) hash ^= Pnr.GetHashCode();
      if (requestCase_ == RequestOneofCase.PassId) hash ^= PassId.GetHashCode();
      hash ^= format_.GetHashCode();
      hash ^= (int) requestCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (requestCase_ == RequestOneofCase.TicketNumber) {
        output.WriteRawTag(10);
        output.WriteMessage(TicketNumber);
      }
      if (requestCase_ == RequestOneofCase.Index) {
        output.WriteRawTag(18);
        output.WriteMessage(Index);
      }
      if (requestCase_ == RequestOneofCase.Pnr) {
        output.WriteRawTag(26);
        output.WriteMessage(Pnr);
      }
      if (requestCase_ == RequestOneofCase.PassId) {
        output.WriteRawTag(34);
        output.WriteMessage(PassId);
      }
      format_.WriteTo(output, _repeated_format_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (requestCase_ == RequestOneofCase.TicketNumber) {
        output.WriteRawTag(10);
        output.WriteMessage(TicketNumber);
      }
      if (requestCase_ == RequestOneofCase.Index) {
        output.WriteRawTag(18);
        output.WriteMessage(Index);
      }
      if (requestCase_ == RequestOneofCase.Pnr) {
        output.WriteRawTag(26);
        output.WriteMessage(Pnr);
      }
      if (requestCase_ == RequestOneofCase.PassId) {
        output.WriteRawTag(34);
        output.WriteMessage(PassId);
      }
      format_.WriteTo(ref output, _repeated_format_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (requestCase_ == RequestOneofCase.TicketNumber) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TicketNumber);
      }
      if (requestCase_ == RequestOneofCase.Index) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Index);
      }
      if (requestCase_ == RequestOneofCase.Pnr) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pnr);
      }
      if (requestCase_ == RequestOneofCase.PassId) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PassId);
      }
      size += format_.CalculateSize(_repeated_format_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BoardingPassRequest other) {
      if (other == null) {
        return;
      }
      format_.Add(other.format_);
      switch (other.RequestCase) {
        case RequestOneofCase.TicketNumber:
          if (TicketNumber == null) {
            TicketNumber = new global::PassKit.Grpc.Flights.BoardingPassRecordRequestByTicketNumber();
          }
          TicketNumber.MergeFrom(other.TicketNumber);
          break;
        case RequestOneofCase.Index:
          if (Index == null) {
            Index = new global::PassKit.Grpc.Flights.BoardingPassRecordRequestByIndex();
          }
          Index.MergeFrom(other.Index);
          break;
        case RequestOneofCase.Pnr:
          if (Pnr == null) {
            Pnr = new global::PassKit.Grpc.Flights.BoardingPassesForBookingRequest();
          }
          Pnr.MergeFrom(other.Pnr);
          break;
        case RequestOneofCase.PassId:
          if (PassId == null) {
            PassId = new global::PassKit.Grpc.Id();
          }
          PassId.MergeFrom(other.PassId);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::PassKit.Grpc.Flights.BoardingPassRecordRequestByTicketNumber subBuilder = new global::PassKit.Grpc.Flights.BoardingPassRecordRequestByTicketNumber();
            if (requestCase_ == RequestOneofCase.TicketNumber) {
              subBuilder.MergeFrom(TicketNumber);
            }
            input.ReadMessage(subBuilder);
            TicketNumber = subBuilder;
            break;
          }
          case 18: {
            global::PassKit.Grpc.Flights.BoardingPassRecordRequestByIndex subBuilder = new global::PassKit.Grpc.Flights.BoardingPassRecordRequestByIndex();
            if (requestCase_ == RequestOneofCase.Index) {
              subBuilder.MergeFrom(Index);
            }
            input.ReadMessage(subBuilder);
            Index = subBuilder;
            break;
          }
          case 26: {
            global::PassKit.Grpc.Flights.BoardingPassesForBookingRequest subBuilder = new global::PassKit.Grpc.Flights.BoardingPassesForBookingRequest();
            if (requestCase_ == RequestOneofCase.Pnr) {
              subBuilder.MergeFrom(Pnr);
            }
            input.ReadMessage(subBuilder);
            Pnr = subBuilder;
            break;
          }
          case 34: {
            global::PassKit.Grpc.Id subBuilder = new global::PassKit.Grpc.Id();
            if (requestCase_ == RequestOneofCase.PassId) {
              subBuilder.MergeFrom(PassId);
            }
            input.ReadMessage(subBuilder);
            PassId = subBuilder;
            break;
          }
          case 42:
          case 40: {
            format_.AddEntriesFrom(input, _repeated_format_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::PassKit.Grpc.Flights.BoardingPassRecordRequestByTicketNumber subBuilder = new global::PassKit.Grpc.Flights.BoardingPassRecordRequestByTicketNumber();
            if (requestCase_ == RequestOneofCase.TicketNumber) {
              subBuilder.MergeFrom(TicketNumber);
            }
            input.ReadMessage(subBuilder);
            TicketNumber = subBuilder;
            break;
          }
          case 18: {
            global::PassKit.Grpc.Flights.BoardingPassRecordRequestByIndex subBuilder = new global::PassKit.Grpc.Flights.BoardingPassRecordRequestByIndex();
            if (requestCase_ == RequestOneofCase.Index) {
              subBuilder.MergeFrom(Index);
            }
            input.ReadMessage(subBuilder);
            Index = subBuilder;
            break;
          }
          case 26: {
            global::PassKit.Grpc.Flights.BoardingPassesForBookingRequest subBuilder = new global::PassKit.Grpc.Flights.BoardingPassesForBookingRequest();
            if (requestCase_ == RequestOneofCase.Pnr) {
              subBuilder.MergeFrom(Pnr);
            }
            input.ReadMessage(subBuilder);
            Pnr = subBuilder;
            break;
          }
          case 34: {
            global::PassKit.Grpc.Id subBuilder = new global::PassKit.Grpc.Id();
            if (requestCase_ == RequestOneofCase.PassId) {
              subBuilder.MergeFrom(PassId);
            }
            input.ReadMessage(subBuilder);
            PassId = subBuilder;
            break;
          }
          case 42:
          case 40: {
            format_.AddEntriesFrom(ref input, _repeated_format_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Used to request a digital boarding pass record by ticket number, index or pass id.
  /// </summary>
  public sealed partial class BoardingPassRecordRequest : pb::IMessage<BoardingPassRecordRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BoardingPassRecordRequest> _parser = new pb::MessageParser<BoardingPassRecordRequest>(() => new BoardingPassRecordRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BoardingPassRecordRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.Flights.BoardingPassReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BoardingPassRecordRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BoardingPassRecordRequest(BoardingPassRecordRequest other) : this() {
      switch (other.RequestCase) {
        case RequestOneofCase.TicketNumber:
          TicketNumber = other.TicketNumber.Clone();
          break;
        case RequestOneofCase.Index:
          Index = other.Index.Clone();
          break;
        case RequestOneofCase.PassId:
          PassId = other.PassId.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BoardingPassRecordRequest Clone() {
      return new BoardingPassRecordRequest(this);
    }

    /// <summary>Field number for the "ticketNumber" field.</summary>
    public const int TicketNumberFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Flights.BoardingPassRecordRequestByTicketNumber TicketNumber {
      get { return requestCase_ == RequestOneofCase.TicketNumber ? (global::PassKit.Grpc.Flights.BoardingPassRecordRequestByTicketNumber) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.TicketNumber;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Flights.BoardingPassRecordRequestByIndex Index {
      get { return requestCase_ == RequestOneofCase.Index ? (global::PassKit.Grpc.Flights.BoardingPassRecordRequestByIndex) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.Index;
      }
    }

    /// <summary>Field number for the "passId" field.</summary>
    public const int PassIdFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PassKit.Grpc.Id PassId {
      get { return requestCase_ == RequestOneofCase.PassId ? (global::PassKit.Grpc.Id) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.PassId;
      }
    }

    private object request_;
    /// <summary>Enum of possible cases for the "request" oneof.</summary>
    public enum RequestOneofCase {
      None = 0,
      TicketNumber = 1,
      Index = 2,
      PassId = 3,
    }
    private RequestOneofCase requestCase_ = RequestOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RequestOneofCase RequestCase {
      get { return requestCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRequest() {
      requestCase_ = RequestOneofCase.None;
      request_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BoardingPassRecordRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BoardingPassRecordRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TicketNumber, other.TicketNumber)) return false;
      if (!object.Equals(Index, other.Index)) return false;
      if (!object.Equals(PassId, other.PassId)) return false;
      if (RequestCase != other.RequestCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (requestCase_ == RequestOneofCase.TicketNumber) hash ^= TicketNumber.GetHashCode();
      if (requestCase_ == RequestOneofCase.Index) hash ^= Index.GetHashCode();
      if (requestCase_ == RequestOneofCase.PassId) hash ^= PassId.GetHashCode();
      hash ^= (int) requestCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (requestCase_ == RequestOneofCase.TicketNumber) {
        output.WriteRawTag(10);
        output.WriteMessage(TicketNumber);
      }
      if (requestCase_ == RequestOneofCase.Index) {
        output.WriteRawTag(18);
        output.WriteMessage(Index);
      }
      if (requestCase_ == RequestOneofCase.PassId) {
        output.WriteRawTag(26);
        output.WriteMessage(PassId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (requestCase_ == RequestOneofCase.TicketNumber) {
        output.WriteRawTag(10);
        output.WriteMessage(TicketNumber);
      }
      if (requestCase_ == RequestOneofCase.Index) {
        output.WriteRawTag(18);
        output.WriteMessage(Index);
      }
      if (requestCase_ == RequestOneofCase.PassId) {
        output.WriteRawTag(26);
        output.WriteMessage(PassId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (requestCase_ == RequestOneofCase.TicketNumber) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TicketNumber);
      }
      if (requestCase_ == RequestOneofCase.Index) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Index);
      }
      if (requestCase_ == RequestOneofCase.PassId) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PassId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BoardingPassRecordRequest other) {
      if (other == null) {
        return;
      }
      switch (other.RequestCase) {
        case RequestOneofCase.TicketNumber:
          if (TicketNumber == null) {
            TicketNumber = new global::PassKit.Grpc.Flights.BoardingPassRecordRequestByTicketNumber();
          }
          TicketNumber.MergeFrom(other.TicketNumber);
          break;
        case RequestOneofCase.Index:
          if (Index == null) {
            Index = new global::PassKit.Grpc.Flights.BoardingPassRecordRequestByIndex();
          }
          Index.MergeFrom(other.Index);
          break;
        case RequestOneofCase.PassId:
          if (PassId == null) {
            PassId = new global::PassKit.Grpc.Id();
          }
          PassId.MergeFrom(other.PassId);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::PassKit.Grpc.Flights.BoardingPassRecordRequestByTicketNumber subBuilder = new global::PassKit.Grpc.Flights.BoardingPassRecordRequestByTicketNumber();
            if (requestCase_ == RequestOneofCase.TicketNumber) {
              subBuilder.MergeFrom(TicketNumber);
            }
            input.ReadMessage(subBuilder);
            TicketNumber = subBuilder;
            break;
          }
          case 18: {
            global::PassKit.Grpc.Flights.BoardingPassRecordRequestByIndex subBuilder = new global::PassKit.Grpc.Flights.BoardingPassRecordRequestByIndex();
            if (requestCase_ == RequestOneofCase.Index) {
              subBuilder.MergeFrom(Index);
            }
            input.ReadMessage(subBuilder);
            Index = subBuilder;
            break;
          }
          case 26: {
            global::PassKit.Grpc.Id subBuilder = new global::PassKit.Grpc.Id();
            if (requestCase_ == RequestOneofCase.PassId) {
              subBuilder.MergeFrom(PassId);
            }
            input.ReadMessage(subBuilder);
            PassId = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::PassKit.Grpc.Flights.BoardingPassRecordRequestByTicketNumber subBuilder = new global::PassKit.Grpc.Flights.BoardingPassRecordRequestByTicketNumber();
            if (requestCase_ == RequestOneofCase.TicketNumber) {
              subBuilder.MergeFrom(TicketNumber);
            }
            input.ReadMessage(subBuilder);
            TicketNumber = subBuilder;
            break;
          }
          case 18: {
            global::PassKit.Grpc.Flights.BoardingPassRecordRequestByIndex subBuilder = new global::PassKit.Grpc.Flights.BoardingPassRecordRequestByIndex();
            if (requestCase_ == RequestOneofCase.Index) {
              subBuilder.MergeFrom(Index);
            }
            input.ReadMessage(subBuilder);
            Index = subBuilder;
            break;
          }
          case 26: {
            global::PassKit.Grpc.Id subBuilder = new global::PassKit.Grpc.Id();
            if (requestCase_ == RequestOneofCase.PassId) {
              subBuilder.MergeFrom(PassId);
            }
            input.ReadMessage(subBuilder);
            PassId = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Used to request digital boarding pass(es) by booking number. Either a journey leg or boarding point is required.
  /// </summary>
  public sealed partial class BoardingPassesForBookingRequest : pb::IMessage<BoardingPassesForBookingRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BoardingPassesForBookingRequest> _parser = new pb::MessageParser<BoardingPassesForBookingRequest>(() => new BoardingPassesForBookingRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BoardingPassesForBookingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.Flights.BoardingPassReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BoardingPassesForBookingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BoardingPassesForBookingRequest(BoardingPassesForBookingRequest other) : this() {
      pnr_ = other.pnr_;
      ticketLeg_ = other.ticketLeg_;
      boardingPoint_ = other.boardingPoint_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BoardingPassesForBookingRequest Clone() {
      return new BoardingPassesForBookingRequest(this);
    }

    /// <summary>Field number for the "pnr" field.</summary>
    public const int PnrFieldNumber = 1;
    private string pnr_ = "";
    /// <summary>
    /// The master PNR for the booking.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Pnr {
      get { return pnr_; }
      set {
        pnr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticketLeg" field.</summary>
    public const int TicketLegFieldNumber = 2;
    private int ticketLeg_;
    /// <summary>
    /// Optional. The leg of the ticket. Typically for a return ticket, the outbound leg will be 1 and the return leg will be 2.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TicketLeg {
      get { return ticketLeg_; }
      set {
        ticketLeg_ = value;
      }
    }

    /// <summary>Field number for the "boardingPoint" field.</summary>
    public const int BoardingPointFieldNumber = 3;
    private string boardingPoint_ = "";
    /// <summary>
    /// Required if no ticket leg. The 3 letter IATA code or 4 letter ICAO code of the passenger boarding point.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BoardingPoint {
      get { return boardingPoint_; }
      set {
        boardingPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BoardingPassesForBookingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BoardingPassesForBookingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pnr != other.Pnr) return false;
      if (TicketLeg != other.TicketLeg) return false;
      if (BoardingPoint != other.BoardingPoint) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Pnr.Length != 0) hash ^= Pnr.GetHashCode();
      if (TicketLeg != 0) hash ^= TicketLeg.GetHashCode();
      if (BoardingPoint.Length != 0) hash ^= BoardingPoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Pnr.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Pnr);
      }
      if (TicketLeg != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TicketLeg);
      }
      if (BoardingPoint.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BoardingPoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Pnr.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Pnr);
      }
      if (TicketLeg != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TicketLeg);
      }
      if (BoardingPoint.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BoardingPoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Pnr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pnr);
      }
      if (TicketLeg != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TicketLeg);
      }
      if (BoardingPoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BoardingPoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BoardingPassesForBookingRequest other) {
      if (other == null) {
        return;
      }
      if (other.Pnr.Length != 0) {
        Pnr = other.Pnr;
      }
      if (other.TicketLeg != 0) {
        TicketLeg = other.TicketLeg;
      }
      if (other.BoardingPoint.Length != 0) {
        BoardingPoint = other.BoardingPoint;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Pnr = input.ReadString();
            break;
          }
          case 16: {
            TicketLeg = input.ReadInt32();
            break;
          }
          case 26: {
            BoardingPoint = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Pnr = input.ReadString();
            break;
          }
          case 16: {
            TicketLeg = input.ReadInt32();
            break;
          }
          case 26: {
            BoardingPoint = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Contains an array of digital boarding passes.
  /// </summary>
  public sealed partial class BoardingPassesResponse : pb::IMessage<BoardingPassesResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BoardingPassesResponse> _parser = new pb::MessageParser<BoardingPassesResponse>(() => new BoardingPassesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BoardingPassesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.Flights.BoardingPassReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BoardingPassesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BoardingPassesResponse(BoardingPassesResponse other) : this() {
      boardingPasses_ = other.boardingPasses_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BoardingPassesResponse Clone() {
      return new BoardingPassesResponse(this);
    }

    /// <summary>Field number for the "boardingPasses" field.</summary>
    public const int BoardingPassesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PassKit.Grpc.PassBundle> _repeated_boardingPasses_codec
        = pb::FieldCodec.ForMessage(10, global::PassKit.Grpc.PassBundle.Parser);
    private readonly pbc::RepeatedField<global::PassKit.Grpc.PassBundle> boardingPasses_ = new pbc::RepeatedField<global::PassKit.Grpc.PassBundle>();
    /// <summary>
    /// An array of boarding passes found relating to the PNR.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::PassKit.Grpc.PassBundle> BoardingPasses {
      get { return boardingPasses_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BoardingPassesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BoardingPassesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!boardingPasses_.Equals(other.boardingPasses_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= boardingPasses_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      boardingPasses_.WriteTo(output, _repeated_boardingPasses_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      boardingPasses_.WriteTo(ref output, _repeated_boardingPasses_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += boardingPasses_.CalculateSize(_repeated_boardingPasses_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BoardingPassesResponse other) {
      if (other == null) {
        return;
      }
      boardingPasses_.Add(other.boardingPasses_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            boardingPasses_.AddEntriesFrom(input, _repeated_boardingPasses_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            boardingPasses_.AddEntriesFrom(ref input, _repeated_boardingPasses_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
