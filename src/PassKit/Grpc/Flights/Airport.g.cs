// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: io/flights/airport.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PassKit.Grpc.Flights {

  /// <summary>Holder for reflection information generated from io/flights/airport.proto</summary>
  public static partial class AirportReflection {

    #region Descriptor
    /// <summary>File descriptor for io/flights/airport.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AirportReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chhpby9mbGlnaHRzL2FpcnBvcnQucHJvdG8SB2ZsaWdodHMaHGlvL2NvbW1v",
            "bi9sb2NhbGl6YXRpb24ucHJvdG8aLnByb3RvYy1nZW4tb3BlbmFwaXYyL29w",
            "dGlvbnMvYW5ub3RhdGlvbnMucHJvdG8iqAMKBFBvcnQSHgoPaWF0YUFpcnBv",
            "cnRDb2RlGAEgASgJQgWSQQJ4AxIeCg9pY2FvQWlycG9ydENvZGUYAiABKAlC",
            "BZJBAngEEhAKCGNpdHlOYW1lGAMgASgJEi4KEWxvY2FsaXplZENpdHlOYW1l",
            "GAQgASgLMhMuaW8uTG9jYWxpemVkU3RyaW5nEhMKC2FpcnBvcnROYW1lGAUg",
            "ASgJEjEKFGxvY2FsaXplZEFpcnBvcnROYW1lGAYgASgLMhMuaW8uTG9jYWxp",
            "emVkU3RyaW5nEhMKC2NvdW50cnlDb2RlGAcgASgJEhAKCHRpbWV6b25lGAgg",
            "ASgJOq4BkkGqAQqnASoOQWlycG9ydCBSZWNvcmQyUUFpcnBvcnQgcmVjb3Jk",
            "cyBhcmUgcmVxdWlyZWQgZm9yIGVhY2ggcG9ydCB0aGF0IGEgY2FycmllciBv",
            "cGVyYXRlcyBpbiBhbmQgb3V0IG9mLtIBD2lhdGFBaXJwb3J0Q29kZdIBCGNp",
            "dHlOYW1l0gELYWlycG9ydE5hbWXSAQtjb3VudHJ5Q29kZdIBCHRpbWV6b25l",
            "IiIKC0FpcnBvcnRDb2RlEhMKC2FpcnBvcnRDb2RlGAEgASgJQl8KGGNvbS5w",
            "YXNza2l0LmdycGMuRmxpZ2h0c1osc3Rhc2gucGFzc2tpdC5jb20vaW8vbW9k",
            "ZWwvc2RrL2dvL2lvL2ZsaWdodHOqAhRQYXNzS2l0LkdycGMuRmxpZ2h0c2IG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::PassKit.Grpc.LocalizationReflection.Descriptor, global::PassKit.Grpc.Gateway.ProtocGenOpenapiv2.Options.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.Flights.Port), global::PassKit.Grpc.Flights.Port.Parser, new[]{ "IataAirportCode", "IcaoAirportCode", "CityName", "LocalizedCityName", "AirportName", "LocalizedAirportName", "CountryCode", "Timezone" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.Flights.AirportCode), global::PassKit.Grpc.Flights.AirportCode.Parser, new[]{ "AirportCode_" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Port is an optional record that allows the carrier to overwrite default airport names and their localizations.  A port can represent an origin, destination or transit port of a direct flight with stops.  If a port record does not exist, this information will be automatically populated with publicly available data.
  /// </summary>
  public sealed partial class Port : pb::IMessage<Port>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Port> _parser = new pb::MessageParser<Port>(() => new Port());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Port> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.Flights.AirportReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Port() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Port(Port other) : this() {
      iataAirportCode_ = other.iataAirportCode_;
      icaoAirportCode_ = other.icaoAirportCode_;
      cityName_ = other.cityName_;
      localizedCityName_ = other.localizedCityName_ != null ? other.localizedCityName_.Clone() : null;
      airportName_ = other.airportName_;
      localizedAirportName_ = other.localizedAirportName_ != null ? other.localizedAirportName_.Clone() : null;
      countryCode_ = other.countryCode_;
      timezone_ = other.timezone_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Port Clone() {
      return new Port(this);
    }

    /// <summary>Field number for the "iataAirportCode" field.</summary>
    public const int IataAirportCodeFieldNumber = 1;
    private string iataAirportCode_ = "";
    /// <summary>
    /// The IATA code of the port. At least one of IATA or ICAO airport code is required.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IataAirportCode {
      get { return iataAirportCode_; }
      set {
        iataAirportCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "icaoAirportCode" field.</summary>
    public const int IcaoAirportCodeFieldNumber = 2;
    private string icaoAirportCode_ = "";
    /// <summary>
    /// The IATA code of the port. At least one of IATA or ICAO airport code is required.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IcaoAirportCode {
      get { return icaoAirportCode_; }
      set {
        icaoAirportCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cityName" field.</summary>
    public const int CityNameFieldNumber = 3;
    private string cityName_ = "";
    /// <summary>
    /// The name of the city associated with the airport can be used in back/text fields.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CityName {
      get { return cityName_; }
      set {
        cityName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "localizedCityName" field.</summary>
    public const int LocalizedCityNameFieldNumber = 4;
    private global::PassKit.Grpc.LocalizedString localizedCityName_;
    /// <summary>
    /// The localized name of the city to be displayed on the boarding pass.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKit.Grpc.LocalizedString LocalizedCityName {
      get { return localizedCityName_; }
      set {
        localizedCityName_ = value;
      }
    }

    /// <summary>Field number for the "airportName" field.</summary>
    public const int AirportNameFieldNumber = 5;
    private string airportName_ = "";
    /// <summary>
    /// The name of the airport to be displayed on the boarding pass above the airport code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AirportName {
      get { return airportName_; }
      set {
        airportName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "localizedAirportName" field.</summary>
    public const int LocalizedAirportNameFieldNumber = 6;
    private global::PassKit.Grpc.LocalizedString localizedAirportName_;
    /// <summary>
    /// The localized name of the airport to be displayed on the boarding pass above the airport code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PassKit.Grpc.LocalizedString LocalizedAirportName {
      get { return localizedAirportName_; }
      set {
        localizedAirportName_ = value;
      }
    }

    /// <summary>Field number for the "countryCode" field.</summary>
    public const int CountryCodeFieldNumber = 7;
    private string countryCode_ = "";
    /// <summary>
    /// The ISO 3166 country code of the port.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CountryCode {
      get { return countryCode_; }
      set {
        countryCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timezone" field.</summary>
    public const int TimezoneFieldNumber = 8;
    private string timezone_ = "";
    /// <summary>
    /// The timezone of the airport in IANA timezone format. This is required to ensure the correct rendering of times and dates in the time local to the port.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timezone {
      get { return timezone_; }
      set {
        timezone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Port);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Port other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IataAirportCode != other.IataAirportCode) return false;
      if (IcaoAirportCode != other.IcaoAirportCode) return false;
      if (CityName != other.CityName) return false;
      if (!object.Equals(LocalizedCityName, other.LocalizedCityName)) return false;
      if (AirportName != other.AirportName) return false;
      if (!object.Equals(LocalizedAirportName, other.LocalizedAirportName)) return false;
      if (CountryCode != other.CountryCode) return false;
      if (Timezone != other.Timezone) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IataAirportCode.Length != 0) hash ^= IataAirportCode.GetHashCode();
      if (IcaoAirportCode.Length != 0) hash ^= IcaoAirportCode.GetHashCode();
      if (CityName.Length != 0) hash ^= CityName.GetHashCode();
      if (localizedCityName_ != null) hash ^= LocalizedCityName.GetHashCode();
      if (AirportName.Length != 0) hash ^= AirportName.GetHashCode();
      if (localizedAirportName_ != null) hash ^= LocalizedAirportName.GetHashCode();
      if (CountryCode.Length != 0) hash ^= CountryCode.GetHashCode();
      if (Timezone.Length != 0) hash ^= Timezone.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IataAirportCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(IataAirportCode);
      }
      if (IcaoAirportCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(IcaoAirportCode);
      }
      if (CityName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CityName);
      }
      if (localizedCityName_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LocalizedCityName);
      }
      if (AirportName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(AirportName);
      }
      if (localizedAirportName_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(LocalizedAirportName);
      }
      if (CountryCode.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(CountryCode);
      }
      if (Timezone.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Timezone);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IataAirportCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(IataAirportCode);
      }
      if (IcaoAirportCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(IcaoAirportCode);
      }
      if (CityName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CityName);
      }
      if (localizedCityName_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LocalizedCityName);
      }
      if (AirportName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(AirportName);
      }
      if (localizedAirportName_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(LocalizedAirportName);
      }
      if (CountryCode.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(CountryCode);
      }
      if (Timezone.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Timezone);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IataAirportCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IataAirportCode);
      }
      if (IcaoAirportCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IcaoAirportCode);
      }
      if (CityName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CityName);
      }
      if (localizedCityName_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalizedCityName);
      }
      if (AirportName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AirportName);
      }
      if (localizedAirportName_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalizedAirportName);
      }
      if (CountryCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CountryCode);
      }
      if (Timezone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timezone);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Port other) {
      if (other == null) {
        return;
      }
      if (other.IataAirportCode.Length != 0) {
        IataAirportCode = other.IataAirportCode;
      }
      if (other.IcaoAirportCode.Length != 0) {
        IcaoAirportCode = other.IcaoAirportCode;
      }
      if (other.CityName.Length != 0) {
        CityName = other.CityName;
      }
      if (other.localizedCityName_ != null) {
        if (localizedCityName_ == null) {
          LocalizedCityName = new global::PassKit.Grpc.LocalizedString();
        }
        LocalizedCityName.MergeFrom(other.LocalizedCityName);
      }
      if (other.AirportName.Length != 0) {
        AirportName = other.AirportName;
      }
      if (other.localizedAirportName_ != null) {
        if (localizedAirportName_ == null) {
          LocalizedAirportName = new global::PassKit.Grpc.LocalizedString();
        }
        LocalizedAirportName.MergeFrom(other.LocalizedAirportName);
      }
      if (other.CountryCode.Length != 0) {
        CountryCode = other.CountryCode;
      }
      if (other.Timezone.Length != 0) {
        Timezone = other.Timezone;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            IataAirportCode = input.ReadString();
            break;
          }
          case 18: {
            IcaoAirportCode = input.ReadString();
            break;
          }
          case 26: {
            CityName = input.ReadString();
            break;
          }
          case 34: {
            if (localizedCityName_ == null) {
              LocalizedCityName = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedCityName);
            break;
          }
          case 42: {
            AirportName = input.ReadString();
            break;
          }
          case 50: {
            if (localizedAirportName_ == null) {
              LocalizedAirportName = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedAirportName);
            break;
          }
          case 58: {
            CountryCode = input.ReadString();
            break;
          }
          case 66: {
            Timezone = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            IataAirportCode = input.ReadString();
            break;
          }
          case 18: {
            IcaoAirportCode = input.ReadString();
            break;
          }
          case 26: {
            CityName = input.ReadString();
            break;
          }
          case 34: {
            if (localizedCityName_ == null) {
              LocalizedCityName = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedCityName);
            break;
          }
          case 42: {
            AirportName = input.ReadString();
            break;
          }
          case 50: {
            if (localizedAirportName_ == null) {
              LocalizedAirportName = new global::PassKit.Grpc.LocalizedString();
            }
            input.ReadMessage(LocalizedAirportName);
            break;
          }
          case 58: {
            CountryCode = input.ReadString();
            break;
          }
          case 66: {
            Timezone = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Airport Request is used for retrieving or deleting a port record.
  /// </summary>
  public sealed partial class AirportCode : pb::IMessage<AirportCode>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AirportCode> _parser = new pb::MessageParser<AirportCode>(() => new AirportCode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AirportCode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.Flights.AirportReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AirportCode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AirportCode(AirportCode other) : this() {
      airportCode_ = other.airportCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AirportCode Clone() {
      return new AirportCode(this);
    }

    /// <summary>Field number for the "airportCode" field.</summary>
    public const int AirportCode_FieldNumber = 1;
    private string airportCode_ = "";
    /// <summary>
    /// The IATA or ICAO airport code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AirportCode_ {
      get { return airportCode_; }
      set {
        airportCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AirportCode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AirportCode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AirportCode_ != other.AirportCode_) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AirportCode_.Length != 0) hash ^= AirportCode_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AirportCode_.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AirportCode_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AirportCode_.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AirportCode_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AirportCode_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AirportCode_);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AirportCode other) {
      if (other == null) {
        return;
      }
      if (other.AirportCode_.Length != 0) {
        AirportCode_ = other.AirportCode_;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AirportCode_ = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            AirportCode_ = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
