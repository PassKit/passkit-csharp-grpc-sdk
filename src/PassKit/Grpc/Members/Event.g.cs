// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: io/member/event.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PassKit.Grpc.Members {

  /// <summary>Holder for reflection information generated from io/member/event.proto</summary>
  public static partial class EventReflection {

    #region Descriptor
    /// <summary>File descriptor for io/member/event.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVpby9tZW1iZXIvZXZlbnQucHJvdG8SB21lbWJlcnMiiwIKDEV2ZW50RGV0",
            "YWlscxIPCgdhZGRyZXNzGAEgASgJEgsKA2xhdBgCIAEoARILCgNsb24YAyAB",
            "KAESCwoDYWx0GAQgASgFEhcKD2V4dGVybmFsRXZlbnRJZBgFIAEoCRIYChBl",
            "eHRlcm5hbERldmljZUlkGAYgASgJEhkKEWV4dGVybmFsU2VydmljZUlkGAcg",
            "ASgJEjUKCG1ldGFEYXRhGAggAygLMiMubWVtYmVycy5FdmVudERldGFpbHMu",
            "TWV0YURhdGFFbnRyeRINCgVub3RlcxgJIAEoCRovCg1NZXRhRGF0YUVudHJ5",
            "EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAFCXwoYY29tLnBhc3Nr",
            "aXQuZ3JwYy5NZW1iZXJzWixzdGFzaC5wYXNza2l0LmNvbS9pby9tb2RlbC9z",
            "ZGsvZ28vaW8vbWVtYmVyc6oCFFBhc3NLaXQuR3JwYy5NZW1iZXJzYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PassKit.Grpc.Members.EventDetails), global::PassKit.Grpc.Members.EventDetails.Parser, new[]{ "Address", "Lat", "Lon", "Alt", "ExternalEventId", "ExternalDeviceId", "ExternalServiceId", "MetaData", "Notes" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Details on the event. These info will be stored in Member Event.
  /// </summary>
  public sealed partial class EventDetails : pb::IMessage<EventDetails>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EventDetails> _parser = new pb::MessageParser<EventDetails>(() => new EventDetails());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PassKit.Grpc.Members.EventReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventDetails(EventDetails other) : this() {
      address_ = other.address_;
      lat_ = other.lat_;
      lon_ = other.lon_;
      alt_ = other.alt_;
      externalEventId_ = other.externalEventId_;
      externalDeviceId_ = other.externalDeviceId_;
      externalServiceId_ = other.externalServiceId_;
      metaData_ = other.metaData_.Clone();
      notes_ = other.notes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventDetails Clone() {
      return new EventDetails(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private string address_ = "";
    /// <summary>
    /// Address the event took place.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lat" field.</summary>
    public const int LatFieldNumber = 2;
    private double lat_;
    /// <summary>
    /// Latitude the event took place.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Lat {
      get { return lat_; }
      set {
        lat_ = value;
      }
    }

    /// <summary>Field number for the "lon" field.</summary>
    public const int LonFieldNumber = 3;
    private double lon_;
    /// <summary>
    /// Longitude the event took place.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Lon {
      get { return lon_; }
      set {
        lon_ = value;
      }
    }

    /// <summary>Field number for the "alt" field.</summary>
    public const int AltFieldNumber = 4;
    private int alt_;
    /// <summary>
    /// Altitude the event took place (in metres).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Alt {
      get { return alt_; }
      set {
        alt_ = value;
      }
    }

    /// <summary>Field number for the "externalEventId" field.</summary>
    public const int ExternalEventIdFieldNumber = 5;
    private string externalEventId_ = "";
    /// <summary>
    /// External unique ID of the event.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExternalEventId {
      get { return externalEventId_; }
      set {
        externalEventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "externalDeviceId" field.</summary>
    public const int ExternalDeviceIdFieldNumber = 6;
    private string externalDeviceId_ = "";
    /// <summary>
    /// External device ID of the device that was used to capture the event (for example when using an external scanning app).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExternalDeviceId {
      get { return externalDeviceId_; }
      set {
        externalDeviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "externalServiceId" field.</summary>
    public const int ExternalServiceIdFieldNumber = 7;
    private string externalServiceId_ = "";
    /// <summary>
    /// External service ID of the service that was used for capturing the event (for example when using an external scanning app).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExternalServiceId {
      get { return externalServiceId_; }
      set {
        externalServiceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metaData" field.</summary>
    public const int MetaDataFieldNumber = 8;
    private static readonly pbc::MapField<string, string>.Codec _map_metaData_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 66);
    private readonly pbc::MapField<string, string> metaData_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Any meta data (for example gathered on scanning) that is relevant to the event (# of points earner, bill spent, device meta-data, etc).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> MetaData {
      get { return metaData_; }
    }

    /// <summary>Field number for the "notes" field.</summary>
    public const int NotesFieldNumber = 9;
    private string notes_ = "";
    /// <summary>
    /// Any relevant notes for the event.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Notes {
      get { return notes_; }
      set {
        notes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Lat, other.Lat)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Lon, other.Lon)) return false;
      if (Alt != other.Alt) return false;
      if (ExternalEventId != other.ExternalEventId) return false;
      if (ExternalDeviceId != other.ExternalDeviceId) return false;
      if (ExternalServiceId != other.ExternalServiceId) return false;
      if (!MetaData.Equals(other.MetaData)) return false;
      if (Notes != other.Notes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (Lat != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Lat);
      if (Lon != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Lon);
      if (Alt != 0) hash ^= Alt.GetHashCode();
      if (ExternalEventId.Length != 0) hash ^= ExternalEventId.GetHashCode();
      if (ExternalDeviceId.Length != 0) hash ^= ExternalDeviceId.GetHashCode();
      if (ExternalServiceId.Length != 0) hash ^= ExternalServiceId.GetHashCode();
      hash ^= MetaData.GetHashCode();
      if (Notes.Length != 0) hash ^= Notes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (Lat != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Lat);
      }
      if (Lon != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Lon);
      }
      if (Alt != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Alt);
      }
      if (ExternalEventId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ExternalEventId);
      }
      if (ExternalDeviceId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ExternalDeviceId);
      }
      if (ExternalServiceId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ExternalServiceId);
      }
      metaData_.WriteTo(output, _map_metaData_codec);
      if (Notes.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Notes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (Lat != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Lat);
      }
      if (Lon != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Lon);
      }
      if (Alt != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Alt);
      }
      if (ExternalEventId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ExternalEventId);
      }
      if (ExternalDeviceId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ExternalDeviceId);
      }
      if (ExternalServiceId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ExternalServiceId);
      }
      metaData_.WriteTo(ref output, _map_metaData_codec);
      if (Notes.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Notes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Lat != 0D) {
        size += 1 + 8;
      }
      if (Lon != 0D) {
        size += 1 + 8;
      }
      if (Alt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Alt);
      }
      if (ExternalEventId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExternalEventId);
      }
      if (ExternalDeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExternalDeviceId);
      }
      if (ExternalServiceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExternalServiceId);
      }
      size += metaData_.CalculateSize(_map_metaData_codec);
      if (Notes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Notes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventDetails other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.Lat != 0D) {
        Lat = other.Lat;
      }
      if (other.Lon != 0D) {
        Lon = other.Lon;
      }
      if (other.Alt != 0) {
        Alt = other.Alt;
      }
      if (other.ExternalEventId.Length != 0) {
        ExternalEventId = other.ExternalEventId;
      }
      if (other.ExternalDeviceId.Length != 0) {
        ExternalDeviceId = other.ExternalDeviceId;
      }
      if (other.ExternalServiceId.Length != 0) {
        ExternalServiceId = other.ExternalServiceId;
      }
      metaData_.Add(other.metaData_);
      if (other.Notes.Length != 0) {
        Notes = other.Notes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
          case 17: {
            Lat = input.ReadDouble();
            break;
          }
          case 25: {
            Lon = input.ReadDouble();
            break;
          }
          case 32: {
            Alt = input.ReadInt32();
            break;
          }
          case 42: {
            ExternalEventId = input.ReadString();
            break;
          }
          case 50: {
            ExternalDeviceId = input.ReadString();
            break;
          }
          case 58: {
            ExternalServiceId = input.ReadString();
            break;
          }
          case 66: {
            metaData_.AddEntriesFrom(input, _map_metaData_codec);
            break;
          }
          case 74: {
            Notes = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
          case 17: {
            Lat = input.ReadDouble();
            break;
          }
          case 25: {
            Lon = input.ReadDouble();
            break;
          }
          case 32: {
            Alt = input.ReadInt32();
            break;
          }
          case 42: {
            ExternalEventId = input.ReadString();
            break;
          }
          case 50: {
            ExternalDeviceId = input.ReadString();
            break;
          }
          case 58: {
            ExternalServiceId = input.ReadString();
            break;
          }
          case 66: {
            metaData_.AddEntriesFrom(ref input, _map_metaData_codec);
            break;
          }
          case 74: {
            Notes = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
