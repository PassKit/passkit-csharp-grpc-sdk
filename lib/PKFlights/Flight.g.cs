// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: io/flights/flight.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PKFlights {

  /// <summary>Holder for reflection information generated from io/flights/flight.proto</summary>
  public static partial class FlightReflection {

    #region Descriptor
    /// <summary>File descriptor for io/flights/flight.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FlightReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chdpby9mbGlnaHRzL2ZsaWdodC5wcm90bxIHZmxpZ2h0cxoeaW8vY29tbW9u",
            "L2NvbW1vbl9vYmplY3RzLnByb3RvGhlpby9jb21tb24vcHJveGltaXR5LnBy",
            "b3RvGhVpby9jb21tb24vbGlua3MucHJvdG8aF2lvL2NvbW1vbi9tZXRyaWNz",
            "LnByb3RvGiJpby9mbGlnaHRzL2ZsaWdodF9kZXNpZ25hdG9yLnByb3RvGixw",
            "cm90b2MtZ2VuLXN3YWdnZXIvb3B0aW9ucy9hbm5vdGF0aW9ucy5wcm90byK7",
            "CwoGRmxpZ2h0Eh0KC2NhcnJpZXJDb2RlGAEgASgJQgiSQQV4A4ABAhIbCgxm",
            "bGlnaHROdW1iZXIYAiABKAlCBZJBAngFEhwKDWJvYXJkaW5nUG9pbnQYAyAB",
            "KAlCBZJBAngDEh0KDmRlcGxhbmluZ1BvaW50GAQgASgJQgWSQQJ4AxIfCg1k",
            "ZXBhcnR1cmVEYXRlGAUgASgLMgguaW8uRGF0ZRIZChFkZXBhcnR1cmVUZXJt",
            "aW5hbBgGIAEoCRIXCg9hcnJpdmFsVGVybWluYWwYByABKAkSFQoNZGVwYXJ0",
            "dXJlR2F0ZRgIIAEoCRITCgthcnJpdmFsR2F0ZRgJIAEoCRIxChZzY2hlZHVs",
            "ZWREZXBhcnR1cmVUaW1lGAogASgLMhEuaW8uTG9jYWxEYXRlVGltZRIxChZl",
            "c3RpbWF0ZWREZXBhcnR1cmVUaW1lGAsgASgLMhEuaW8uTG9jYWxEYXRlVGlt",
            "ZRInCgxib2FyZGluZ1RpbWUYDCABKAsyES5pby5Mb2NhbERhdGVUaW1lEioK",
            "D2dhdGVDbG9zaW5nVGltZRgNIAEoCzIRLmlvLkxvY2FsRGF0ZVRpbWUSLwoU",
            "c2NoZWR1bGVkQXJyaXZhbFRpbWUYDiABKAsyES5pby5Mb2NhbERhdGVUaW1l",
            "Ei8KFGVzdGltYXRlZEFycml2YWxUaW1lGA8gASgLMhEuaW8uTG9jYWxEYXRl",
            "VGltZRImChRvcGVyYXRpbmdDYXJyaWVyQ29kZRgQIAEoCUIIkkEFeAOAAQIS",
            "JAoVb3BlcmF0aW5nRmxpZ2h0TnVtYmVyGBEgASgJQgWSQQJ4BRIeChZjb2Rl",
            "U2hhcmVGbGlnaHROdW1iZXJzGBIgAygJEhYKDnBhc3NUZW1wbGF0ZUlkGBMg",
            "ASgJEhMKC2JhZ2dhZ2VCZWx0GBUgASgJEiYKE2F1dG9JbnZhbGlkYXRlQWZ0",
            "ZXIYFiABKA1CCZJBBjoEMjg4MBIwCh1hdXRvSW52YWxpZGF0ZUNhbmNlbGxl",
            "ZFBhc3NlcxgXIAEoCEIJkkEGOgRUUlVFEjEKEGxvY2F0aW9uTWVzc2FnZXMY",
            "GCADKAsyDy5pby5HUFNMb2NhdGlvbkIGkkEDoAEKEioKDmJlYWNvbk1lc3Nh",
            "Z2VzGBkgAygLMgouaW8uQmVhY29uQgaSQQOgAQoSHwoFbGlua3MYGiADKAsy",
            "CC5pby5MaW5rQgaSQQOgAQoSHwoXc3VzcGVuZEF1dG9tYXRpY1VwZGF0ZXMY",
            "GyABKAgSLwoOYm9hcmRpbmdQb2xpY3kYHCABKA4yFy5mbGlnaHRzLkJvYXJk",
            "aW5nUG9saWN5Ei8KDXNlYXRpbmdQb2xpY3kYHSABKA4yGC5mbGlnaHRzLlNl",
            "YXRDbGFzc1BvbGljeRIlCgZzdGF0dXMYHiABKA4yFS5mbGlnaHRzLkZsaWdo",
            "dFN0YXR1cxIYChBDb25kaXRpb25hbEl0ZW1zGB8gASgIEh0KFUJhcmNvZGVB",
            "ZGRpdGlvbmFsRGF0YRggIAEoCRIcCgdtZXRyaWNzGCEgASgLMgsuaW8uTWV0",
            "cmljcxIvCgxjcmVhdGVNZXRob2QYIiABKA4yGS5mbGlnaHRzLkZsaWdodENy",
            "ZWF0ZU1vZGUSFAoMZGVzaWduYXRvcklkGCMgASgJOtwBkkHYAQrVASoGRmxp",
            "Z2h0MlNBIGZsaWdodCByZWNvcmQgZGVzY3JpYmVzIGRhdGEgdGhhdCBpcyBy",
            "ZWxldmFudCB0byBhIHNpbmdsZSBmbGlnaHQgb24gYSBnaXZlbiBkYXRlLtIB",
            "C2NhcnJpZXJDb2Rl0gEMZmxpZ2h0TnVtYmVy0gENYm9hcmRpbmdQb2ludNIB",
            "DmRlcGxhbmluZ1BvaW500gEWc2NoZWR1bGVkRGVwYXJ0dXJlVGltZdIBDnBh",
            "c3NUZW1wbGF0ZUlk0gENZGVwYXJ0dXJlRGF0ZSKbAQoNRmxpZ2h0UmVxdWVz",
            "dBIdCgtjYXJyaWVyQ29kZRgBIAEoCUIIkkEFeAOAAQISGwoMZmxpZ2h0TnVt",
            "YmVyGAIgASgJQgWSQQJ4BRIfCg1kZXBhcnR1cmVEYXRlGAMgASgLMgguaW8u",
            "RGF0ZRIVCg1ib2FyZGluZ1BvaW50GAUgASgJEhYKDmRlcGxhbmluZ1BvaW50",
            "GAYgASgJKvoBCgxGbGlnaHRTdGF0dXMSCwoHVU5LTk9XThAAEg0KCVNDSEVE",
            "VUxFRBABEgwKCERFUEFSVEVEEAISCQoFSU5BSVIQAxIKCgZMQU5ERUQQBBIL",
            "CgdBUlJJVkVEEAUSDQoJQ0FOQ0VMTEVEEAYSCwoHREVMQVlFRBAHEhUKEURF",
            "UEFSVEVEX0RJVkVSVEVEEAgSEgoOSU5BSVJfRElWRVJURUQQCRIUChBBUlJJ",
            "VkVEX0RJVkVSVEVEEAoSFQoRREVQQVJURURfUkVDT1ZFUlkQCxISCg5JTkFJ",
            "Ul9SRUNPVkVSWRAMEhQKEEFSUklWRURfUkVDT1ZFUlkQDSo9ChBGbGlnaHRD",
            "cmVhdGVNb2RlEg4KCkRPX05PVF9VU0UQABIKCgZNQU5VQUwQARINCglBVVRP",
            "TUFUSUMQAkJTChdpby5wYXNza2l0LlBLaW8uRmxpZ2h0c1osc3Rhc2gucGFz",
            "c2tpdC5jb20vaW8vbW9kZWwvc2RrL2dvL2lvL2ZsaWdodHOqAglQS0ZsaWdo",
            "dHNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::PKIo.CommonObjectsReflection.Descriptor, global::PKIo.ProximityReflection.Descriptor, global::PKIo.LinksReflection.Descriptor, global::PKIo.MetricsReflection.Descriptor, global::PKFlights.FlightDesignatorReflection.Descriptor, global::Grpc.Gateway.ProtocGenSwagger.Options.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PKFlights.FlightStatus), typeof(global::PKFlights.FlightCreateMode), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PKFlights.Flight), global::PKFlights.Flight.Parser, new[]{ "CarrierCode", "FlightNumber", "BoardingPoint", "DeplaningPoint", "DepartureDate", "DepartureTerminal", "ArrivalTerminal", "DepartureGate", "ArrivalGate", "ScheduledDepartureTime", "EstimatedDepartureTime", "BoardingTime", "GateClosingTime", "ScheduledArrivalTime", "EstimatedArrivalTime", "OperatingCarrierCode", "OperatingFlightNumber", "CodeShareFlightNumbers", "PassTemplateId", "BaggageBelt", "AutoInvalidateAfter", "AutoInvalidateCancelledPasses", "LocationMessages", "BeaconMessages", "Links", "SuspendAutomaticUpdates", "BoardingPolicy", "SeatingPolicy", "Status", "ConditionalItems", "BarcodeAdditionalData", "Metrics", "CreateMethod", "DesignatorId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PKFlights.FlightRequest), global::PKFlights.FlightRequest.Parser, new[]{ "CarrierCode", "FlightNumber", "DepartureDate", "BoardingPoint", "DeplaningPoint" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// For customers subscribing to automatic updates, the flight status will be automatically updated. Status is also writable for manual updates.
  /// </summary>
  public enum FlightStatus {
    /// <summary>
    /// No status is known, or flight is not yet scheduled.
    /// </summary>
    [pbr::OriginalName("UNKNOWN")] Unknown = 0,
    /// <summary>
    /// Flight is scheduled to depart.
    /// </summary>
    [pbr::OriginalName("SCHEDULED")] Scheduled = 1,
    /// <summary>
    /// Flight has left the departure gate, but may not be airborne yet.
    /// </summary>
    [pbr::OriginalName("DEPARTED")] Departed = 2,
    /// <summary>
    /// Flight is airborne.
    /// </summary>
    [pbr::OriginalName("INAIR")] Inair = 3,
    /// <summary>
    /// Flight has landed, but may not yet be at the arrival gate.
    /// </summary>
    [pbr::OriginalName("LANDED")] Landed = 4,
    /// <summary>
    /// Flight has arrived at the destination gate.
    /// </summary>
    [pbr::OriginalName("ARRIVED")] Arrived = 5,
    /// <summary>
    /// Flight has been cancelled.
    /// </summary>
    [pbr::OriginalName("CANCELLED")] Cancelled = 6,
    /// <summary>
    /// Flight is delayed to depart by at least 15 minutes.
    /// </summary>
    [pbr::OriginalName("DELAYED")] Delayed = 7,
    /// <summary>
    /// Flight has been diverted from its scheduled destination and has left the departure gate.
    /// </summary>
    [pbr::OriginalName("DEPARTED_DIVERTED")] DepartedDiverted = 8,
    /// <summary>
    /// Flight has been diverted from its scheduled destination and is airborne.
    /// </summary>
    [pbr::OriginalName("INAIR_DIVERTED")] InairDiverted = 9,
    /// <summary>
    /// Flight has arrived at a location different to its scheduled destination.
    /// </summary>
    [pbr::OriginalName("ARRIVED_DIVERTED")] ArrivedDiverted = 10,
    /// <summary>
    /// Flight has left its diverted destination en-route to its original destination.
    /// </summary>
    [pbr::OriginalName("DEPARTED_RECOVERY")] DepartedRecovery = 11,
    /// <summary>
    /// Flight has left its diverted destination airborne en-route to its original destination.
    /// </summary>
    [pbr::OriginalName("INAIR_RECOVERY")] InairRecovery = 12,
    /// <summary>
    /// Flight has landed at is original scheduled destination.
    /// </summary>
    [pbr::OriginalName("ARRIVED_RECOVERY")] ArrivedRecovery = 13,
  }

  public enum FlightCreateMode {
    [pbr::OriginalName("DO_NOT_USE")] DoNotUse = 0,
    [pbr::OriginalName("MANUAL")] Manual = 1,
    [pbr::OriginalName("AUTOMATIC")] Automatic = 2,
  }

  #endregion

  #region Messages
  public sealed partial class Flight : pb::IMessage<Flight> {
    private static readonly pb::MessageParser<Flight> _parser = new pb::MessageParser<Flight>(() => new Flight());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Flight> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PKFlights.FlightReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Flight() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Flight(Flight other) : this() {
      carrierCode_ = other.carrierCode_;
      flightNumber_ = other.flightNumber_;
      boardingPoint_ = other.boardingPoint_;
      deplaningPoint_ = other.deplaningPoint_;
      departureDate_ = other.departureDate_ != null ? other.departureDate_.Clone() : null;
      departureTerminal_ = other.departureTerminal_;
      arrivalTerminal_ = other.arrivalTerminal_;
      departureGate_ = other.departureGate_;
      arrivalGate_ = other.arrivalGate_;
      scheduledDepartureTime_ = other.scheduledDepartureTime_ != null ? other.scheduledDepartureTime_.Clone() : null;
      estimatedDepartureTime_ = other.estimatedDepartureTime_ != null ? other.estimatedDepartureTime_.Clone() : null;
      boardingTime_ = other.boardingTime_ != null ? other.boardingTime_.Clone() : null;
      gateClosingTime_ = other.gateClosingTime_ != null ? other.gateClosingTime_.Clone() : null;
      scheduledArrivalTime_ = other.scheduledArrivalTime_ != null ? other.scheduledArrivalTime_.Clone() : null;
      estimatedArrivalTime_ = other.estimatedArrivalTime_ != null ? other.estimatedArrivalTime_.Clone() : null;
      operatingCarrierCode_ = other.operatingCarrierCode_;
      operatingFlightNumber_ = other.operatingFlightNumber_;
      codeShareFlightNumbers_ = other.codeShareFlightNumbers_.Clone();
      passTemplateId_ = other.passTemplateId_;
      baggageBelt_ = other.baggageBelt_;
      autoInvalidateAfter_ = other.autoInvalidateAfter_;
      autoInvalidateCancelledPasses_ = other.autoInvalidateCancelledPasses_;
      locationMessages_ = other.locationMessages_.Clone();
      beaconMessages_ = other.beaconMessages_.Clone();
      links_ = other.links_.Clone();
      suspendAutomaticUpdates_ = other.suspendAutomaticUpdates_;
      boardingPolicy_ = other.boardingPolicy_;
      seatingPolicy_ = other.seatingPolicy_;
      status_ = other.status_;
      conditionalItems_ = other.conditionalItems_;
      barcodeAdditionalData_ = other.barcodeAdditionalData_;
      metrics_ = other.metrics_ != null ? other.metrics_.Clone() : null;
      createMethod_ = other.createMethod_;
      designatorId_ = other.designatorId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Flight Clone() {
      return new Flight(this);
    }

    /// <summary>Field number for the "carrierCode" field.</summary>
    public const int CarrierCodeFieldNumber = 1;
    private string carrierCode_ = "";
    /// <summary>
    /// The IATA or ICAO carrier code for the flight. In the case of a code-share, this should be the carrier code that you wish to present to the customer. This could be the marketing code, or the operating airline code. A carrier record for this code must exist.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CarrierCode {
      get { return carrierCode_; }
      set {
        carrierCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "flightNumber" field.</summary>
    public const int FlightNumberFieldNumber = 2;
    private string flightNumber_ = "";
    /// <summary>
    /// The flight number.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FlightNumber {
      get { return flightNumber_; }
      set {
        flightNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "boardingPoint" field.</summary>
    public const int BoardingPointFieldNumber = 3;
    private string boardingPoint_ = "";
    /// <summary>
    /// The IATA airport code of the boarding point. Only required is segment is not provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BoardingPoint {
      get { return boardingPoint_; }
      set {
        boardingPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deplaningPoint" field.</summary>
    public const int DeplaningPointFieldNumber = 4;
    private string deplaningPoint_ = "";
    /// <summary>
    /// The IATA airport code of the deplaning point.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeplaningPoint {
      get { return deplaningPoint_; }
      set {
        deplaningPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "departureDate" field.</summary>
    public const int DepartureDateFieldNumber = 5;
    private global::PKIo.Date departureDate_;
    /// <summary>
    /// The scheduled date of departure.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKIo.Date DepartureDate {
      get { return departureDate_; }
      set {
        departureDate_ = value;
      }
    }

    /// <summary>Field number for the "departureTerminal" field.</summary>
    public const int DepartureTerminalFieldNumber = 6;
    private string departureTerminal_ = "";
    /// <summary>
    /// Departure Terminal.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DepartureTerminal {
      get { return departureTerminal_; }
      set {
        departureTerminal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "arrivalTerminal" field.</summary>
    public const int ArrivalTerminalFieldNumber = 7;
    private string arrivalTerminal_ = "";
    /// <summary>
    /// Arrival Terminal.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ArrivalTerminal {
      get { return arrivalTerminal_; }
      set {
        arrivalTerminal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "departureGate" field.</summary>
    public const int DepartureGateFieldNumber = 8;
    private string departureGate_ = "";
    /// <summary>
    /// Departure Gate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DepartureGate {
      get { return departureGate_; }
      set {
        departureGate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "arrivalGate" field.</summary>
    public const int ArrivalGateFieldNumber = 9;
    private string arrivalGate_ = "";
    /// <summary>
    /// Arrival Gate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ArrivalGate {
      get { return arrivalGate_; }
      set {
        arrivalGate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scheduledDepartureTime" field.</summary>
    public const int ScheduledDepartureTimeFieldNumber = 10;
    private global::PKIo.LocalDateTime scheduledDepartureTime_;
    /// <summary>
    /// The scheduled departure time. If omitted then the departureDate must be specified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKIo.LocalDateTime ScheduledDepartureTime {
      get { return scheduledDepartureTime_; }
      set {
        scheduledDepartureTime_ = value;
      }
    }

    /// <summary>Field number for the "estimatedDepartureTime" field.</summary>
    public const int EstimatedDepartureTimeFieldNumber = 11;
    private global::PKIo.LocalDateTime estimatedDepartureTime_;
    /// <summary>
    /// The estimated departure time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKIo.LocalDateTime EstimatedDepartureTime {
      get { return estimatedDepartureTime_; }
      set {
        estimatedDepartureTime_ = value;
      }
    }

    /// <summary>Field number for the "boardingTime" field.</summary>
    public const int BoardingTimeFieldNumber = 12;
    private global::PKIo.LocalDateTime boardingTime_;
    /// <summary>
    /// The boarding time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKIo.LocalDateTime BoardingTime {
      get { return boardingTime_; }
      set {
        boardingTime_ = value;
      }
    }

    /// <summary>Field number for the "gateClosingTime" field.</summary>
    public const int GateClosingTimeFieldNumber = 13;
    private global::PKIo.LocalDateTime gateClosingTime_;
    /// <summary>
    /// The time the gate will close.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKIo.LocalDateTime GateClosingTime {
      get { return gateClosingTime_; }
      set {
        gateClosingTime_ = value;
      }
    }

    /// <summary>Field number for the "scheduledArrivalTime" field.</summary>
    public const int ScheduledArrivalTimeFieldNumber = 14;
    private global::PKIo.LocalDateTime scheduledArrivalTime_;
    /// <summary>
    /// The scheduled arrival time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKIo.LocalDateTime ScheduledArrivalTime {
      get { return scheduledArrivalTime_; }
      set {
        scheduledArrivalTime_ = value;
      }
    }

    /// <summary>Field number for the "estimatedArrivalTime" field.</summary>
    public const int EstimatedArrivalTimeFieldNumber = 15;
    private global::PKIo.LocalDateTime estimatedArrivalTime_;
    /// <summary>
    /// The estimated arrival time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKIo.LocalDateTime EstimatedArrivalTime {
      get { return estimatedArrivalTime_; }
      set {
        estimatedArrivalTime_ = value;
      }
    }

    /// <summary>Field number for the "operatingCarrierCode" field.</summary>
    public const int OperatingCarrierCodeFieldNumber = 16;
    private string operatingCarrierCode_ = "";
    /// <summary>
    /// If the flight is operated by a carrier other than the carrierCode supplied, provide the IATA or ICAO carrier code for the operating carrier.  A carrier record must exist.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OperatingCarrierCode {
      get { return operatingCarrierCode_; }
      set {
        operatingCarrierCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "operatingFlightNumber" field.</summary>
    public const int OperatingFlightNumberFieldNumber = 17;
    private string operatingFlightNumber_ = "";
    /// <summary>
    /// If the flight is operated by a carrier other than the carrierCode supplied, provide the flight number for the operating carrier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OperatingFlightNumber {
      get { return operatingFlightNumber_; }
      set {
        operatingFlightNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "codeShareFlightNumbers" field.</summary>
    public const int CodeShareFlightNumbersFieldNumber = 18;
    private static readonly pb::FieldCodec<string> _repeated_codeShareFlightNumbers_codec
        = pb::FieldCodec.ForString(146);
    private readonly pbc::RepeatedField<string> codeShareFlightNumbers_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// If the flight has code shares, then enter the carrier code and flight number. If there is an operating carrier, then do not include this in the list. Code share carriers will not be validated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CodeShareFlightNumbers {
      get { return codeShareFlightNumbers_; }
    }

    /// <summary>Field number for the "passTemplateId" field.</summary>
    public const int PassTemplateIdFieldNumber = 19;
    private string passTemplateId_ = "";
    /// <summary>
    /// The pass template id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PassTemplateId {
      get { return passTemplateId_; }
      set {
        passTemplateId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "baggageBelt" field.</summary>
    public const int BaggageBeltFieldNumber = 21;
    private string baggageBelt_ = "";
    /// <summary>
    /// The baggage belt at the destination.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BaggageBelt {
      get { return baggageBelt_; }
      set {
        baggageBelt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "autoInvalidateAfter" field.</summary>
    public const int AutoInvalidateAfterFieldNumber = 22;
    private uint autoInvalidateAfter_;
    /// <summary>
    /// Minutes after estimated or scheduled arrival to automatically invalidate the pass. Enter -1 if the pass should not auto invalidate. Default is 48 hours.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AutoInvalidateAfter {
      get { return autoInvalidateAfter_; }
      set {
        autoInvalidateAfter_ = value;
      }
    }

    /// <summary>Field number for the "autoInvalidateCancelledPasses" field.</summary>
    public const int AutoInvalidateCancelledPassesFieldNumber = 23;
    private bool autoInvalidateCancelledPasses_;
    /// <summary>
    /// Invalidate passes where either the booking or the flight have been cancelled. Default is true.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoInvalidateCancelledPasses {
      get { return autoInvalidateCancelledPasses_; }
      set {
        autoInvalidateCancelledPasses_ = value;
      }
    }

    /// <summary>Field number for the "locationMessages" field.</summary>
    public const int LocationMessagesFieldNumber = 24;
    private static readonly pb::FieldCodec<global::PKIo.GPSLocation> _repeated_locationMessages_codec
        = pb::FieldCodec.ForMessage(194, global::PKIo.GPSLocation.Parser);
    private readonly pbc::RepeatedField<global::PKIo.GPSLocation> locationMessages_ = new pbc::RepeatedField<global::PKIo.GPSLocation>();
    /// <summary>
    /// A list of up to 10 GPS locations where this boarding pass should be presented on the lock-screen. Values here will override the designated defaults.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PKIo.GPSLocation> LocationMessages {
      get { return locationMessages_; }
    }

    /// <summary>Field number for the "beaconMessages" field.</summary>
    public const int BeaconMessagesFieldNumber = 25;
    private static readonly pb::FieldCodec<global::PKIo.Beacon> _repeated_beaconMessages_codec
        = pb::FieldCodec.ForMessage(202, global::PKIo.Beacon.Parser);
    private readonly pbc::RepeatedField<global::PKIo.Beacon> beaconMessages_ = new pbc::RepeatedField<global::PKIo.Beacon>();
    /// <summary>
    /// A list of up to 10 Beacon UUIDs that should trigger the boarding pass to be presented on the lock-screen. Values here will override the designated defaults.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PKIo.Beacon> BeaconMessages {
      get { return beaconMessages_; }
    }

    /// <summary>Field number for the "links" field.</summary>
    public const int LinksFieldNumber = 26;
    private static readonly pb::FieldCodec<global::PKIo.Link> _repeated_links_codec
        = pb::FieldCodec.ForMessage(210, global::PKIo.Link.Parser);
    private readonly pbc::RepeatedField<global::PKIo.Link> links_ = new pbc::RepeatedField<global::PKIo.Link>();
    /// <summary>
    /// A list of links to be appended to the end of each boarding pass.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PKIo.Link> Links {
      get { return links_; }
    }

    /// <summary>Field number for the "suspendAutomaticUpdates" field.</summary>
    public const int SuspendAutomaticUpdatesFieldNumber = 27;
    private bool suspendAutomaticUpdates_;
    /// <summary>
    /// Suspend automatic updates to all boarding passes for this flight.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SuspendAutomaticUpdates {
      get { return suspendAutomaticUpdates_; }
      set {
        suspendAutomaticUpdates_ = value;
      }
    }

    /// <summary>Field number for the "boardingPolicy" field.</summary>
    public const int BoardingPolicyFieldNumber = 28;
    private global::PKFlights.BoardingPolicy boardingPolicy_ = global::PKFlights.BoardingPolicy.Unspecified;
    /// <summary>
    /// Used to determine the label printed above the boarding group on the Google Pay pass.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKFlights.BoardingPolicy BoardingPolicy {
      get { return boardingPolicy_; }
      set {
        boardingPolicy_ = value;
      }
    }

    /// <summary>Field number for the "seatingPolicy" field.</summary>
    public const int SeatingPolicyFieldNumber = 29;
    private global::PKFlights.SeatClassPolicy seatingPolicy_ = global::PKFlights.SeatClassPolicy.Unspecified;
    /// <summary>
    /// Used to determine the label printed above the seat class on the Google Pay pass. E.g. Economy, Economy Plus.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKFlights.SeatClassPolicy SeatingPolicy {
      get { return seatingPolicy_; }
      set {
        seatingPolicy_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 30;
    private global::PKFlights.FlightStatus status_ = global::PKFlights.FlightStatus.Unknown;
    /// <summary>
    /// The status of the flight. This can be manually set, or automatically set for customers subscribing to automatic updates.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKFlights.FlightStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "ConditionalItems" field.</summary>
    public const int ConditionalItemsFieldNumber = 31;
    private bool conditionalItems_;
    /// <summary>
    /// If PassKit are generating barcodes, include conditional items. Default false.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ConditionalItems {
      get { return conditionalItems_; }
      set {
        conditionalItems_ = value;
      }
    }

    /// <summary>Field number for the "BarcodeAdditionalData" field.</summary>
    public const int BarcodeAdditionalDataFieldNumber = 32;
    private string barcodeAdditionalData_ = "";
    /// <summary>
    /// If PassKit are generating barcodes, default airline use data (IATA item 4). This can be overwritten at the flight and boarding pass level.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BarcodeAdditionalData {
      get { return barcodeAdditionalData_; }
      set {
        barcodeAdditionalData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metrics" field.</summary>
    public const int MetricsFieldNumber = 33;
    private global::PKIo.Metrics metrics_;
    /// <summary>
    /// Issued, installed, uninstalled and invalidated counts. Metrics are not writable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKIo.Metrics Metrics {
      get { return metrics_; }
      set {
        metrics_ = value;
      }
    }

    /// <summary>Field number for the "createMethod" field.</summary>
    public const int CreateMethodFieldNumber = 34;
    private global::PKFlights.FlightCreateMode createMethod_ = global::PKFlights.FlightCreateMode.DoNotUse;
    /// <summary>
    /// How the flight was created Create mode, manually or automatically.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKFlights.FlightCreateMode CreateMethod {
      get { return createMethod_; }
      set {
        createMethod_ = value;
      }
    }

    /// <summary>Field number for the "designatorId" field.</summary>
    public const int DesignatorIdFieldNumber = 35;
    private string designatorId_ = "";
    /// <summary>
    /// For automatically created flights, shows the ID of the designator that bootstrapped the flight record.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DesignatorId {
      get { return designatorId_; }
      set {
        designatorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Flight);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Flight other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CarrierCode != other.CarrierCode) return false;
      if (FlightNumber != other.FlightNumber) return false;
      if (BoardingPoint != other.BoardingPoint) return false;
      if (DeplaningPoint != other.DeplaningPoint) return false;
      if (!object.Equals(DepartureDate, other.DepartureDate)) return false;
      if (DepartureTerminal != other.DepartureTerminal) return false;
      if (ArrivalTerminal != other.ArrivalTerminal) return false;
      if (DepartureGate != other.DepartureGate) return false;
      if (ArrivalGate != other.ArrivalGate) return false;
      if (!object.Equals(ScheduledDepartureTime, other.ScheduledDepartureTime)) return false;
      if (!object.Equals(EstimatedDepartureTime, other.EstimatedDepartureTime)) return false;
      if (!object.Equals(BoardingTime, other.BoardingTime)) return false;
      if (!object.Equals(GateClosingTime, other.GateClosingTime)) return false;
      if (!object.Equals(ScheduledArrivalTime, other.ScheduledArrivalTime)) return false;
      if (!object.Equals(EstimatedArrivalTime, other.EstimatedArrivalTime)) return false;
      if (OperatingCarrierCode != other.OperatingCarrierCode) return false;
      if (OperatingFlightNumber != other.OperatingFlightNumber) return false;
      if(!codeShareFlightNumbers_.Equals(other.codeShareFlightNumbers_)) return false;
      if (PassTemplateId != other.PassTemplateId) return false;
      if (BaggageBelt != other.BaggageBelt) return false;
      if (AutoInvalidateAfter != other.AutoInvalidateAfter) return false;
      if (AutoInvalidateCancelledPasses != other.AutoInvalidateCancelledPasses) return false;
      if(!locationMessages_.Equals(other.locationMessages_)) return false;
      if(!beaconMessages_.Equals(other.beaconMessages_)) return false;
      if(!links_.Equals(other.links_)) return false;
      if (SuspendAutomaticUpdates != other.SuspendAutomaticUpdates) return false;
      if (BoardingPolicy != other.BoardingPolicy) return false;
      if (SeatingPolicy != other.SeatingPolicy) return false;
      if (Status != other.Status) return false;
      if (ConditionalItems != other.ConditionalItems) return false;
      if (BarcodeAdditionalData != other.BarcodeAdditionalData) return false;
      if (!object.Equals(Metrics, other.Metrics)) return false;
      if (CreateMethod != other.CreateMethod) return false;
      if (DesignatorId != other.DesignatorId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CarrierCode.Length != 0) hash ^= CarrierCode.GetHashCode();
      if (FlightNumber.Length != 0) hash ^= FlightNumber.GetHashCode();
      if (BoardingPoint.Length != 0) hash ^= BoardingPoint.GetHashCode();
      if (DeplaningPoint.Length != 0) hash ^= DeplaningPoint.GetHashCode();
      if (departureDate_ != null) hash ^= DepartureDate.GetHashCode();
      if (DepartureTerminal.Length != 0) hash ^= DepartureTerminal.GetHashCode();
      if (ArrivalTerminal.Length != 0) hash ^= ArrivalTerminal.GetHashCode();
      if (DepartureGate.Length != 0) hash ^= DepartureGate.GetHashCode();
      if (ArrivalGate.Length != 0) hash ^= ArrivalGate.GetHashCode();
      if (scheduledDepartureTime_ != null) hash ^= ScheduledDepartureTime.GetHashCode();
      if (estimatedDepartureTime_ != null) hash ^= EstimatedDepartureTime.GetHashCode();
      if (boardingTime_ != null) hash ^= BoardingTime.GetHashCode();
      if (gateClosingTime_ != null) hash ^= GateClosingTime.GetHashCode();
      if (scheduledArrivalTime_ != null) hash ^= ScheduledArrivalTime.GetHashCode();
      if (estimatedArrivalTime_ != null) hash ^= EstimatedArrivalTime.GetHashCode();
      if (OperatingCarrierCode.Length != 0) hash ^= OperatingCarrierCode.GetHashCode();
      if (OperatingFlightNumber.Length != 0) hash ^= OperatingFlightNumber.GetHashCode();
      hash ^= codeShareFlightNumbers_.GetHashCode();
      if (PassTemplateId.Length != 0) hash ^= PassTemplateId.GetHashCode();
      if (BaggageBelt.Length != 0) hash ^= BaggageBelt.GetHashCode();
      if (AutoInvalidateAfter != 0) hash ^= AutoInvalidateAfter.GetHashCode();
      if (AutoInvalidateCancelledPasses != false) hash ^= AutoInvalidateCancelledPasses.GetHashCode();
      hash ^= locationMessages_.GetHashCode();
      hash ^= beaconMessages_.GetHashCode();
      hash ^= links_.GetHashCode();
      if (SuspendAutomaticUpdates != false) hash ^= SuspendAutomaticUpdates.GetHashCode();
      if (BoardingPolicy != global::PKFlights.BoardingPolicy.Unspecified) hash ^= BoardingPolicy.GetHashCode();
      if (SeatingPolicy != global::PKFlights.SeatClassPolicy.Unspecified) hash ^= SeatingPolicy.GetHashCode();
      if (Status != global::PKFlights.FlightStatus.Unknown) hash ^= Status.GetHashCode();
      if (ConditionalItems != false) hash ^= ConditionalItems.GetHashCode();
      if (BarcodeAdditionalData.Length != 0) hash ^= BarcodeAdditionalData.GetHashCode();
      if (metrics_ != null) hash ^= Metrics.GetHashCode();
      if (CreateMethod != global::PKFlights.FlightCreateMode.DoNotUse) hash ^= CreateMethod.GetHashCode();
      if (DesignatorId.Length != 0) hash ^= DesignatorId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CarrierCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CarrierCode);
      }
      if (FlightNumber.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FlightNumber);
      }
      if (BoardingPoint.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BoardingPoint);
      }
      if (DeplaningPoint.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DeplaningPoint);
      }
      if (departureDate_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(DepartureDate);
      }
      if (DepartureTerminal.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DepartureTerminal);
      }
      if (ArrivalTerminal.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ArrivalTerminal);
      }
      if (DepartureGate.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(DepartureGate);
      }
      if (ArrivalGate.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ArrivalGate);
      }
      if (scheduledDepartureTime_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(ScheduledDepartureTime);
      }
      if (estimatedDepartureTime_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(EstimatedDepartureTime);
      }
      if (boardingTime_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(BoardingTime);
      }
      if (gateClosingTime_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(GateClosingTime);
      }
      if (scheduledArrivalTime_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(ScheduledArrivalTime);
      }
      if (estimatedArrivalTime_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(EstimatedArrivalTime);
      }
      if (OperatingCarrierCode.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(OperatingCarrierCode);
      }
      if (OperatingFlightNumber.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(OperatingFlightNumber);
      }
      codeShareFlightNumbers_.WriteTo(output, _repeated_codeShareFlightNumbers_codec);
      if (PassTemplateId.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(PassTemplateId);
      }
      if (BaggageBelt.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(BaggageBelt);
      }
      if (AutoInvalidateAfter != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(AutoInvalidateAfter);
      }
      if (AutoInvalidateCancelledPasses != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(AutoInvalidateCancelledPasses);
      }
      locationMessages_.WriteTo(output, _repeated_locationMessages_codec);
      beaconMessages_.WriteTo(output, _repeated_beaconMessages_codec);
      links_.WriteTo(output, _repeated_links_codec);
      if (SuspendAutomaticUpdates != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(SuspendAutomaticUpdates);
      }
      if (BoardingPolicy != global::PKFlights.BoardingPolicy.Unspecified) {
        output.WriteRawTag(224, 1);
        output.WriteEnum((int) BoardingPolicy);
      }
      if (SeatingPolicy != global::PKFlights.SeatClassPolicy.Unspecified) {
        output.WriteRawTag(232, 1);
        output.WriteEnum((int) SeatingPolicy);
      }
      if (Status != global::PKFlights.FlightStatus.Unknown) {
        output.WriteRawTag(240, 1);
        output.WriteEnum((int) Status);
      }
      if (ConditionalItems != false) {
        output.WriteRawTag(248, 1);
        output.WriteBool(ConditionalItems);
      }
      if (BarcodeAdditionalData.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(BarcodeAdditionalData);
      }
      if (metrics_ != null) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(Metrics);
      }
      if (CreateMethod != global::PKFlights.FlightCreateMode.DoNotUse) {
        output.WriteRawTag(144, 2);
        output.WriteEnum((int) CreateMethod);
      }
      if (DesignatorId.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(DesignatorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CarrierCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CarrierCode);
      }
      if (FlightNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FlightNumber);
      }
      if (BoardingPoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BoardingPoint);
      }
      if (DeplaningPoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeplaningPoint);
      }
      if (departureDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DepartureDate);
      }
      if (DepartureTerminal.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DepartureTerminal);
      }
      if (ArrivalTerminal.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ArrivalTerminal);
      }
      if (DepartureGate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DepartureGate);
      }
      if (ArrivalGate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ArrivalGate);
      }
      if (scheduledDepartureTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScheduledDepartureTime);
      }
      if (estimatedDepartureTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EstimatedDepartureTime);
      }
      if (boardingTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BoardingTime);
      }
      if (gateClosingTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GateClosingTime);
      }
      if (scheduledArrivalTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScheduledArrivalTime);
      }
      if (estimatedArrivalTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EstimatedArrivalTime);
      }
      if (OperatingCarrierCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OperatingCarrierCode);
      }
      if (OperatingFlightNumber.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OperatingFlightNumber);
      }
      size += codeShareFlightNumbers_.CalculateSize(_repeated_codeShareFlightNumbers_codec);
      if (PassTemplateId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PassTemplateId);
      }
      if (BaggageBelt.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BaggageBelt);
      }
      if (AutoInvalidateAfter != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AutoInvalidateAfter);
      }
      if (AutoInvalidateCancelledPasses != false) {
        size += 2 + 1;
      }
      size += locationMessages_.CalculateSize(_repeated_locationMessages_codec);
      size += beaconMessages_.CalculateSize(_repeated_beaconMessages_codec);
      size += links_.CalculateSize(_repeated_links_codec);
      if (SuspendAutomaticUpdates != false) {
        size += 2 + 1;
      }
      if (BoardingPolicy != global::PKFlights.BoardingPolicy.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BoardingPolicy);
      }
      if (SeatingPolicy != global::PKFlights.SeatClassPolicy.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SeatingPolicy);
      }
      if (Status != global::PKFlights.FlightStatus.Unknown) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (ConditionalItems != false) {
        size += 2 + 1;
      }
      if (BarcodeAdditionalData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BarcodeAdditionalData);
      }
      if (metrics_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Metrics);
      }
      if (CreateMethod != global::PKFlights.FlightCreateMode.DoNotUse) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CreateMethod);
      }
      if (DesignatorId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DesignatorId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Flight other) {
      if (other == null) {
        return;
      }
      if (other.CarrierCode.Length != 0) {
        CarrierCode = other.CarrierCode;
      }
      if (other.FlightNumber.Length != 0) {
        FlightNumber = other.FlightNumber;
      }
      if (other.BoardingPoint.Length != 0) {
        BoardingPoint = other.BoardingPoint;
      }
      if (other.DeplaningPoint.Length != 0) {
        DeplaningPoint = other.DeplaningPoint;
      }
      if (other.departureDate_ != null) {
        if (departureDate_ == null) {
          DepartureDate = new global::PKIo.Date();
        }
        DepartureDate.MergeFrom(other.DepartureDate);
      }
      if (other.DepartureTerminal.Length != 0) {
        DepartureTerminal = other.DepartureTerminal;
      }
      if (other.ArrivalTerminal.Length != 0) {
        ArrivalTerminal = other.ArrivalTerminal;
      }
      if (other.DepartureGate.Length != 0) {
        DepartureGate = other.DepartureGate;
      }
      if (other.ArrivalGate.Length != 0) {
        ArrivalGate = other.ArrivalGate;
      }
      if (other.scheduledDepartureTime_ != null) {
        if (scheduledDepartureTime_ == null) {
          ScheduledDepartureTime = new global::PKIo.LocalDateTime();
        }
        ScheduledDepartureTime.MergeFrom(other.ScheduledDepartureTime);
      }
      if (other.estimatedDepartureTime_ != null) {
        if (estimatedDepartureTime_ == null) {
          EstimatedDepartureTime = new global::PKIo.LocalDateTime();
        }
        EstimatedDepartureTime.MergeFrom(other.EstimatedDepartureTime);
      }
      if (other.boardingTime_ != null) {
        if (boardingTime_ == null) {
          BoardingTime = new global::PKIo.LocalDateTime();
        }
        BoardingTime.MergeFrom(other.BoardingTime);
      }
      if (other.gateClosingTime_ != null) {
        if (gateClosingTime_ == null) {
          GateClosingTime = new global::PKIo.LocalDateTime();
        }
        GateClosingTime.MergeFrom(other.GateClosingTime);
      }
      if (other.scheduledArrivalTime_ != null) {
        if (scheduledArrivalTime_ == null) {
          ScheduledArrivalTime = new global::PKIo.LocalDateTime();
        }
        ScheduledArrivalTime.MergeFrom(other.ScheduledArrivalTime);
      }
      if (other.estimatedArrivalTime_ != null) {
        if (estimatedArrivalTime_ == null) {
          EstimatedArrivalTime = new global::PKIo.LocalDateTime();
        }
        EstimatedArrivalTime.MergeFrom(other.EstimatedArrivalTime);
      }
      if (other.OperatingCarrierCode.Length != 0) {
        OperatingCarrierCode = other.OperatingCarrierCode;
      }
      if (other.OperatingFlightNumber.Length != 0) {
        OperatingFlightNumber = other.OperatingFlightNumber;
      }
      codeShareFlightNumbers_.Add(other.codeShareFlightNumbers_);
      if (other.PassTemplateId.Length != 0) {
        PassTemplateId = other.PassTemplateId;
      }
      if (other.BaggageBelt.Length != 0) {
        BaggageBelt = other.BaggageBelt;
      }
      if (other.AutoInvalidateAfter != 0) {
        AutoInvalidateAfter = other.AutoInvalidateAfter;
      }
      if (other.AutoInvalidateCancelledPasses != false) {
        AutoInvalidateCancelledPasses = other.AutoInvalidateCancelledPasses;
      }
      locationMessages_.Add(other.locationMessages_);
      beaconMessages_.Add(other.beaconMessages_);
      links_.Add(other.links_);
      if (other.SuspendAutomaticUpdates != false) {
        SuspendAutomaticUpdates = other.SuspendAutomaticUpdates;
      }
      if (other.BoardingPolicy != global::PKFlights.BoardingPolicy.Unspecified) {
        BoardingPolicy = other.BoardingPolicy;
      }
      if (other.SeatingPolicy != global::PKFlights.SeatClassPolicy.Unspecified) {
        SeatingPolicy = other.SeatingPolicy;
      }
      if (other.Status != global::PKFlights.FlightStatus.Unknown) {
        Status = other.Status;
      }
      if (other.ConditionalItems != false) {
        ConditionalItems = other.ConditionalItems;
      }
      if (other.BarcodeAdditionalData.Length != 0) {
        BarcodeAdditionalData = other.BarcodeAdditionalData;
      }
      if (other.metrics_ != null) {
        if (metrics_ == null) {
          Metrics = new global::PKIo.Metrics();
        }
        Metrics.MergeFrom(other.Metrics);
      }
      if (other.CreateMethod != global::PKFlights.FlightCreateMode.DoNotUse) {
        CreateMethod = other.CreateMethod;
      }
      if (other.DesignatorId.Length != 0) {
        DesignatorId = other.DesignatorId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CarrierCode = input.ReadString();
            break;
          }
          case 18: {
            FlightNumber = input.ReadString();
            break;
          }
          case 26: {
            BoardingPoint = input.ReadString();
            break;
          }
          case 34: {
            DeplaningPoint = input.ReadString();
            break;
          }
          case 42: {
            if (departureDate_ == null) {
              DepartureDate = new global::PKIo.Date();
            }
            input.ReadMessage(DepartureDate);
            break;
          }
          case 50: {
            DepartureTerminal = input.ReadString();
            break;
          }
          case 58: {
            ArrivalTerminal = input.ReadString();
            break;
          }
          case 66: {
            DepartureGate = input.ReadString();
            break;
          }
          case 74: {
            ArrivalGate = input.ReadString();
            break;
          }
          case 82: {
            if (scheduledDepartureTime_ == null) {
              ScheduledDepartureTime = new global::PKIo.LocalDateTime();
            }
            input.ReadMessage(ScheduledDepartureTime);
            break;
          }
          case 90: {
            if (estimatedDepartureTime_ == null) {
              EstimatedDepartureTime = new global::PKIo.LocalDateTime();
            }
            input.ReadMessage(EstimatedDepartureTime);
            break;
          }
          case 98: {
            if (boardingTime_ == null) {
              BoardingTime = new global::PKIo.LocalDateTime();
            }
            input.ReadMessage(BoardingTime);
            break;
          }
          case 106: {
            if (gateClosingTime_ == null) {
              GateClosingTime = new global::PKIo.LocalDateTime();
            }
            input.ReadMessage(GateClosingTime);
            break;
          }
          case 114: {
            if (scheduledArrivalTime_ == null) {
              ScheduledArrivalTime = new global::PKIo.LocalDateTime();
            }
            input.ReadMessage(ScheduledArrivalTime);
            break;
          }
          case 122: {
            if (estimatedArrivalTime_ == null) {
              EstimatedArrivalTime = new global::PKIo.LocalDateTime();
            }
            input.ReadMessage(EstimatedArrivalTime);
            break;
          }
          case 130: {
            OperatingCarrierCode = input.ReadString();
            break;
          }
          case 138: {
            OperatingFlightNumber = input.ReadString();
            break;
          }
          case 146: {
            codeShareFlightNumbers_.AddEntriesFrom(input, _repeated_codeShareFlightNumbers_codec);
            break;
          }
          case 154: {
            PassTemplateId = input.ReadString();
            break;
          }
          case 170: {
            BaggageBelt = input.ReadString();
            break;
          }
          case 176: {
            AutoInvalidateAfter = input.ReadUInt32();
            break;
          }
          case 184: {
            AutoInvalidateCancelledPasses = input.ReadBool();
            break;
          }
          case 194: {
            locationMessages_.AddEntriesFrom(input, _repeated_locationMessages_codec);
            break;
          }
          case 202: {
            beaconMessages_.AddEntriesFrom(input, _repeated_beaconMessages_codec);
            break;
          }
          case 210: {
            links_.AddEntriesFrom(input, _repeated_links_codec);
            break;
          }
          case 216: {
            SuspendAutomaticUpdates = input.ReadBool();
            break;
          }
          case 224: {
            BoardingPolicy = (global::PKFlights.BoardingPolicy) input.ReadEnum();
            break;
          }
          case 232: {
            SeatingPolicy = (global::PKFlights.SeatClassPolicy) input.ReadEnum();
            break;
          }
          case 240: {
            Status = (global::PKFlights.FlightStatus) input.ReadEnum();
            break;
          }
          case 248: {
            ConditionalItems = input.ReadBool();
            break;
          }
          case 258: {
            BarcodeAdditionalData = input.ReadString();
            break;
          }
          case 266: {
            if (metrics_ == null) {
              Metrics = new global::PKIo.Metrics();
            }
            input.ReadMessage(Metrics);
            break;
          }
          case 272: {
            CreateMethod = (global::PKFlights.FlightCreateMode) input.ReadEnum();
            break;
          }
          case 282: {
            DesignatorId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A Flight Request message is used to retrieve or identify an individual flight operation. For direct flights with multiple stops, a segment number or departure point is required.
  /// </summary>
  public sealed partial class FlightRequest : pb::IMessage<FlightRequest> {
    private static readonly pb::MessageParser<FlightRequest> _parser = new pb::MessageParser<FlightRequest>(() => new FlightRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FlightRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PKFlights.FlightReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlightRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlightRequest(FlightRequest other) : this() {
      carrierCode_ = other.carrierCode_;
      flightNumber_ = other.flightNumber_;
      departureDate_ = other.departureDate_ != null ? other.departureDate_.Clone() : null;
      boardingPoint_ = other.boardingPoint_;
      deplaningPoint_ = other.deplaningPoint_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlightRequest Clone() {
      return new FlightRequest(this);
    }

    /// <summary>Field number for the "carrierCode" field.</summary>
    public const int CarrierCodeFieldNumber = 1;
    private string carrierCode_ = "";
    /// <summary>
    /// The 2 character IATA code or 3 character ICAO code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CarrierCode {
      get { return carrierCode_; }
      set {
        carrierCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "flightNumber" field.</summary>
    public const int FlightNumberFieldNumber = 2;
    private string flightNumber_ = "";
    /// <summary>
    /// The flight number.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FlightNumber {
      get { return flightNumber_; }
      set {
        flightNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "departureDate" field.</summary>
    public const int DepartureDateFieldNumber = 3;
    private global::PKIo.Date departureDate_;
    /// <summary>
    /// The scheduled date of the flight, stated in the timezone of the boarding point.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKIo.Date DepartureDate {
      get { return departureDate_; }
      set {
        departureDate_ = value;
      }
    }

    /// <summary>Field number for the "boardingPoint" field.</summary>
    public const int BoardingPointFieldNumber = 5;
    private string boardingPoint_ = "";
    /// <summary>
    /// The IATA airport code for the boarding point of the flight. Only required for direct flights with stops where the boarding point is after the first port and segment is not provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BoardingPoint {
      get { return boardingPoint_; }
      set {
        boardingPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deplaningPoint" field.</summary>
    public const int DeplaningPointFieldNumber = 6;
    private string deplaningPoint_ = "";
    /// <summary>
    /// The IATA airport code for the destination of the flight. Only required for direct flights with stops where the flight ends before the final port.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeplaningPoint {
      get { return deplaningPoint_; }
      set {
        deplaningPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FlightRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FlightRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CarrierCode != other.CarrierCode) return false;
      if (FlightNumber != other.FlightNumber) return false;
      if (!object.Equals(DepartureDate, other.DepartureDate)) return false;
      if (BoardingPoint != other.BoardingPoint) return false;
      if (DeplaningPoint != other.DeplaningPoint) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CarrierCode.Length != 0) hash ^= CarrierCode.GetHashCode();
      if (FlightNumber.Length != 0) hash ^= FlightNumber.GetHashCode();
      if (departureDate_ != null) hash ^= DepartureDate.GetHashCode();
      if (BoardingPoint.Length != 0) hash ^= BoardingPoint.GetHashCode();
      if (DeplaningPoint.Length != 0) hash ^= DeplaningPoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CarrierCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CarrierCode);
      }
      if (FlightNumber.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FlightNumber);
      }
      if (departureDate_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DepartureDate);
      }
      if (BoardingPoint.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(BoardingPoint);
      }
      if (DeplaningPoint.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DeplaningPoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CarrierCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CarrierCode);
      }
      if (FlightNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FlightNumber);
      }
      if (departureDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DepartureDate);
      }
      if (BoardingPoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BoardingPoint);
      }
      if (DeplaningPoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeplaningPoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FlightRequest other) {
      if (other == null) {
        return;
      }
      if (other.CarrierCode.Length != 0) {
        CarrierCode = other.CarrierCode;
      }
      if (other.FlightNumber.Length != 0) {
        FlightNumber = other.FlightNumber;
      }
      if (other.departureDate_ != null) {
        if (departureDate_ == null) {
          DepartureDate = new global::PKIo.Date();
        }
        DepartureDate.MergeFrom(other.DepartureDate);
      }
      if (other.BoardingPoint.Length != 0) {
        BoardingPoint = other.BoardingPoint;
      }
      if (other.DeplaningPoint.Length != 0) {
        DeplaningPoint = other.DeplaningPoint;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CarrierCode = input.ReadString();
            break;
          }
          case 18: {
            FlightNumber = input.ReadString();
            break;
          }
          case 26: {
            if (departureDate_ == null) {
              DepartureDate = new global::PKIo.Date();
            }
            input.ReadMessage(DepartureDate);
            break;
          }
          case 42: {
            BoardingPoint = input.ReadString();
            break;
          }
          case 50: {
            DeplaningPoint = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
