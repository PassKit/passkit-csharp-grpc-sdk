// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: io/flights/carrier.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PKFlights {

  /// <summary>Holder for reflection information generated from io/flights/carrier.proto</summary>
  public static partial class CarrierReflection {

    #region Descriptor
    /// <summary>File descriptor for io/flights/carrier.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CarrierReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chhpby9mbGlnaHRzL2NhcnJpZXIucHJvdG8SB2ZsaWdodHMaHGlvL2NvbW1v",
            "bi9sb2NhbGl6YXRpb24ucHJvdG8aLHByb3RvYy1nZW4tc3dhZ2dlci9vcHRp",
            "b25zL2Fubm90YXRpb25zLnByb3RvIq8ECgdDYXJyaWVyEiwKD2lhdGFDYXJy",
            "aWVyQ29kZRgBIAEoCUITkkEQigENXltBLVowLTldezJ9JBIsCg9pY2FvQ2Fy",
            "cmllckNvZGUYAiABKAlCE5JBEIoBDV5bQS1aMC05XXszfSQSKAoSaWF0YUFj",
            "Y291bnRpbmdDb2RlGAMgASgFQgySQQlZAAAAAAA4j0ASEwoLYWlybGluZU5h",
            "bWUYBCABKAkSMQoUbG9jYWxpemVkQWlybGluZU5hbWUYBSABKAsyEy5pby5M",
            "b2NhbGl6ZWRTdHJpbmcSGgoScGFzc1R5cGVJZGVudGlmaWVyGAYgASgJEhQK",
            "DHByaXZhdGVLZXlJZBgHIAEoCTqjApJBnwIKnAIqB0NhcnJpZXIy2wFBIGNh",
            "cnJpZXIgcmVjb3JkIGNvbnRhaW5zIGRldGFpbHMgb2YgdGhlIGNhcnJpZXIu",
            "ICBUaGUgY2FycmllciB3aWxsIGJlIHRoZSBpc3N1ZXIgb2YgdGhlIGJvYXJk",
            "aW5nIHBhc3MgYW5kIG1heSBiZSB1c2VkIGFzIGEgbWFya2V0aW5nIG9yIG9w",
            "ZXJhdGluZyBjYXJyaWVyLiAgQWxsIG1hcmtldGluZyBhbmQgb3BlcmF0aW5n",
            "IGNhcnJpZXJzIHJlcXVpcmUgYSBDYXJyaWVyIHJlY29yZC7SAQ9pYXRhQ2Fy",
            "cmllckNvZGXSAQthaXJsaW5lTmFtZdIBEnBhc3NUeXBlSWRlbnRpZmllciIi",
            "CgtDYXJyaWVyQ29kZRITCgtjYXJyaWVyQ29kZRgBIAEoCUJTChdpby5wYXNz",
            "a2l0LlBLaW8uRmxpZ2h0c1osc3Rhc2gucGFzc2tpdC5jb20vaW8vbW9kZWwv",
            "c2RrL2dvL2lvL2ZsaWdodHOqAglQS0ZsaWdodHNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::PKIo.LocalizationReflection.Descriptor, global::Grpc.Gateway.ProtocGenSwagger.Options.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PKFlights.Carrier), global::PKFlights.Carrier.Parser, new[]{ "IataCarrierCode", "IcaoCarrierCode", "IataAccountingCode", "AirlineName", "LocalizedAirlineName", "PassTypeIdentifier", "PrivateKeyId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PKFlights.CarrierCode), global::PKFlights.CarrierCode.Parser, new[]{ "CarrierCode_" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A carrier record contains details of the carrier.  The carrier will be the issuer of the boarding pass and may be used as a marketing or operating carrier.
  /// </summary>
  public sealed partial class Carrier : pb::IMessage<Carrier> {
    private static readonly pb::MessageParser<Carrier> _parser = new pb::MessageParser<Carrier>(() => new Carrier());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Carrier> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PKFlights.CarrierReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Carrier() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Carrier(Carrier other) : this() {
      iataCarrierCode_ = other.iataCarrierCode_;
      icaoCarrierCode_ = other.icaoCarrierCode_;
      iataAccountingCode_ = other.iataAccountingCode_;
      airlineName_ = other.airlineName_;
      localizedAirlineName_ = other.localizedAirlineName_ != null ? other.localizedAirlineName_.Clone() : null;
      passTypeIdentifier_ = other.passTypeIdentifier_;
      privateKeyId_ = other.privateKeyId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Carrier Clone() {
      return new Carrier(this);
    }

    /// <summary>Field number for the "iataCarrierCode" field.</summary>
    public const int IataCarrierCodeFieldNumber = 1;
    private string iataCarrierCode_ = "";
    /// <summary>
    /// The IATA carrier code. If the carrier has not been issued an IATA carrier code or an ICAO carrier code, use YY.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IataCarrierCode {
      get { return iataCarrierCode_; }
      set {
        iataCarrierCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "icaoCarrierCode" field.</summary>
    public const int IcaoCarrierCodeFieldNumber = 2;
    private string icaoCarrierCode_ = "";
    /// <summary>
    /// The ICAO carrier code. Required if an iataCarrierCode is not provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IcaoCarrierCode {
      get { return icaoCarrierCode_; }
      set {
        icaoCarrierCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "iataAccountingCode" field.</summary>
    public const int IataAccountingCodeFieldNumber = 3;
    private int iataAccountingCode_;
    /// <summary>
    /// The IATA accounting code / AWB prefix.  If no code has been allocated, enter zero.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IataAccountingCode {
      get { return iataAccountingCode_; }
      set {
        iataAccountingCode_ = value;
      }
    }

    /// <summary>Field number for the "airlineName" field.</summary>
    public const int AirlineNameFieldNumber = 4;
    private string airlineName_ = "";
    /// <summary>
    /// The name of the airline. This will be printed below the logo on the Google Pay pass.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AirlineName {
      get { return airlineName_; }
      set {
        airlineName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "localizedAirlineName" field.</summary>
    public const int LocalizedAirlineNameFieldNumber = 5;
    private global::PKIo.LocalizedString localizedAirlineName_;
    /// <summary>
    /// The localized airline name, if applicable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKIo.LocalizedString LocalizedAirlineName {
      get { return localizedAirlineName_; }
      set {
        localizedAirlineName_ = value;
      }
    }

    /// <summary>Field number for the "passTypeIdentifier" field.</summary>
    public const int PassTypeIdentifierFieldNumber = 6;
    private string passTypeIdentifier_ = "";
    /// <summary>
    /// If the carrier will issue Apple Wallet passes, supply the certificate id (E.g. pass.com.passkitair). The certificate must have previously been uploaded.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PassTypeIdentifier {
      get { return passTypeIdentifier_; }
      set {
        passTypeIdentifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "privateKeyId" field.</summary>
    public const int PrivateKeyIdFieldNumber = 7;
    private string privateKeyId_ = "";
    /// <summary>
    /// If PassKit are generating the boarding pass barcode, and the barcode needs signing, the ID of the private key used to sign the barcode payload.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrivateKeyId {
      get { return privateKeyId_; }
      set {
        privateKeyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Carrier);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Carrier other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IataCarrierCode != other.IataCarrierCode) return false;
      if (IcaoCarrierCode != other.IcaoCarrierCode) return false;
      if (IataAccountingCode != other.IataAccountingCode) return false;
      if (AirlineName != other.AirlineName) return false;
      if (!object.Equals(LocalizedAirlineName, other.LocalizedAirlineName)) return false;
      if (PassTypeIdentifier != other.PassTypeIdentifier) return false;
      if (PrivateKeyId != other.PrivateKeyId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IataCarrierCode.Length != 0) hash ^= IataCarrierCode.GetHashCode();
      if (IcaoCarrierCode.Length != 0) hash ^= IcaoCarrierCode.GetHashCode();
      if (IataAccountingCode != 0) hash ^= IataAccountingCode.GetHashCode();
      if (AirlineName.Length != 0) hash ^= AirlineName.GetHashCode();
      if (localizedAirlineName_ != null) hash ^= LocalizedAirlineName.GetHashCode();
      if (PassTypeIdentifier.Length != 0) hash ^= PassTypeIdentifier.GetHashCode();
      if (PrivateKeyId.Length != 0) hash ^= PrivateKeyId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IataCarrierCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(IataCarrierCode);
      }
      if (IcaoCarrierCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(IcaoCarrierCode);
      }
      if (IataAccountingCode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(IataAccountingCode);
      }
      if (AirlineName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AirlineName);
      }
      if (localizedAirlineName_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(LocalizedAirlineName);
      }
      if (PassTypeIdentifier.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PassTypeIdentifier);
      }
      if (PrivateKeyId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PrivateKeyId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IataCarrierCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IataCarrierCode);
      }
      if (IcaoCarrierCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IcaoCarrierCode);
      }
      if (IataAccountingCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IataAccountingCode);
      }
      if (AirlineName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AirlineName);
      }
      if (localizedAirlineName_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalizedAirlineName);
      }
      if (PassTypeIdentifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PassTypeIdentifier);
      }
      if (PrivateKeyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrivateKeyId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Carrier other) {
      if (other == null) {
        return;
      }
      if (other.IataCarrierCode.Length != 0) {
        IataCarrierCode = other.IataCarrierCode;
      }
      if (other.IcaoCarrierCode.Length != 0) {
        IcaoCarrierCode = other.IcaoCarrierCode;
      }
      if (other.IataAccountingCode != 0) {
        IataAccountingCode = other.IataAccountingCode;
      }
      if (other.AirlineName.Length != 0) {
        AirlineName = other.AirlineName;
      }
      if (other.localizedAirlineName_ != null) {
        if (localizedAirlineName_ == null) {
          LocalizedAirlineName = new global::PKIo.LocalizedString();
        }
        LocalizedAirlineName.MergeFrom(other.LocalizedAirlineName);
      }
      if (other.PassTypeIdentifier.Length != 0) {
        PassTypeIdentifier = other.PassTypeIdentifier;
      }
      if (other.PrivateKeyId.Length != 0) {
        PrivateKeyId = other.PrivateKeyId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            IataCarrierCode = input.ReadString();
            break;
          }
          case 18: {
            IcaoCarrierCode = input.ReadString();
            break;
          }
          case 24: {
            IataAccountingCode = input.ReadInt32();
            break;
          }
          case 34: {
            AirlineName = input.ReadString();
            break;
          }
          case 42: {
            if (localizedAirlineName_ == null) {
              LocalizedAirlineName = new global::PKIo.LocalizedString();
            }
            input.ReadMessage(LocalizedAirlineName);
            break;
          }
          case 50: {
            PassTypeIdentifier = input.ReadString();
            break;
          }
          case 58: {
            PrivateKeyId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CarrierCode is used for retrieving or deleting a port record.
  /// </summary>
  public sealed partial class CarrierCode : pb::IMessage<CarrierCode> {
    private static readonly pb::MessageParser<CarrierCode> _parser = new pb::MessageParser<CarrierCode>(() => new CarrierCode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CarrierCode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PKFlights.CarrierReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CarrierCode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CarrierCode(CarrierCode other) : this() {
      carrierCode_ = other.carrierCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CarrierCode Clone() {
      return new CarrierCode(this);
    }

    /// <summary>Field number for the "carrierCode" field.</summary>
    public const int CarrierCode_FieldNumber = 1;
    private string carrierCode_ = "";
    /// <summary>
    /// The IATA or ICAO carrier code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CarrierCode_ {
      get { return carrierCode_; }
      set {
        carrierCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CarrierCode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CarrierCode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CarrierCode_ != other.CarrierCode_) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CarrierCode_.Length != 0) hash ^= CarrierCode_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CarrierCode_.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CarrierCode_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CarrierCode_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CarrierCode_);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CarrierCode other) {
      if (other == null) {
        return;
      }
      if (other.CarrierCode_.Length != 0) {
        CarrierCode_ = other.CarrierCode_;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CarrierCode_ = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
