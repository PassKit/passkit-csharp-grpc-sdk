// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: io/member/a_rpc.proto
// </auto-generated>
// Original file comments:
// *
// Members RPC
//
// The PassKit Members API lets you manage your membership programs and passes for Apple Wallet and Google Pay.
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace PKMembers {
  public static partial class Members
  {
    static readonly string __ServiceName = "members.Members";

    static readonly grpc::Marshaller<global::PKMembers.Program> __Marshaller_members_Program = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PKMembers.Program.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::PKIo.Id> __Marshaller_io_Id = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PKIo.Id.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::PKMembers.ProgramCopyRequest> __Marshaller_members_ProgramCopyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PKMembers.ProgramCopyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::PKIo.Pagination> __Marshaller_io_Pagination = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PKIo.Pagination.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::PKIo.Filters> __Marshaller_io_Filters = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PKIo.Filters.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::PKMembers.Tier> __Marshaller_members_Tier = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PKMembers.Tier.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::PKMembers.TierRequestInput> __Marshaller_members_TierRequestInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PKMembers.TierRequestInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::PKMembers.ListRequestDeprecated> __Marshaller_members_ListRequestDeprecated = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PKMembers.ListRequestDeprecated.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::PKMembers.ListRequest> __Marshaller_members_ListRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PKMembers.ListRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::PKMembers.Member> __Marshaller_members_Member = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PKMembers.Member.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::PKMembers.MemberRecordByExternalIdRequest> __Marshaller_members_MemberRecordByExternalIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PKMembers.MemberRecordByExternalIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::PKMembers.MemberCheckInOutRequest> __Marshaller_members_MemberCheckInOutRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PKMembers.MemberCheckInOutRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::PKMembers.EarnBurnPointsRequest> __Marshaller_members_EarnBurnPointsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PKMembers.EarnBurnPointsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::PKMembers.MemberPoints> __Marshaller_members_MemberPoints = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PKMembers.MemberPoints.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::PKMembers.SetPointsRequest> __Marshaller_members_SetPointsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PKMembers.SetPointsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::PKMembers.MemberSegmentRequest> __Marshaller_members_MemberSegmentRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PKMembers.MemberSegmentRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::PKIo.Count> __Marshaller_io_Count = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PKIo.Count.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::PKIo.Message> __Marshaller_io_Message = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PKIo.Message.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::PKIo.Strings> __Marshaller_io_Strings = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PKIo.Strings.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::PKMembers.UpdateExpiryRequest> __Marshaller_members_UpdateExpiryRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PKMembers.UpdateExpiryRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::PKMembers.Program, global::PKIo.Id> __Method_createProgram = new grpc::Method<global::PKMembers.Program, global::PKIo.Id>(
        grpc::MethodType.Unary,
        __ServiceName,
        "createProgram",
        __Marshaller_members_Program,
        __Marshaller_io_Id);

    static readonly grpc::Method<global::PKMembers.Program, global::PKMembers.Program> __Method_updateProgram = new grpc::Method<global::PKMembers.Program, global::PKMembers.Program>(
        grpc::MethodType.Unary,
        __ServiceName,
        "updateProgram",
        __Marshaller_members_Program,
        __Marshaller_members_Program);

    static readonly grpc::Method<global::PKIo.Id, global::PKMembers.Program> __Method_getProgram = new grpc::Method<global::PKIo.Id, global::PKMembers.Program>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getProgram",
        __Marshaller_io_Id,
        __Marshaller_members_Program);

    static readonly grpc::Method<global::PKMembers.ProgramCopyRequest, global::PKIo.Id> __Method_copyProgram = new grpc::Method<global::PKMembers.ProgramCopyRequest, global::PKIo.Id>(
        grpc::MethodType.Unary,
        __ServiceName,
        "copyProgram",
        __Marshaller_members_ProgramCopyRequest,
        __Marshaller_io_Id);

    static readonly grpc::Method<global::PKIo.Id, global::Google.Protobuf.WellKnownTypes.Empty> __Method_deleteProgram = new grpc::Method<global::PKIo.Id, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "deleteProgram",
        __Marshaller_io_Id,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::PKIo.Pagination, global::PKMembers.Program> __Method_listProgramsDeprecated = new grpc::Method<global::PKIo.Pagination, global::PKMembers.Program>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "listProgramsDeprecated",
        __Marshaller_io_Pagination,
        __Marshaller_members_Program);

    static readonly grpc::Method<global::PKIo.Filters, global::PKMembers.Program> __Method_listPrograms = new grpc::Method<global::PKIo.Filters, global::PKMembers.Program>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "listPrograms",
        __Marshaller_io_Filters,
        __Marshaller_members_Program);

    static readonly grpc::Method<global::PKMembers.Tier, global::PKIo.Id> __Method_createTier = new grpc::Method<global::PKMembers.Tier, global::PKIo.Id>(
        grpc::MethodType.Unary,
        __ServiceName,
        "createTier",
        __Marshaller_members_Tier,
        __Marshaller_io_Id);

    static readonly grpc::Method<global::PKMembers.Tier, global::PKMembers.Tier> __Method_updateTier = new grpc::Method<global::PKMembers.Tier, global::PKMembers.Tier>(
        grpc::MethodType.Unary,
        __ServiceName,
        "updateTier",
        __Marshaller_members_Tier,
        __Marshaller_members_Tier);

    static readonly grpc::Method<global::PKMembers.TierRequestInput, global::PKMembers.Tier> __Method_getTier = new grpc::Method<global::PKMembers.TierRequestInput, global::PKMembers.Tier>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getTier",
        __Marshaller_members_TierRequestInput,
        __Marshaller_members_Tier);

    static readonly grpc::Method<global::PKMembers.TierRequestInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_deleteTier = new grpc::Method<global::PKMembers.TierRequestInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "deleteTier",
        __Marshaller_members_TierRequestInput,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::PKMembers.ListRequestDeprecated, global::PKMembers.Tier> __Method_listTiersDeprecated = new grpc::Method<global::PKMembers.ListRequestDeprecated, global::PKMembers.Tier>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "listTiersDeprecated",
        __Marshaller_members_ListRequestDeprecated,
        __Marshaller_members_Tier);

    static readonly grpc::Method<global::PKMembers.ListRequest, global::PKMembers.Tier> __Method_listTiers = new grpc::Method<global::PKMembers.ListRequest, global::PKMembers.Tier>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "listTiers",
        __Marshaller_members_ListRequest,
        __Marshaller_members_Tier);

    static readonly grpc::Method<global::PKMembers.Member, global::PKIo.Id> __Method_enrolMember = new grpc::Method<global::PKMembers.Member, global::PKIo.Id>(
        grpc::MethodType.Unary,
        __ServiceName,
        "enrolMember",
        __Marshaller_members_Member,
        __Marshaller_io_Id);

    static readonly grpc::Method<global::PKMembers.Member, global::PKIo.Id> __Method_enrolMemberPublic = new grpc::Method<global::PKMembers.Member, global::PKIo.Id>(
        grpc::MethodType.Unary,
        __ServiceName,
        "enrolMemberPublic",
        __Marshaller_members_Member,
        __Marshaller_io_Id);

    static readonly grpc::Method<global::PKIo.Id, global::PKMembers.Member> __Method_getMemberRecordById = new grpc::Method<global::PKIo.Id, global::PKMembers.Member>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getMemberRecordById",
        __Marshaller_io_Id,
        __Marshaller_members_Member);

    static readonly grpc::Method<global::PKMembers.MemberRecordByExternalIdRequest, global::PKMembers.Member> __Method_getMemberRecordByExternalId = new grpc::Method<global::PKMembers.MemberRecordByExternalIdRequest, global::PKMembers.Member>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getMemberRecordByExternalId",
        __Marshaller_members_MemberRecordByExternalIdRequest,
        __Marshaller_members_Member);

    static readonly grpc::Method<global::PKMembers.MemberCheckInOutRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_checkInMember = new grpc::Method<global::PKMembers.MemberCheckInOutRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "checkInMember",
        __Marshaller_members_MemberCheckInOutRequest,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::PKMembers.MemberCheckInOutRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_checkOutMember = new grpc::Method<global::PKMembers.MemberCheckInOutRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "checkOutMember",
        __Marshaller_members_MemberCheckInOutRequest,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::PKMembers.ListRequestDeprecated, global::PKMembers.Member> __Method_listMembersDeprecated = new grpc::Method<global::PKMembers.ListRequestDeprecated, global::PKMembers.Member>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "listMembersDeprecated",
        __Marshaller_members_ListRequestDeprecated,
        __Marshaller_members_Member);

    static readonly grpc::Method<global::PKMembers.ListRequest, global::PKMembers.Member> __Method_listMembers = new grpc::Method<global::PKMembers.ListRequest, global::PKMembers.Member>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "listMembers",
        __Marshaller_members_ListRequest,
        __Marshaller_members_Member);

    static readonly grpc::Method<global::PKMembers.Member, global::PKIo.Id> __Method_updateMember = new grpc::Method<global::PKMembers.Member, global::PKIo.Id>(
        grpc::MethodType.Unary,
        __ServiceName,
        "updateMember",
        __Marshaller_members_Member,
        __Marshaller_io_Id);

    static readonly grpc::Method<global::PKMembers.EarnBurnPointsRequest, global::PKMembers.MemberPoints> __Method_earnPoints = new grpc::Method<global::PKMembers.EarnBurnPointsRequest, global::PKMembers.MemberPoints>(
        grpc::MethodType.Unary,
        __ServiceName,
        "earnPoints",
        __Marshaller_members_EarnBurnPointsRequest,
        __Marshaller_members_MemberPoints);

    static readonly grpc::Method<global::PKMembers.EarnBurnPointsRequest, global::PKMembers.MemberPoints> __Method_burnPoints = new grpc::Method<global::PKMembers.EarnBurnPointsRequest, global::PKMembers.MemberPoints>(
        grpc::MethodType.Unary,
        __ServiceName,
        "burnPoints",
        __Marshaller_members_EarnBurnPointsRequest,
        __Marshaller_members_MemberPoints);

    static readonly grpc::Method<global::PKMembers.SetPointsRequest, global::PKMembers.MemberPoints> __Method_setPoints = new grpc::Method<global::PKMembers.SetPointsRequest, global::PKMembers.MemberPoints>(
        grpc::MethodType.Unary,
        __ServiceName,
        "setPoints",
        __Marshaller_members_SetPointsRequest,
        __Marshaller_members_MemberPoints);

    static readonly grpc::Method<global::PKMembers.MemberSegmentRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_updateMembersBySegment = new grpc::Method<global::PKMembers.MemberSegmentRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "updateMembersBySegment",
        __Marshaller_members_MemberSegmentRequest,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::PKMembers.MemberSegmentRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_deleteMembersBySegment = new grpc::Method<global::PKMembers.MemberSegmentRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "deleteMembersBySegment",
        __Marshaller_members_MemberSegmentRequest,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::PKMembers.Member, global::Google.Protobuf.WellKnownTypes.Empty> __Method_deleteMember = new grpc::Method<global::PKMembers.Member, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "deleteMember",
        __Marshaller_members_Member,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::PKMembers.ListRequestDeprecated, global::PKIo.Count> __Method_countMembersDeprecated = new grpc::Method<global::PKMembers.ListRequestDeprecated, global::PKIo.Count>(
        grpc::MethodType.Unary,
        __ServiceName,
        "countMembersDeprecated",
        __Marshaller_members_ListRequestDeprecated,
        __Marshaller_io_Count);

    static readonly grpc::Method<global::PKMembers.ListRequest, global::PKIo.Count> __Method_countMembers = new grpc::Method<global::PKMembers.ListRequest, global::PKIo.Count>(
        grpc::MethodType.Unary,
        __ServiceName,
        "countMembers",
        __Marshaller_members_ListRequest,
        __Marshaller_io_Count);

    static readonly grpc::Method<global::PKIo.Pagination, global::PKIo.Message> __Method_getMessageHistoryForMember = new grpc::Method<global::PKIo.Pagination, global::PKIo.Message>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "getMessageHistoryForMember",
        __Marshaller_io_Pagination,
        __Marshaller_io_Message);

    static readonly grpc::Method<global::PKIo.Id, global::PKIo.Strings> __Method_getMetaKeysForProgram = new grpc::Method<global::PKIo.Id, global::PKIo.Strings>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getMetaKeysForProgram",
        __Marshaller_io_Id,
        __Marshaller_io_Strings);

    static readonly grpc::Method<global::PKMembers.UpdateExpiryRequest, global::PKIo.Count> __Method_renewMembersExpiry = new grpc::Method<global::PKMembers.UpdateExpiryRequest, global::PKIo.Count>(
        grpc::MethodType.Unary,
        __ServiceName,
        "renewMembersExpiry",
        __Marshaller_members_UpdateExpiryRequest,
        __Marshaller_io_Count);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::PKMembers.ARpcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for Members</summary>
    public partial class MembersClient : grpc::ClientBase<MembersClient>
    {
      /// <summary>Creates a new client for Members</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MembersClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Members that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MembersClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MembersClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MembersClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Create a program record. Allows a user to specify program details around enrolment, renewal and cancellation processes. Optionally allows the user to set the GPS location / Beacons that will trigger a lock-screen alert.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PKIo.Id createProgram(global::PKMembers.Program request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createProgram(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a program record. Allows a user to specify program details around enrolment, renewal and cancellation processes. Optionally allows the user to set the GPS location / Beacons that will trigger a lock-screen alert.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PKIo.Id createProgram(global::PKMembers.Program request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_createProgram, null, options, request);
      }
      /// <summary>
      /// Create a program record. Allows a user to specify program details around enrolment, renewal and cancellation processes. Optionally allows the user to set the GPS location / Beacons that will trigger a lock-screen alert.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PKIo.Id> createProgramAsync(global::PKMembers.Program request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createProgramAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a program record. Allows a user to specify program details around enrolment, renewal and cancellation processes. Optionally allows the user to set the GPS location / Beacons that will trigger a lock-screen alert.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PKIo.Id> createProgramAsync(global::PKMembers.Program request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_createProgram, null, options, request);
      }
      /// <summary>
      /// Updates an existing program record.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PKMembers.Program updateProgram(global::PKMembers.Program request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updateProgram(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing program record.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PKMembers.Program updateProgram(global::PKMembers.Program request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_updateProgram, null, options, request);
      }
      /// <summary>
      /// Updates an existing program record.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PKMembers.Program> updateProgramAsync(global::PKMembers.Program request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updateProgramAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing program record.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PKMembers.Program> updateProgramAsync(global::PKMembers.Program request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_updateProgram, null, options, request);
      }
      /// <summary>
      /// Gets an existing program record by id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PKMembers.Program getProgram(global::PKIo.Id request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getProgram(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets an existing program record by id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PKMembers.Program getProgram(global::PKIo.Id request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getProgram, null, options, request);
      }
      /// <summary>
      /// Gets an existing program record by id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PKMembers.Program> getProgramAsync(global::PKIo.Id request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getProgramAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets an existing program record by id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PKMembers.Program> getProgramAsync(global::PKIo.Id request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getProgram, null, options, request);
      }
      /// <summary>
      /// Copies an existing program record to a new record, and allows for status of new program to be set; i.e. copy a draft to published (production) program. Will copy program AND related tier + template records.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PKIo.Id copyProgram(global::PKMembers.ProgramCopyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return copyProgram(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Copies an existing program record to a new record, and allows for status of new program to be set; i.e. copy a draft to published (production) program. Will copy program AND related tier + template records.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PKIo.Id copyProgram(global::PKMembers.ProgramCopyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_copyProgram, null, options, request);
      }
      /// <summary>
      /// Copies an existing program record to a new record, and allows for status of new program to be set; i.e. copy a draft to published (production) program. Will copy program AND related tier + template records.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PKIo.Id> copyProgramAsync(global::PKMembers.ProgramCopyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return copyProgramAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Copies an existing program record to a new record, and allows for status of new program to be set; i.e. copy a draft to published (production) program. Will copy program AND related tier + template records.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PKIo.Id> copyProgramAsync(global::PKMembers.ProgramCopyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_copyProgram, null, options, request);
      }
      /// <summary>
      /// Deletes an existing program record by id. Deleting a program results in all tiers, and members underneath it being invalidated and removed. Needs to be used with care.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty deleteProgram(global::PKIo.Id request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteProgram(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes an existing program record by id. Deleting a program results in all tiers, and members underneath it being invalidated and removed. Needs to be used with care.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty deleteProgram(global::PKIo.Id request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_deleteProgram, null, options, request);
      }
      /// <summary>
      /// Deletes an existing program record by id. Deleting a program results in all tiers, and members underneath it being invalidated and removed. Needs to be used with care.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> deleteProgramAsync(global::PKIo.Id request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteProgramAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes an existing program record by id. Deleting a program results in all tiers, and members underneath it being invalidated and removed. Needs to be used with care.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> deleteProgramAsync(global::PKIo.Id request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_deleteProgram, null, options, request);
      }
      /// <summary>
      /// Lists all programs for the logged in user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::PKMembers.Program> listProgramsDeprecated(global::PKIo.Pagination request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return listProgramsDeprecated(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all programs for the logged in user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::PKMembers.Program> listProgramsDeprecated(global::PKIo.Pagination request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_listProgramsDeprecated, null, options, request);
      }
      /// <summary>
      /// Lists all programs for the logged in user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::PKMembers.Program> listPrograms(global::PKIo.Filters request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return listPrograms(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all programs for the logged in user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::PKMembers.Program> listPrograms(global::PKIo.Filters request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_listPrograms, null, options, request);
      }
      /// <summary>
      /// Create a new tier in an existing member program. Tiers allow a user to categorize their membership program; tiers allow for additional detail that is specific to that 'group' of members. A program needs at least one tier.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PKIo.Id createTier(global::PKMembers.Tier request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createTier(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new tier in an existing member program. Tiers allow a user to categorize their membership program; tiers allow for additional detail that is specific to that 'group' of members. A program needs at least one tier.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PKIo.Id createTier(global::PKMembers.Tier request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_createTier, null, options, request);
      }
      /// <summary>
      /// Create a new tier in an existing member program. Tiers allow a user to categorize their membership program; tiers allow for additional detail that is specific to that 'group' of members. A program needs at least one tier.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PKIo.Id> createTierAsync(global::PKMembers.Tier request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createTierAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new tier in an existing member program. Tiers allow a user to categorize their membership program; tiers allow for additional detail that is specific to that 'group' of members. A program needs at least one tier.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PKIo.Id> createTierAsync(global::PKMembers.Tier request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_createTier, null, options, request);
      }
      /// <summary>
      /// Updates a tier by tier id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PKMembers.Tier updateTier(global::PKMembers.Tier request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updateTier(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a tier by tier id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PKMembers.Tier updateTier(global::PKMembers.Tier request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_updateTier, null, options, request);
      }
      /// <summary>
      /// Updates a tier by tier id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PKMembers.Tier> updateTierAsync(global::PKMembers.Tier request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updateTierAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a tier by tier id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PKMembers.Tier> updateTierAsync(global::PKMembers.Tier request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_updateTier, null, options, request);
      }
      /// <summary>
      /// Gets a tier by tier ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PKMembers.Tier getTier(global::PKMembers.TierRequestInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getTier(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a tier by tier ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PKMembers.Tier getTier(global::PKMembers.TierRequestInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getTier, null, options, request);
      }
      /// <summary>
      /// Gets a tier by tier ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PKMembers.Tier> getTierAsync(global::PKMembers.TierRequestInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getTierAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a tier by tier ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PKMembers.Tier> getTierAsync(global::PKMembers.TierRequestInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getTier, null, options, request);
      }
      /// <summary>
      /// Deletes a tier. Deleting a tier will invalidate and delete all the passes that are in the tier.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty deleteTier(global::PKMembers.TierRequestInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteTier(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a tier. Deleting a tier will invalidate and delete all the passes that are in the tier.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty deleteTier(global::PKMembers.TierRequestInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_deleteTier, null, options, request);
      }
      /// <summary>
      /// Deletes a tier. Deleting a tier will invalidate and delete all the passes that are in the tier.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> deleteTierAsync(global::PKMembers.TierRequestInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteTierAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a tier. Deleting a tier will invalidate and delete all the passes that are in the tier.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> deleteTierAsync(global::PKMembers.TierRequestInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_deleteTier, null, options, request);
      }
      /// <summary>
      /// Lists all the tiers.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::PKMembers.Tier> listTiersDeprecated(global::PKMembers.ListRequestDeprecated request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return listTiersDeprecated(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all the tiers.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::PKMembers.Tier> listTiersDeprecated(global::PKMembers.ListRequestDeprecated request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_listTiersDeprecated, null, options, request);
      }
      /// <summary>
      /// Lists all the tiers.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::PKMembers.Tier> listTiers(global::PKMembers.ListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return listTiers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all the tiers.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::PKMembers.Tier> listTiers(global::PKMembers.ListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_listTiers, null, options, request);
      }
      /// <summary>
      /// Enrols a new member into a tier of a program. Returns the PassKit Member ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PKIo.Id enrolMember(global::PKMembers.Member request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return enrolMember(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Enrols a new member into a tier of a program. Returns the PassKit Member ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PKIo.Id enrolMember(global::PKMembers.Member request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_enrolMember, null, options, request);
      }
      /// <summary>
      /// Enrols a new member into a tier of a program. Returns the PassKit Member ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PKIo.Id> enrolMemberAsync(global::PKMembers.Member request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return enrolMemberAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Enrols a new member into a tier of a program. Returns the PassKit Member ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PKIo.Id> enrolMemberAsync(global::PKMembers.Member request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_enrolMember, null, options, request);
      }
      /// <summary>
      /// Enrols a new member into the default tier (lowest tier index) of a program. Returns the PassKit Member ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PKIo.Id enrolMemberPublic(global::PKMembers.Member request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return enrolMemberPublic(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Enrols a new member into the default tier (lowest tier index) of a program. Returns the PassKit Member ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PKIo.Id enrolMemberPublic(global::PKMembers.Member request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_enrolMemberPublic, null, options, request);
      }
      /// <summary>
      /// Enrols a new member into the default tier (lowest tier index) of a program. Returns the PassKit Member ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PKIo.Id> enrolMemberPublicAsync(global::PKMembers.Member request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return enrolMemberPublicAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Enrols a new member into the default tier (lowest tier index) of a program. Returns the PassKit Member ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PKIo.Id> enrolMemberPublicAsync(global::PKMembers.Member request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_enrolMemberPublic, null, options, request);
      }
      public virtual global::PKMembers.Member getMemberRecordById(global::PKIo.Id request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getMemberRecordById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PKMembers.Member getMemberRecordById(global::PKIo.Id request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getMemberRecordById, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PKMembers.Member> getMemberRecordByIdAsync(global::PKIo.Id request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getMemberRecordByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PKMembers.Member> getMemberRecordByIdAsync(global::PKIo.Id request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getMemberRecordById, null, options, request);
      }
      public virtual global::PKMembers.Member getMemberRecordByExternalId(global::PKMembers.MemberRecordByExternalIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getMemberRecordByExternalId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PKMembers.Member getMemberRecordByExternalId(global::PKMembers.MemberRecordByExternalIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getMemberRecordByExternalId, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PKMembers.Member> getMemberRecordByExternalIdAsync(global::PKMembers.MemberRecordByExternalIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getMemberRecordByExternalIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PKMembers.Member> getMemberRecordByExternalIdAsync(global::PKMembers.MemberRecordByExternalIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getMemberRecordByExternalId, null, options, request);
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty checkInMember(global::PKMembers.MemberCheckInOutRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return checkInMember(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty checkInMember(global::PKMembers.MemberCheckInOutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_checkInMember, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> checkInMemberAsync(global::PKMembers.MemberCheckInOutRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return checkInMemberAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> checkInMemberAsync(global::PKMembers.MemberCheckInOutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_checkInMember, null, options, request);
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty checkOutMember(global::PKMembers.MemberCheckInOutRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return checkOutMember(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty checkOutMember(global::PKMembers.MemberCheckInOutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_checkOutMember, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> checkOutMemberAsync(global::PKMembers.MemberCheckInOutRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return checkOutMemberAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> checkOutMemberAsync(global::PKMembers.MemberCheckInOutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_checkOutMember, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::PKMembers.Member> listMembersDeprecated(global::PKMembers.ListRequestDeprecated request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return listMembersDeprecated(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::PKMembers.Member> listMembersDeprecated(global::PKMembers.ListRequestDeprecated request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_listMembersDeprecated, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::PKMembers.Member> listMembers(global::PKMembers.ListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return listMembers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::PKMembers.Member> listMembers(global::PKMembers.ListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_listMembers, null, options, request);
      }
      public virtual global::PKIo.Id updateMember(global::PKMembers.Member request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updateMember(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PKIo.Id updateMember(global::PKMembers.Member request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_updateMember, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PKIo.Id> updateMemberAsync(global::PKMembers.Member request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updateMemberAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PKIo.Id> updateMemberAsync(global::PKMembers.Member request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_updateMember, null, options, request);
      }
      /// <summary>
      /// @todo: define callback
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PKMembers.MemberPoints earnPoints(global::PKMembers.EarnBurnPointsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return earnPoints(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// @todo: define callback
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PKMembers.MemberPoints earnPoints(global::PKMembers.EarnBurnPointsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_earnPoints, null, options, request);
      }
      /// <summary>
      /// @todo: define callback
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PKMembers.MemberPoints> earnPointsAsync(global::PKMembers.EarnBurnPointsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return earnPointsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// @todo: define callback
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PKMembers.MemberPoints> earnPointsAsync(global::PKMembers.EarnBurnPointsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_earnPoints, null, options, request);
      }
      /// <summary>
      /// @todo: define callback
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PKMembers.MemberPoints burnPoints(global::PKMembers.EarnBurnPointsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return burnPoints(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// @todo: define callback
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PKMembers.MemberPoints burnPoints(global::PKMembers.EarnBurnPointsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_burnPoints, null, options, request);
      }
      /// <summary>
      /// @todo: define callback
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PKMembers.MemberPoints> burnPointsAsync(global::PKMembers.EarnBurnPointsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return burnPointsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// @todo: define callback
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PKMembers.MemberPoints> burnPointsAsync(global::PKMembers.EarnBurnPointsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_burnPoints, null, options, request);
      }
      public virtual global::PKMembers.MemberPoints setPoints(global::PKMembers.SetPointsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return setPoints(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PKMembers.MemberPoints setPoints(global::PKMembers.SetPointsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_setPoints, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PKMembers.MemberPoints> setPointsAsync(global::PKMembers.SetPointsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return setPointsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PKMembers.MemberPoints> setPointsAsync(global::PKMembers.SetPointsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_setPoints, null, options, request);
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty updateMembersBySegment(global::PKMembers.MemberSegmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updateMembersBySegment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty updateMembersBySegment(global::PKMembers.MemberSegmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_updateMembersBySegment, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> updateMembersBySegmentAsync(global::PKMembers.MemberSegmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updateMembersBySegmentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> updateMembersBySegmentAsync(global::PKMembers.MemberSegmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_updateMembersBySegment, null, options, request);
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty deleteMembersBySegment(global::PKMembers.MemberSegmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteMembersBySegment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty deleteMembersBySegment(global::PKMembers.MemberSegmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_deleteMembersBySegment, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> deleteMembersBySegmentAsync(global::PKMembers.MemberSegmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteMembersBySegmentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> deleteMembersBySegmentAsync(global::PKMembers.MemberSegmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_deleteMembersBySegment, null, options, request);
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty deleteMember(global::PKMembers.Member request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteMember(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty deleteMember(global::PKMembers.Member request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_deleteMember, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> deleteMemberAsync(global::PKMembers.Member request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteMemberAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> deleteMemberAsync(global::PKMembers.Member request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_deleteMember, null, options, request);
      }
      public virtual global::PKIo.Count countMembersDeprecated(global::PKMembers.ListRequestDeprecated request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return countMembersDeprecated(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PKIo.Count countMembersDeprecated(global::PKMembers.ListRequestDeprecated request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_countMembersDeprecated, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PKIo.Count> countMembersDeprecatedAsync(global::PKMembers.ListRequestDeprecated request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return countMembersDeprecatedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PKIo.Count> countMembersDeprecatedAsync(global::PKMembers.ListRequestDeprecated request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_countMembersDeprecated, null, options, request);
      }
      public virtual global::PKIo.Count countMembers(global::PKMembers.ListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return countMembers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PKIo.Count countMembers(global::PKMembers.ListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_countMembers, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PKIo.Count> countMembersAsync(global::PKMembers.ListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return countMembersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PKIo.Count> countMembersAsync(global::PKMembers.ListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_countMembers, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::PKIo.Message> getMessageHistoryForMember(global::PKIo.Pagination request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getMessageHistoryForMember(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::PKIo.Message> getMessageHistoryForMember(global::PKIo.Pagination request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_getMessageHistoryForMember, null, options, request);
      }
      public virtual global::PKIo.Strings getMetaKeysForProgram(global::PKIo.Id request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getMetaKeysForProgram(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PKIo.Strings getMetaKeysForProgram(global::PKIo.Id request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getMetaKeysForProgram, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PKIo.Strings> getMetaKeysForProgramAsync(global::PKIo.Id request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getMetaKeysForProgramAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PKIo.Strings> getMetaKeysForProgramAsync(global::PKIo.Id request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getMetaKeysForProgram, null, options, request);
      }
      public virtual global::PKIo.Count renewMembersExpiry(global::PKMembers.UpdateExpiryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return renewMembersExpiry(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PKIo.Count renewMembersExpiry(global::PKMembers.UpdateExpiryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_renewMembersExpiry, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PKIo.Count> renewMembersExpiryAsync(global::PKMembers.UpdateExpiryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return renewMembersExpiryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PKIo.Count> renewMembersExpiryAsync(global::PKMembers.UpdateExpiryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_renewMembersExpiry, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MembersClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MembersClient(configuration);
      }
    }

  }
}
#endregion
