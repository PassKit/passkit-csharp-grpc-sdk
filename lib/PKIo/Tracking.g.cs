// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: io/common/tracking.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PKIo {

  /// <summary>Holder for reflection information generated from io/common/tracking.proto</summary>
  public static partial class TrackingReflection {

    #region Descriptor
    /// <summary>File descriptor for io/common/tracking.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TrackingReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chhpby9jb21tb24vdHJhY2tpbmcucHJvdG8SAmlvIoACChVGYWNlYm9va1Bp",
            "eGVsU2V0dGluZ3MSDwoHcGl4ZWxJZBgBIAEoCRI7CiBkYXRhQ29sbGVjdGlv",
            "blBhZ2VTdGFuZGFyZEV2ZW50cxgCIAMoCzIRLmlvLlN0YW5kYXJkRXZlbnQS",
            "NwoeZGF0YUNvbGxlY3Rpb25QYWdlQ3VzdG9tRXZlbnRzGAMgAygLMg8uaW8u",
            "Q3VzdG9tRXZlbnQSMQoWcGFzc1BhZ2VTdGFuZGFyZEV2ZW50cxgEIAMoCzIR",
            "LmlvLlN0YW5kYXJkRXZlbnQSLQoUcGFzc1BhZ2VDdXN0b21FdmVudHMYBSAD",
            "KAsyDy5pby5DdXN0b21FdmVudCJcCg1TdGFuZGFyZEV2ZW50EicKBWV2ZW50",
            "GAEgASgOMhguaW8uRmJQaXhlbFN0YW5kYXJkRXZlbnQSIgoKcHJvcGVydGll",
            "cxgCIAEoCzIOLmlvLlByb3BlcnRpZXMiQAoLQ3VzdG9tRXZlbnQSDQoFZXZl",
            "bnQYASABKAkSIgoKcHJvcGVydGllcxgCIAEoCzIOLmlvLlByb3BlcnRpZXMi",
            "9wEKClByb3BlcnRpZXMSFwoPY29udGVudENhdGVnb3J5GAEgASgJEhIKCmNv",
            "bnRlbnRJZHMYAiADKAkSEwoLY29udGVudE5hbWUYAyABKAkSEwoLY29udGVu",
            "dFR5cGUYBCABKAkSIwoIQ29udGVudHMYBSADKAsyES5pby5Db250ZW50T2Jq",
            "ZWN0EhAKCGN1cnJlbmN5GAYgASgJEhAKCG51bUl0ZW1zGAcgASgNEhQKDHBy",
            "ZWRpY3RlZEx0dhgIIAEoAhIUCgxzZWFyY2hTdHJpbmcYCSABKAkSDgoGc3Rh",
            "dHVzGAogASgIEg0KBXZhbHVlGAsgASgCIi0KDUNvbnRlbnRPYmplY3QSCgoC",
            "aWQYASABKAkSEAoIcXVhbnRpdHkYAiABKA0iwgEKF0dvb2dsZUFuYWx5dGlj",
            "c1NldHRpbmdzEhMKC3RyYWNraW5nSWRzGAEgAygJEkwKGGRhdGFDb2xsZWN0",
            "aW9uUGFnZUV2ZW50cxgCIAMoDjIqLmlvLkdvb2dsZUFuYWx5dGljc0RhdGFD",
            "b2xsZWN0aW9uUGFnZUV2ZW50EkQKFHBhc3NSZW5kZXJQYWdlRXZlbnRzGAMg",
            "AygOMiYuaW8uR29vZ2xlQW5hbHl0aWNzUGFzc1JlbmRlclBhZ2VFdmVudCKK",
            "AQoQVHJhY2tpbmdTZXR0aW5ncxI4ChVmYWNlYm9va1BpeGVsU2V0dGluZ3MY",
            "ASABKAsyGS5pby5GYWNlYm9va1BpeGVsU2V0dGluZ3MSPAoXZ29vZ2xlQW5h",
            "bHl0aWNzU2V0dGluZ3MYAiABKAsyGy5pby5Hb29nbGVBbmFseXRpY3NTZXR0",
            "aW5ncyr+AgoURmJQaXhlbFN0YW5kYXJkRXZlbnQSIQodRkJQX1NUQU5EQVJE",
            "X0VWRU5UX0RPX05PVF9VU0UQABIgChxGQlBfU1RBTkRBUkRfRVZFTlRfUEFH",
            "RV9WSUVXEAESLAooRkJQX1NUQU5EQVJEX0VWRU5UX0NPTVBMRVRFX1JFR0lT",
            "VFJBVElPThACEhsKF0ZCUF9TVEFOREFSRF9FVkVOVF9MRUFEEAMSHwobRkJQ",
            "X1NUQU5EQVJEX0VWRU5UX1BVUkNIQVNFEAQSHwobRkJQX1NUQU5EQVJEX0VW",
            "RU5UX1NDSEVEVUxFEAUSIgoeRkJQX1NUQU5EQVJEX0VWRU5UX1NUQVJUX1RS",
            "SUFMEAYSKQolRkJQX1NUQU5EQVJEX0VWRU5UX1NVQk1JVF9BUFBMSUNBVElP",
            "ThAHEiAKHEZCUF9TVEFOREFSRF9FVkVOVF9TVUJTQ1JJQkUQCBIjCh9GQlBf",
            "U1RBTkRBUkRfRVZFTlRfVklFV19DT05URU5UEAkqfAomR29vZ2xlQW5hbHl0",
            "aWNzRGF0YUNvbGxlY3Rpb25QYWdlRXZlbnQSGgoWR0FfRENfRVZFTlRfRE9f",
            "Tk9UX1VTRRAAEhkKFUdBX0RDX0VWRU5UX1BBR0VfVklFVxABEhsKF0dBX0RD",
            "X0VWRU5UX1NVQk1JVF9GT1JNEAIqggIKIkdvb2dsZUFuYWx5dGljc1Bhc3NS",
            "ZW5kZXJQYWdlRXZlbnQSGgoWR0FfUFBfRVZFTlRfRE9fTk9UX1VTRRAAEhkK",
            "FUdBX1BQX0VWRU5UX1BBR0VfVklFVxABEikKJUdBX1BQX0VWRU5UX0FERF9U",
            "T19BUFBMRV9XQUxMRVRfQ0xJQ0sQAhIvCitHQV9QUF9FVkVOVF9WSUVXX1BB",
            "U1NfSU5fQVBQTEVfV0FMTEVUX0NMSUNLEAMSKAokR0FfUFBfRVZFTlRfU0FW",
            "RV9UT19HT09HTEVfUEFZX0NMSUNLEAQSHwobR0FfUFBfRVZFTlRfQ0hBTkdF",
            "X0xBTkdVQUdFEAVCPgoPaW8ucGFzc2tpdC5QS2lvWiRzdGFzaC5wYXNza2l0",
            "LmNvbS9pby9tb2RlbC9zZGsvZ28vaW+qAgRQS0lvYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PKIo.FbPixelStandardEvent), typeof(global::PKIo.GoogleAnalyticsDataCollectionPageEvent), typeof(global::PKIo.GoogleAnalyticsPassRenderPageEvent), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PKIo.FacebookPixelSettings), global::PKIo.FacebookPixelSettings.Parser, new[]{ "PixelId", "DataCollectionPageStandardEvents", "DataCollectionPageCustomEvents", "PassPageStandardEvents", "PassPageCustomEvents" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PKIo.StandardEvent), global::PKIo.StandardEvent.Parser, new[]{ "Event", "Properties" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PKIo.CustomEvent), global::PKIo.CustomEvent.Parser, new[]{ "Event", "Properties" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PKIo.Properties), global::PKIo.Properties.Parser, new[]{ "ContentCategory", "ContentIds", "ContentName", "ContentType", "Contents", "Currency", "NumItems", "PredictedLtv", "SearchString", "Status", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PKIo.ContentObject), global::PKIo.ContentObject.Parser, new[]{ "Id", "Quantity" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PKIo.GoogleAnalyticsSettings), global::PKIo.GoogleAnalyticsSettings.Parser, new[]{ "TrackingIds", "DataCollectionPageEvents", "PassRenderPageEvents" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PKIo.TrackingSettings), global::PKIo.TrackingSettings.Parser, new[]{ "FacebookPixelSettings", "GoogleAnalyticsSettings" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Standard Facebook Pixel events that we support
  /// </summary>
  public enum FbPixelStandardEvent {
    [pbr::OriginalName("FBP_STANDARD_EVENT_DO_NOT_USE")] FbpStandardEventDoNotUse = 0,
    /// <summary>
    /// This is the default pixel tracking page visits.
    /// </summary>
    [pbr::OriginalName("FBP_STANDARD_EVENT_PAGE_VIEW")] FbpStandardEventPageView = 1,
    /// <summary>
    /// When a registration form is completed.
    /// </summary>
    [pbr::OriginalName("FBP_STANDARD_EVENT_COMPLETE_REGISTRATION")] FbpStandardEventCompleteRegistration = 2,
    /// <summary>
    /// When a sign up is completed.
    /// </summary>
    [pbr::OriginalName("FBP_STANDARD_EVENT_LEAD")] FbpStandardEventLead = 3,
    /// <summary>
    /// When a purchase is made or checkout flow is completed.
    /// </summary>
    [pbr::OriginalName("FBP_STANDARD_EVENT_PURCHASE")] FbpStandardEventPurchase = 4,
    /// <summary>
    /// When a person books an appointment to visit one of your locations.
    /// </summary>
    [pbr::OriginalName("FBP_STANDARD_EVENT_SCHEDULE")] FbpStandardEventSchedule = 5,
    /// <summary>
    /// When a person starts a free trial of a product or service you offer.
    /// </summary>
    [pbr::OriginalName("FBP_STANDARD_EVENT_START_TRIAL")] FbpStandardEventStartTrial = 6,
    /// <summary>
    /// When a person applies for a product, service, or program you offer.
    /// </summary>
    [pbr::OriginalName("FBP_STANDARD_EVENT_SUBMIT_APPLICATION")] FbpStandardEventSubmitApplication = 7,
    /// <summary>
    /// When a person applies to a start a paid subscription for a product or service you offer.
    /// </summary>
    [pbr::OriginalName("FBP_STANDARD_EVENT_SUBSCRIBE")] FbpStandardEventSubscribe = 8,
    /// <summary>
    /// A visit to a web page you care about (for example, a product page or landing page). ViewContent tells you if someone visits a web page's URL, but not what they see or do on that page.
    /// </summary>
    [pbr::OriginalName("FBP_STANDARD_EVENT_VIEW_CONTENT")] FbpStandardEventViewContent = 9,
  }

  public enum GoogleAnalyticsDataCollectionPageEvent {
    [pbr::OriginalName("GA_DC_EVENT_DO_NOT_USE")] GaDcEventDoNotUse = 0,
    /// <summary>
    /// This is the default GA even tracking page visits.
    /// </summary>
    [pbr::OriginalName("GA_DC_EVENT_PAGE_VIEW")] GaDcEventPageView = 1,
    /// <summary>
    /// When a user submits the data collection form.
    /// </summary>
    [pbr::OriginalName("GA_DC_EVENT_SUBMIT_FORM")] GaDcEventSubmitForm = 2,
  }

  public enum GoogleAnalyticsPassRenderPageEvent {
    [pbr::OriginalName("GA_PP_EVENT_DO_NOT_USE")] GaPpEventDoNotUse = 0,
    /// <summary>
    /// This is the default GA event tracking page visits.
    /// </summary>
    [pbr::OriginalName("GA_PP_EVENT_PAGE_VIEW")] GaPpEventPageView = 1,
    /// <summary>
    /// When a user clicks the Add to Apple Wallet button.
    /// </summary>
    [pbr::OriginalName("GA_PP_EVENT_ADD_TO_APPLE_WALLET_CLICK")] GaPpEventAddToAppleWalletClick = 2,
    /// <summary>
    /// When a user clicks the view pass in Apple Wallet button.
    /// </summary>
    [pbr::OriginalName("GA_PP_EVENT_VIEW_PASS_IN_APPLE_WALLET_CLICK")] GaPpEventViewPassInAppleWalletClick = 3,
    /// <summary>
    /// When a user clicks the Save to Google Pay button.
    /// </summary>
    [pbr::OriginalName("GA_PP_EVENT_SAVE_TO_GOOGLE_PAY_CLICK")] GaPpEventSaveToGooglePayClick = 4,
    /// <summary>
    /// When a user switches the language.
    /// </summary>
    [pbr::OriginalName("GA_PP_EVENT_CHANGE_LANGUAGE")] GaPpEventChangeLanguage = 5,
  }

  #endregion

  #region Messages
  public sealed partial class FacebookPixelSettings : pb::IMessage<FacebookPixelSettings> {
    private static readonly pb::MessageParser<FacebookPixelSettings> _parser = new pb::MessageParser<FacebookPixelSettings>(() => new FacebookPixelSettings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FacebookPixelSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PKIo.TrackingReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FacebookPixelSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FacebookPixelSettings(FacebookPixelSettings other) : this() {
      pixelId_ = other.pixelId_;
      dataCollectionPageStandardEvents_ = other.dataCollectionPageStandardEvents_.Clone();
      dataCollectionPageCustomEvents_ = other.dataCollectionPageCustomEvents_.Clone();
      passPageStandardEvents_ = other.passPageStandardEvents_.Clone();
      passPageCustomEvents_ = other.passPageCustomEvents_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FacebookPixelSettings Clone() {
      return new FacebookPixelSettings(this);
    }

    /// <summary>Field number for the "pixelId" field.</summary>
    public const int PixelIdFieldNumber = 1;
    private string pixelId_ = "";
    /// <summary>
    /// The Facebook Pixel ID of the account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PixelId {
      get { return pixelId_; }
      set {
        pixelId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dataCollectionPageStandardEvents" field.</summary>
    public const int DataCollectionPageStandardEventsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::PKIo.StandardEvent> _repeated_dataCollectionPageStandardEvents_codec
        = pb::FieldCodec.ForMessage(18, global::PKIo.StandardEvent.Parser);
    private readonly pbc::RepeatedField<global::PKIo.StandardEvent> dataCollectionPageStandardEvents_ = new pbc::RepeatedField<global::PKIo.StandardEvent>();
    /// <summary>
    /// List of standard events for the data collection page
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PKIo.StandardEvent> DataCollectionPageStandardEvents {
      get { return dataCollectionPageStandardEvents_; }
    }

    /// <summary>Field number for the "dataCollectionPageCustomEvents" field.</summary>
    public const int DataCollectionPageCustomEventsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::PKIo.CustomEvent> _repeated_dataCollectionPageCustomEvents_codec
        = pb::FieldCodec.ForMessage(26, global::PKIo.CustomEvent.Parser);
    private readonly pbc::RepeatedField<global::PKIo.CustomEvent> dataCollectionPageCustomEvents_ = new pbc::RepeatedField<global::PKIo.CustomEvent>();
    /// <summary>
    /// List of custom events for the data collection page
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PKIo.CustomEvent> DataCollectionPageCustomEvents {
      get { return dataCollectionPageCustomEvents_; }
    }

    /// <summary>Field number for the "passPageStandardEvents" field.</summary>
    public const int PassPageStandardEventsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::PKIo.StandardEvent> _repeated_passPageStandardEvents_codec
        = pb::FieldCodec.ForMessage(34, global::PKIo.StandardEvent.Parser);
    private readonly pbc::RepeatedField<global::PKIo.StandardEvent> passPageStandardEvents_ = new pbc::RepeatedField<global::PKIo.StandardEvent>();
    /// <summary>
    /// List of standard events for the pass page
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PKIo.StandardEvent> PassPageStandardEvents {
      get { return passPageStandardEvents_; }
    }

    /// <summary>Field number for the "passPageCustomEvents" field.</summary>
    public const int PassPageCustomEventsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::PKIo.CustomEvent> _repeated_passPageCustomEvents_codec
        = pb::FieldCodec.ForMessage(42, global::PKIo.CustomEvent.Parser);
    private readonly pbc::RepeatedField<global::PKIo.CustomEvent> passPageCustomEvents_ = new pbc::RepeatedField<global::PKIo.CustomEvent>();
    /// <summary>
    /// List of custom events for the pass page
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PKIo.CustomEvent> PassPageCustomEvents {
      get { return passPageCustomEvents_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FacebookPixelSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FacebookPixelSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PixelId != other.PixelId) return false;
      if(!dataCollectionPageStandardEvents_.Equals(other.dataCollectionPageStandardEvents_)) return false;
      if(!dataCollectionPageCustomEvents_.Equals(other.dataCollectionPageCustomEvents_)) return false;
      if(!passPageStandardEvents_.Equals(other.passPageStandardEvents_)) return false;
      if(!passPageCustomEvents_.Equals(other.passPageCustomEvents_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PixelId.Length != 0) hash ^= PixelId.GetHashCode();
      hash ^= dataCollectionPageStandardEvents_.GetHashCode();
      hash ^= dataCollectionPageCustomEvents_.GetHashCode();
      hash ^= passPageStandardEvents_.GetHashCode();
      hash ^= passPageCustomEvents_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PixelId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PixelId);
      }
      dataCollectionPageStandardEvents_.WriteTo(output, _repeated_dataCollectionPageStandardEvents_codec);
      dataCollectionPageCustomEvents_.WriteTo(output, _repeated_dataCollectionPageCustomEvents_codec);
      passPageStandardEvents_.WriteTo(output, _repeated_passPageStandardEvents_codec);
      passPageCustomEvents_.WriteTo(output, _repeated_passPageCustomEvents_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PixelId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PixelId);
      }
      size += dataCollectionPageStandardEvents_.CalculateSize(_repeated_dataCollectionPageStandardEvents_codec);
      size += dataCollectionPageCustomEvents_.CalculateSize(_repeated_dataCollectionPageCustomEvents_codec);
      size += passPageStandardEvents_.CalculateSize(_repeated_passPageStandardEvents_codec);
      size += passPageCustomEvents_.CalculateSize(_repeated_passPageCustomEvents_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FacebookPixelSettings other) {
      if (other == null) {
        return;
      }
      if (other.PixelId.Length != 0) {
        PixelId = other.PixelId;
      }
      dataCollectionPageStandardEvents_.Add(other.dataCollectionPageStandardEvents_);
      dataCollectionPageCustomEvents_.Add(other.dataCollectionPageCustomEvents_);
      passPageStandardEvents_.Add(other.passPageStandardEvents_);
      passPageCustomEvents_.Add(other.passPageCustomEvents_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PixelId = input.ReadString();
            break;
          }
          case 18: {
            dataCollectionPageStandardEvents_.AddEntriesFrom(input, _repeated_dataCollectionPageStandardEvents_codec);
            break;
          }
          case 26: {
            dataCollectionPageCustomEvents_.AddEntriesFrom(input, _repeated_dataCollectionPageCustomEvents_codec);
            break;
          }
          case 34: {
            passPageStandardEvents_.AddEntriesFrom(input, _repeated_passPageStandardEvents_codec);
            break;
          }
          case 42: {
            passPageCustomEvents_.AddEntriesFrom(input, _repeated_passPageCustomEvents_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StandardEvent : pb::IMessage<StandardEvent> {
    private static readonly pb::MessageParser<StandardEvent> _parser = new pb::MessageParser<StandardEvent>(() => new StandardEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StandardEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PKIo.TrackingReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StandardEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StandardEvent(StandardEvent other) : this() {
      event_ = other.event_;
      properties_ = other.properties_ != null ? other.properties_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StandardEvent Clone() {
      return new StandardEvent(this);
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 1;
    private global::PKIo.FbPixelStandardEvent event_ = global::PKIo.FbPixelStandardEvent.FbpStandardEventDoNotUse;
    /// <summary>
    /// Standard event
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKIo.FbPixelStandardEvent Event {
      get { return event_; }
      set {
        event_ = value;
      }
    }

    /// <summary>Field number for the "properties" field.</summary>
    public const int PropertiesFieldNumber = 2;
    private global::PKIo.Properties properties_;
    /// <summary>
    /// Optional event properties
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKIo.Properties Properties {
      get { return properties_; }
      set {
        properties_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StandardEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StandardEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Event != other.Event) return false;
      if (!object.Equals(Properties, other.Properties)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Event != global::PKIo.FbPixelStandardEvent.FbpStandardEventDoNotUse) hash ^= Event.GetHashCode();
      if (properties_ != null) hash ^= Properties.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Event != global::PKIo.FbPixelStandardEvent.FbpStandardEventDoNotUse) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Event);
      }
      if (properties_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Properties);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Event != global::PKIo.FbPixelStandardEvent.FbpStandardEventDoNotUse) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Event);
      }
      if (properties_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Properties);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StandardEvent other) {
      if (other == null) {
        return;
      }
      if (other.Event != global::PKIo.FbPixelStandardEvent.FbpStandardEventDoNotUse) {
        Event = other.Event;
      }
      if (other.properties_ != null) {
        if (properties_ == null) {
          Properties = new global::PKIo.Properties();
        }
        Properties.MergeFrom(other.Properties);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Event = (global::PKIo.FbPixelStandardEvent) input.ReadEnum();
            break;
          }
          case 18: {
            if (properties_ == null) {
              Properties = new global::PKIo.Properties();
            }
            input.ReadMessage(Properties);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CustomEvent : pb::IMessage<CustomEvent> {
    private static readonly pb::MessageParser<CustomEvent> _parser = new pb::MessageParser<CustomEvent>(() => new CustomEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CustomEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PKIo.TrackingReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomEvent(CustomEvent other) : this() {
      event_ = other.event_;
      properties_ = other.properties_ != null ? other.properties_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomEvent Clone() {
      return new CustomEvent(this);
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 1;
    private string event_ = "";
    /// <summary>
    /// Custom event name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Event {
      get { return event_; }
      set {
        event_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "properties" field.</summary>
    public const int PropertiesFieldNumber = 2;
    private global::PKIo.Properties properties_;
    /// <summary>
    /// Optional event properties
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKIo.Properties Properties {
      get { return properties_; }
      set {
        properties_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CustomEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CustomEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Event != other.Event) return false;
      if (!object.Equals(Properties, other.Properties)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Event.Length != 0) hash ^= Event.GetHashCode();
      if (properties_ != null) hash ^= Properties.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Event.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Event);
      }
      if (properties_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Properties);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Event.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Event);
      }
      if (properties_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Properties);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CustomEvent other) {
      if (other == null) {
        return;
      }
      if (other.Event.Length != 0) {
        Event = other.Event;
      }
      if (other.properties_ != null) {
        if (properties_ == null) {
          Properties = new global::PKIo.Properties();
        }
        Properties.MergeFrom(other.Properties);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Event = input.ReadString();
            break;
          }
          case 18: {
            if (properties_ == null) {
              Properties = new global::PKIo.Properties();
            }
            input.ReadMessage(Properties);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Properties : pb::IMessage<Properties> {
    private static readonly pb::MessageParser<Properties> _parser = new pb::MessageParser<Properties>(() => new Properties());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Properties> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PKIo.TrackingReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Properties() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Properties(Properties other) : this() {
      contentCategory_ = other.contentCategory_;
      contentIds_ = other.contentIds_.Clone();
      contentName_ = other.contentName_;
      contentType_ = other.contentType_;
      contents_ = other.contents_.Clone();
      currency_ = other.currency_;
      numItems_ = other.numItems_;
      predictedLtv_ = other.predictedLtv_;
      searchString_ = other.searchString_;
      status_ = other.status_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Properties Clone() {
      return new Properties(this);
    }

    /// <summary>Field number for the "contentCategory" field.</summary>
    public const int ContentCategoryFieldNumber = 1;
    private string contentCategory_ = "";
    /// <summary>
    /// Category of the page/product.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContentCategory {
      get { return contentCategory_; }
      set {
        contentCategory_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "contentIds" field.</summary>
    public const int ContentIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_contentIds_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> contentIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Product IDs associated with the event, such as SKUs (e.g. ['ABC123', 'XYZ789']).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ContentIds {
      get { return contentIds_; }
    }

    /// <summary>Field number for the "contentName" field.</summary>
    public const int ContentNameFieldNumber = 3;
    private string contentName_ = "";
    /// <summary>
    /// Name of the page/product.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContentName {
      get { return contentName_; }
      set {
        contentName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "contentType" field.</summary>
    public const int ContentTypeFieldNumber = 4;
    private string contentType_ = "";
    /// <summary>
    /// Either product or product_group based on the content_ids or contents being passed. If the IDs being passed in content_ids or contents parameter are IDs of products then the value should be product. If product group IDs are being passed, then the value should be product_group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContentType {
      get { return contentType_; }
      set {
        contentType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Contents" field.</summary>
    public const int ContentsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::PKIo.ContentObject> _repeated_contents_codec
        = pb::FieldCodec.ForMessage(42, global::PKIo.ContentObject.Parser);
    private readonly pbc::RepeatedField<global::PKIo.ContentObject> contents_ = new pbc::RepeatedField<global::PKIo.ContentObject>();
    /// <summary>
    /// An array of objects that contains the quantity and the International Article Number (EAN) when applicable, or other product or content identifier(s). id and quantity are the required fields. e.g. [{'id': 'ABC123', 'quantity': 2}, {'id': 'XYZ789', 'quantity': 2}].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PKIo.ContentObject> Contents {
      get { return contents_; }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 6;
    private string currency_ = "";
    /// <summary>
    /// The currency for the value specified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "numItems" field.</summary>
    public const int NumItemsFieldNumber = 7;
    private uint numItems_;
    /// <summary>
    /// Used with InitiateCheckout event. The number of items when checkout was initiated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumItems {
      get { return numItems_; }
      set {
        numItems_ = value;
      }
    }

    /// <summary>Field number for the "predictedLtv" field.</summary>
    public const int PredictedLtvFieldNumber = 8;
    private float predictedLtv_;
    /// <summary>
    /// Predicted lifetime value of a subscriber as defined by the advertiser and expressed as an exact value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PredictedLtv {
      get { return predictedLtv_; }
      set {
        predictedLtv_ = value;
      }
    }

    /// <summary>Field number for the "searchString" field.</summary>
    public const int SearchStringFieldNumber = 9;
    private string searchString_ = "";
    /// <summary>
    /// Used with the Search event. The string entered by the user for the search.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SearchString {
      get { return searchString_; }
      set {
        searchString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 10;
    private bool status_;
    /// <summary>
    /// Used with the CompleteRegistration event, to show the status of the registration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 11;
    private float value_;
    /// <summary>
    /// The value of a user performing this event to the business.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Properties);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Properties other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ContentCategory != other.ContentCategory) return false;
      if(!contentIds_.Equals(other.contentIds_)) return false;
      if (ContentName != other.ContentName) return false;
      if (ContentType != other.ContentType) return false;
      if(!contents_.Equals(other.contents_)) return false;
      if (Currency != other.Currency) return false;
      if (NumItems != other.NumItems) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PredictedLtv, other.PredictedLtv)) return false;
      if (SearchString != other.SearchString) return false;
      if (Status != other.Status) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Value, other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ContentCategory.Length != 0) hash ^= ContentCategory.GetHashCode();
      hash ^= contentIds_.GetHashCode();
      if (ContentName.Length != 0) hash ^= ContentName.GetHashCode();
      if (ContentType.Length != 0) hash ^= ContentType.GetHashCode();
      hash ^= contents_.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (NumItems != 0) hash ^= NumItems.GetHashCode();
      if (PredictedLtv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PredictedLtv);
      if (SearchString.Length != 0) hash ^= SearchString.GetHashCode();
      if (Status != false) hash ^= Status.GetHashCode();
      if (Value != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Value);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ContentCategory.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ContentCategory);
      }
      contentIds_.WriteTo(output, _repeated_contentIds_codec);
      if (ContentName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ContentName);
      }
      if (ContentType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ContentType);
      }
      contents_.WriteTo(output, _repeated_contents_codec);
      if (Currency.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Currency);
      }
      if (NumItems != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(NumItems);
      }
      if (PredictedLtv != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(PredictedLtv);
      }
      if (SearchString.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(SearchString);
      }
      if (Status != false) {
        output.WriteRawTag(80);
        output.WriteBool(Status);
      }
      if (Value != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ContentCategory.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContentCategory);
      }
      size += contentIds_.CalculateSize(_repeated_contentIds_codec);
      if (ContentName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContentName);
      }
      if (ContentType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContentType);
      }
      size += contents_.CalculateSize(_repeated_contents_codec);
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (NumItems != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumItems);
      }
      if (PredictedLtv != 0F) {
        size += 1 + 4;
      }
      if (SearchString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SearchString);
      }
      if (Status != false) {
        size += 1 + 1;
      }
      if (Value != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Properties other) {
      if (other == null) {
        return;
      }
      if (other.ContentCategory.Length != 0) {
        ContentCategory = other.ContentCategory;
      }
      contentIds_.Add(other.contentIds_);
      if (other.ContentName.Length != 0) {
        ContentName = other.ContentName;
      }
      if (other.ContentType.Length != 0) {
        ContentType = other.ContentType;
      }
      contents_.Add(other.contents_);
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      if (other.NumItems != 0) {
        NumItems = other.NumItems;
      }
      if (other.PredictedLtv != 0F) {
        PredictedLtv = other.PredictedLtv;
      }
      if (other.SearchString.Length != 0) {
        SearchString = other.SearchString;
      }
      if (other.Status != false) {
        Status = other.Status;
      }
      if (other.Value != 0F) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ContentCategory = input.ReadString();
            break;
          }
          case 18: {
            contentIds_.AddEntriesFrom(input, _repeated_contentIds_codec);
            break;
          }
          case 26: {
            ContentName = input.ReadString();
            break;
          }
          case 34: {
            ContentType = input.ReadString();
            break;
          }
          case 42: {
            contents_.AddEntriesFrom(input, _repeated_contents_codec);
            break;
          }
          case 50: {
            Currency = input.ReadString();
            break;
          }
          case 56: {
            NumItems = input.ReadUInt32();
            break;
          }
          case 69: {
            PredictedLtv = input.ReadFloat();
            break;
          }
          case 74: {
            SearchString = input.ReadString();
            break;
          }
          case 80: {
            Status = input.ReadBool();
            break;
          }
          case 93: {
            Value = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ContentObject : pb::IMessage<ContentObject> {
    private static readonly pb::MessageParser<ContentObject> _parser = new pb::MessageParser<ContentObject>(() => new ContentObject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContentObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PKIo.TrackingReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentObject(ContentObject other) : this() {
      id_ = other.id_;
      quantity_ = other.quantity_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentObject Clone() {
      return new ContentObject(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 2;
    private uint quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContentObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContentObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Quantity != other.Quantity) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Quantity != 0) hash ^= Quantity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Quantity != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Quantity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Quantity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Quantity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContentObject other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Quantity != 0) {
        Quantity = other.Quantity;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Quantity = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GoogleAnalyticsSettings : pb::IMessage<GoogleAnalyticsSettings> {
    private static readonly pb::MessageParser<GoogleAnalyticsSettings> _parser = new pb::MessageParser<GoogleAnalyticsSettings>(() => new GoogleAnalyticsSettings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GoogleAnalyticsSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PKIo.TrackingReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoogleAnalyticsSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoogleAnalyticsSettings(GoogleAnalyticsSettings other) : this() {
      trackingIds_ = other.trackingIds_.Clone();
      dataCollectionPageEvents_ = other.dataCollectionPageEvents_.Clone();
      passRenderPageEvents_ = other.passRenderPageEvents_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoogleAnalyticsSettings Clone() {
      return new GoogleAnalyticsSettings(this);
    }

    /// <summary>Field number for the "trackingIds" field.</summary>
    public const int TrackingIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_trackingIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> trackingIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// list of Google Analytics ID's to track ('UA-XXXXX-Y', 'UA-XXXXX-B', etc).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> TrackingIds {
      get { return trackingIds_; }
    }

    /// <summary>Field number for the "dataCollectionPageEvents" field.</summary>
    public const int DataCollectionPageEventsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::PKIo.GoogleAnalyticsDataCollectionPageEvent> _repeated_dataCollectionPageEvents_codec
        = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::PKIo.GoogleAnalyticsDataCollectionPageEvent) x);
    private readonly pbc::RepeatedField<global::PKIo.GoogleAnalyticsDataCollectionPageEvent> dataCollectionPageEvents_ = new pbc::RepeatedField<global::PKIo.GoogleAnalyticsDataCollectionPageEvent>();
    /// <summary>
    /// Events to send to Google on the data collection page.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PKIo.GoogleAnalyticsDataCollectionPageEvent> DataCollectionPageEvents {
      get { return dataCollectionPageEvents_; }
    }

    /// <summary>Field number for the "passRenderPageEvents" field.</summary>
    public const int PassRenderPageEventsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::PKIo.GoogleAnalyticsPassRenderPageEvent> _repeated_passRenderPageEvents_codec
        = pb::FieldCodec.ForEnum(26, x => (int) x, x => (global::PKIo.GoogleAnalyticsPassRenderPageEvent) x);
    private readonly pbc::RepeatedField<global::PKIo.GoogleAnalyticsPassRenderPageEvent> passRenderPageEvents_ = new pbc::RepeatedField<global::PKIo.GoogleAnalyticsPassRenderPageEvent>();
    /// <summary>
    /// Events to send to Google on the pass render page.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PKIo.GoogleAnalyticsPassRenderPageEvent> PassRenderPageEvents {
      get { return passRenderPageEvents_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GoogleAnalyticsSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GoogleAnalyticsSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!trackingIds_.Equals(other.trackingIds_)) return false;
      if(!dataCollectionPageEvents_.Equals(other.dataCollectionPageEvents_)) return false;
      if(!passRenderPageEvents_.Equals(other.passRenderPageEvents_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= trackingIds_.GetHashCode();
      hash ^= dataCollectionPageEvents_.GetHashCode();
      hash ^= passRenderPageEvents_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      trackingIds_.WriteTo(output, _repeated_trackingIds_codec);
      dataCollectionPageEvents_.WriteTo(output, _repeated_dataCollectionPageEvents_codec);
      passRenderPageEvents_.WriteTo(output, _repeated_passRenderPageEvents_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += trackingIds_.CalculateSize(_repeated_trackingIds_codec);
      size += dataCollectionPageEvents_.CalculateSize(_repeated_dataCollectionPageEvents_codec);
      size += passRenderPageEvents_.CalculateSize(_repeated_passRenderPageEvents_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GoogleAnalyticsSettings other) {
      if (other == null) {
        return;
      }
      trackingIds_.Add(other.trackingIds_);
      dataCollectionPageEvents_.Add(other.dataCollectionPageEvents_);
      passRenderPageEvents_.Add(other.passRenderPageEvents_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            trackingIds_.AddEntriesFrom(input, _repeated_trackingIds_codec);
            break;
          }
          case 18:
          case 16: {
            dataCollectionPageEvents_.AddEntriesFrom(input, _repeated_dataCollectionPageEvents_codec);
            break;
          }
          case 26:
          case 24: {
            passRenderPageEvents_.AddEntriesFrom(input, _repeated_passRenderPageEvents_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TrackingSettings : pb::IMessage<TrackingSettings> {
    private static readonly pb::MessageParser<TrackingSettings> _parser = new pb::MessageParser<TrackingSettings>(() => new TrackingSettings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrackingSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PKIo.TrackingReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackingSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackingSettings(TrackingSettings other) : this() {
      facebookPixelSettings_ = other.facebookPixelSettings_ != null ? other.facebookPixelSettings_.Clone() : null;
      googleAnalyticsSettings_ = other.googleAnalyticsSettings_ != null ? other.googleAnalyticsSettings_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackingSettings Clone() {
      return new TrackingSettings(this);
    }

    /// <summary>Field number for the "facebookPixelSettings" field.</summary>
    public const int FacebookPixelSettingsFieldNumber = 1;
    private global::PKIo.FacebookPixelSettings facebookPixelSettings_;
    /// <summary>
    /// Facebook Pixel settings
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKIo.FacebookPixelSettings FacebookPixelSettings {
      get { return facebookPixelSettings_; }
      set {
        facebookPixelSettings_ = value;
      }
    }

    /// <summary>Field number for the "googleAnalyticsSettings" field.</summary>
    public const int GoogleAnalyticsSettingsFieldNumber = 2;
    private global::PKIo.GoogleAnalyticsSettings googleAnalyticsSettings_;
    /// <summary>
    /// Google Analytics settings
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKIo.GoogleAnalyticsSettings GoogleAnalyticsSettings {
      get { return googleAnalyticsSettings_; }
      set {
        googleAnalyticsSettings_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrackingSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrackingSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(FacebookPixelSettings, other.FacebookPixelSettings)) return false;
      if (!object.Equals(GoogleAnalyticsSettings, other.GoogleAnalyticsSettings)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (facebookPixelSettings_ != null) hash ^= FacebookPixelSettings.GetHashCode();
      if (googleAnalyticsSettings_ != null) hash ^= GoogleAnalyticsSettings.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (facebookPixelSettings_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FacebookPixelSettings);
      }
      if (googleAnalyticsSettings_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GoogleAnalyticsSettings);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (facebookPixelSettings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FacebookPixelSettings);
      }
      if (googleAnalyticsSettings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GoogleAnalyticsSettings);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrackingSettings other) {
      if (other == null) {
        return;
      }
      if (other.facebookPixelSettings_ != null) {
        if (facebookPixelSettings_ == null) {
          FacebookPixelSettings = new global::PKIo.FacebookPixelSettings();
        }
        FacebookPixelSettings.MergeFrom(other.FacebookPixelSettings);
      }
      if (other.googleAnalyticsSettings_ != null) {
        if (googleAnalyticsSettings_ == null) {
          GoogleAnalyticsSettings = new global::PKIo.GoogleAnalyticsSettings();
        }
        GoogleAnalyticsSettings.MergeFrom(other.GoogleAnalyticsSettings);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (facebookPixelSettings_ == null) {
              FacebookPixelSettings = new global::PKIo.FacebookPixelSettings();
            }
            input.ReadMessage(FacebookPixelSettings);
            break;
          }
          case 18: {
            if (googleAnalyticsSettings_ == null) {
              GoogleAnalyticsSettings = new global::PKIo.GoogleAnalyticsSettings();
            }
            input.ReadMessage(GoogleAnalyticsSettings);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
