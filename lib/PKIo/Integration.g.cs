// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: io/common/integration.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PKIo {

  /// <summary>Holder for reflection information generated from io/common/integration.proto</summary>
  public static partial class IntegrationReflection {

    #region Descriptor
    /// <summary>File descriptor for io/common/integration.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static IntegrationReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chtpby9jb21tb24vaW50ZWdyYXRpb24ucHJvdG8SAmlvGhRpby9jb21tb24v",
            "cGFzcy5wcm90bxoYaW8vY29tbW9uL3RlbXBsYXRlLnByb3RvGixwcm90b2Mt",
            "Z2VuLXN3YWdnZXIvb3B0aW9ucy9hbm5vdGF0aW9ucy5wcm90bxoZaW8vY29t",
            "bW9uL3Byb3RvY29scy5wcm90bxofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFt",
            "cC5wcm90byI4ChJNZW1iZXJzaGlwRXZlbnRJZHMSIgoDaWRzGAEgAygOMhUu",
            "aW8uTWVtYmVyc2hpcEV2ZW50SWQiMAoOQ291cG9uRXZlbnRJZHMSHgoDaWRz",
            "GAEgAygOMhEuaW8uQ291cG9uRXZlbnRJZCKgAQoSSW50ZWdyYXRpb25Db25m",
            "aWdzEg8KB2NsYXNzSWQYASABKAkSQgoOY29uZmlndXJhdGlvbnMYAiADKAsy",
            "Ki5pby5JbnRlZ3JhdGlvbkNvbmZpZ3MuQ29uZmlndXJhdGlvbnNFbnRyeRo1",
            "ChNDb25maWd1cmF0aW9uc0VudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgC",
            "IAEoCToCOAEiRgoPUHJvdG9jb2xJZElucHV0EiIKCHByb3RvY29sGAEgASgO",
            "MhAuaW8uUGFzc1Byb3RvY29sEg8KB2NsYXNzSWQYAiABKAkiUQoTU3Vic2Ny",
            "aXB0aW9uUmVxdWVzdBIiCghwcm90b2NvbBgBIAEoDjIQLmlvLlBhc3NQcm90",
            "b2NvbBIWCg5zdWJzY3JpcHRpb25JZBgCIAEoCSKOAQoMRmllbGRNYXBwaW5n",
            "EhsKE2Rlc3RpbmF0aW9uRmllbGRLZXkYASABKAkSLgoYZGVzdGluYXRpb25G",
            "aWVsZERhdGFUeXBlGAIgASgOMgwuaW8uRGF0YVR5cGUSEgoKaXNSZXF1aXJl",
            "ZBgDIAEoCBIdChVzb3VyY2VGaWVsZFVuaXF1ZU5hbWUYBCABKAkicgoNV2Vi",
            "aG9va0NvbmZpZxIRCgl0YXJnZXRVcmwYASABKAkSJgoMYWN0aW9uTWV0aG9k",
            "GAIgASgOMhAuaW8uQWN0aW9uTWV0aG9kEiYKDGZpZWxkTWFwcGluZxgDIAEo",
            "CzIQLmlvLkZpZWxkTWFwcGluZyJAChdTaW5rU3Vic2NyaXB0aW9uUGF5bG9h",
            "ZBINCgVldmVudBgBIAEoCRIWCgRwYXNzGAIgASgLMgguaW8uUGFzcyLFBQoQ",
            "U2lua1N1YnNjcmlwdGlvbhIKCgJpZBgBIAEoCRIPCgdjbGFzc0lkGAIgASgJ",
            "EiIKCHByb3RvY29sGAMgASgOMhAuaW8uUGFzc1Byb3RvY29sEiQKC3Bhc3NF",
            "dmVudElkGAQgAygOMg8uaW8uUGFzc0V2ZW50SWQSJQoGc3RhdHVzGAUgASgO",
            "MhUuaW8uSW50ZWdyYXRpb25TdGF0dXMSKQoKY29uZmlnVHlwZRgGIAEoDjIV",
            "LmlvLkNvbmZpZ3VyYXRpb25UeXBlEhUKDWNvbmZpZ3VyYXRpb24YByABKAkS",
            "LQoJY3JlYXRlZEF0GAggASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFt",
            "cBItCgl1cGRhdGVkQXQYCSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0",
            "YW1wEjIKEG1lbWJlcnNoaXBFdmVudHMYCiABKAsyFi5pby5NZW1iZXJzaGlw",
            "RXZlbnRJZHNIABIqCgxjb3Vwb25FdmVudHMYCyABKAsyEi5pby5Db3Vwb25F",
            "dmVudElkc0gAOo8CkkGLAgqIAioRU2luayBTdWJzY3JpcHRpb24y4AFTZXQg",
            "dXAgYSBzdWJzY3JpcHRpb24gZm9yIHNpbmsgaW50ZWdyYXRpb24uIFNpbmsg",
            "c3Vic2NyaXB0aW9uIGlzIHRyaWdnZXJlZCBhZnRlciBhbGwgY2hhaW4gb2Yg",
            "ZXZlbnRzIGZpbmlzaGVkIGluc2lkZSBQYXNzS2l0LiBFLmcuIENyZWF0ZSBh",
            "IHBhc3MgaG9sZGVyIHJlY29yZCBhbmQgaXNzdWUgYSBwYXNzLCB0aGVuIGNy",
            "ZWF0ZSBhIHJlY29yZCBvbiBhIHRoaXJkIHBhcnR5IHBsYXRmb3JtLtIBD2Rl",
            "ZmF1bHRMYW5ndWFnZUIRCg9wcm90b2NvbEV2ZW50SWQqfQoRSW50ZWdyYXRp",
            "b25TdGF0dXMSGwoXSU5URUdSQVRJT05fU1RBVFVTX05PTkUQABIYChRJTlRF",
            "R1JBVElPTl9ESVNBQkxFRBABEhYKEklOVEVHUkFUSU9OX0FDVElWRRACEhkK",
            "FUlOVEVHUkFUSU9OX1NVU1BFTkRFRBADKm8KEUNvbmZpZ3VyYXRpb25UeXBl",
            "EhYKEkNPTkZJR1VSQVRJT05fTk9ORRAAEgsKB1dFQkhPT0sQARIMCghEQl9N",
            "WVNRTBACEggKBFpPSE8QAxIJCgVCUkFaRRAEEhIKDl9DT05GSUdfVFlQRV8x",
            "EGQqowQKD0ludGVncmF0aW9uVHlwZRIZChVJTlRFR1JBVElPTl9UWVBFX05P",
            "TkUQABIWChJTT1VSQ0VfSU5URUdSQVRJT04QARImCiJIT09LX0JFRk9SRV9P",
            "QkpFQ1RfUkVDT1JEX0NSRUFUSU9OEAQSJQohSE9PS19BRlRFUl9PQkpFQ1Rf",
            "UkVDT1JEX0NSRUFUSU9OEAgSGgoWSE9PS19CRUZPUkVfUEFTU19JU1NVRRAQ",
            "EhkKFUhPT0tfQUZURVJfUEFTU19JU1NVRRAgEhsKF0hPT0tfQUZURVJfUEFT",
            "U19JTlNUQUxMEEASHgoZSE9PS19BRlRFUl9QQVNTX1VOSU5TVEFMTBCAARIl",
            "CiBIT09LX0JFRk9SRV9PQkpFQ1RfUkVDT1JEX1VQREFURRCAAhIkCh9IT09L",
            "X0FGVEVSX09CSkVDVF9SRUNPUkRfVVBEQVRFEIAEEiMKHkhPT0tfQkVGT1JF",
            "X1BBU1NfUkVDT1JEX1VQREFURRCACBIiCh1IT09LX0FGVEVSX1BBU1NfUkVD",
            "T1JEX1VQREFURRCAEBIcChdIT09LX0JFRk9SRV9QQVNTX1VQREFURRCAIBIb",
            "ChZIT09LX0FGVEVSX1BBU1NfVVBEQVRFEIBAEiQKHkhPT0tfQkVGT1JFX1BB",
            "U1NfUkVDT1JEX0RFTEVURRCAgAESIwodSE9PS19BRlRFUl9QQVNTX1JFQ09S",
            "RF9ERUxFVEUQgIACKtEBCgtQYXNzRXZlbnRJZBITCg9QQVNTX0VWRU5UX05P",
            "TkUQABIdChlQQVNTX0VWRU5UX1JFQ09SRF9DUkVBVEVEEAESGAoUUEFTU19F",
            "VkVOVF9JTlNUQUxMRUQQAhIdChlQQVNTX0VWRU5UX1JFQ09SRF9VUERBVEVE",
            "EAQSGgoWUEFTU19FVkVOVF9VTklOU1RBTExFRBAIEhoKFlBBU1NfRVZFTlRf",
            "SU5WQUxJREFURUQQEBIdChlQQVNTX0VWRU5UX1JFQ09SRF9ERUxFVEVEECAq",
            "XwoRTWVtYmVyc2hpcEV2ZW50SWQSFQoRTUVNQkVSX0VWRU5UX05PTkUQABIZ",
            "ChVNRU1CRVJfRVZFTlRfRU5ST0xMRUQQARIYChRNRU1CRVJfRVZFTlRfVVBE",
            "QVRFRBACKo8BCg1Db3Vwb25FdmVudElkEhUKEUNPVVBPTl9FVkVOVF9OT05F",
            "EAASGAoUQ09VUE9OX0VWRU5UX0NSRUFURUQQARIZChVDT1VQT05fRVZFTlRf",
            "UkVERUVNRUQQAhIYChRDT1VQT05fRVZFTlRfVVBEQVRFRBAEEhgKFENPVVBP",
            "Tl9FVkVOVF9ERUxFVEVEEAgqUwoMQWN0aW9uTWV0aG9kEg8KC01FVEhPRF9O",
            "T05FEAASDwoLTUVUSE9EX1BPU1QQARIOCgpNRVRIT0RfUFVUEAISEQoNTUVU",
            "SE9EX0RFTEVURRADQj4KD2lvLnBhc3NraXQuUEtpb1okc3Rhc2gucGFzc2tp",
            "dC5jb20vaW8vbW9kZWwvc2RrL2dvL2lvqgIEUEtJb2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::PKIo.PassReflection.Descriptor, global::PKIo.TemplateReflection.Descriptor, global::Grpc.Gateway.ProtocGenSwagger.Options.AnnotationsReflection.Descriptor, global::PKIo.ProtocolsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PKIo.IntegrationStatus), typeof(global::PKIo.ConfigurationType), typeof(global::PKIo.IntegrationType), typeof(global::PKIo.PassEventId), typeof(global::PKIo.MembershipEventId), typeof(global::PKIo.CouponEventId), typeof(global::PKIo.ActionMethod), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PKIo.MembershipEventIds), global::PKIo.MembershipEventIds.Parser, new[]{ "Ids" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PKIo.CouponEventIds), global::PKIo.CouponEventIds.Parser, new[]{ "Ids" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PKIo.IntegrationConfigs), global::PKIo.IntegrationConfigs.Parser, new[]{ "ClassId", "Configurations" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::PKIo.ProtocolIdInput), global::PKIo.ProtocolIdInput.Parser, new[]{ "Protocol", "ClassId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PKIo.SubscriptionRequest), global::PKIo.SubscriptionRequest.Parser, new[]{ "Protocol", "SubscriptionId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PKIo.FieldMapping), global::PKIo.FieldMapping.Parser, new[]{ "DestinationFieldKey", "DestinationFieldDataType", "IsRequired", "SourceFieldUniqueName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PKIo.WebhookConfig), global::PKIo.WebhookConfig.Parser, new[]{ "TargetUrl", "ActionMethod", "FieldMapping" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PKIo.SinkSubscriptionPayload), global::PKIo.SinkSubscriptionPayload.Parser, new[]{ "Event", "Pass" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PKIo.SinkSubscription), global::PKIo.SinkSubscription.Parser, new[]{ "Id", "ClassId", "Protocol", "PassEventId", "Status", "ConfigType", "Configuration", "CreatedAt", "UpdatedAt", "MembershipEvents", "CouponEvents" }, new[]{ "ProtocolEventId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Turn on and off the integration.
  /// </summary>
  public enum IntegrationStatus {
    [pbr::OriginalName("INTEGRATION_STATUS_NONE")] None = 0,
    /// <summary>
    /// Turn off the integration.
    /// </summary>
    [pbr::OriginalName("INTEGRATION_DISABLED")] IntegrationDisabled = 1,
    /// <summary>
    /// Turn on the integration.
    /// </summary>
    [pbr::OriginalName("INTEGRATION_ACTIVE")] IntegrationActive = 2,
    /// <summary>
    /// The status assigned by PassKit when the account or record is not satisfying the requirements to conduct integration process.
    /// </summary>
    [pbr::OriginalName("INTEGRATION_SUSPENDED")] IntegrationSuspended = 3,
  }

  /// <summary>
  /// Configuration of the third party app which can be integrated with PassKit.
  /// </summary>
  public enum ConfigurationType {
    [pbr::OriginalName("CONFIGURATION_NONE")] ConfigurationNone = 0,
    [pbr::OriginalName("WEBHOOK")] Webhook = 1,
    [pbr::OriginalName("DB_MYSQL")] DbMysql = 2,
    [pbr::OriginalName("ZOHO")] Zoho = 3,
    [pbr::OriginalName("BRAZE")] Braze = 4,
    [pbr::OriginalName("_CONFIG_TYPE_1")] ConfigType1 = 100,
  }

  /// <summary>
  /// IntegrationType allows to select the timing of integration occurs and the order of data processing.
  /// </summary>
  public enum IntegrationType {
    [pbr::OriginalName("INTEGRATION_TYPE_NONE")] None = 0,
    /// <summary>
    /// Trigger event occurs on a third party platform which triggers action (chain of events) inside the PassKit. E.g. Database update triggers PassKit to issue a pass.
    /// </summary>
    [pbr::OriginalName("SOURCE_INTEGRATION")] SourceIntegration = 1,
    /// <summary>
    /// Pass holder data is processed by a third party application first then its outcome and original data are stored in PassKit.
    /// </summary>
    [pbr::OriginalName("HOOK_BEFORE_OBJECT_RECORD_CREATION")] HookBeforeObjectRecordCreation = 4,
    /// <summary>
    /// A hook event occurs after pass holder's data is created on PassKit.
    /// </summary>
    [pbr::OriginalName("HOOK_AFTER_OBJECT_RECORD_CREATION")] HookAfterObjectRecordCreation = 8,
    /// <summary>
    /// A hook event occurs after pass holder record creation and before pass issue.
    /// </summary>
    [pbr::OriginalName("HOOK_BEFORE_PASS_ISSUE")] HookBeforePassIssue = 16,
    /// <summary>
    /// A hook event occurs after pass issue.
    /// </summary>
    [pbr::OriginalName("HOOK_AFTER_PASS_ISSUE")] HookAfterPassIssue = 32,
    /// <summary>
    /// A hook event occurs after pass has been installed on mobile.
    /// </summary>
    [pbr::OriginalName("HOOK_AFTER_PASS_INSTALL")] HookAfterPassInstall = 64,
    /// <summary>
    /// A hook event occurs after pass has been uninstalled from mobile.
    /// </summary>
    [pbr::OriginalName("HOOK_AFTER_PASS_UNINSTALL")] HookAfterPassUninstall = 128,
    /// <summary>
    /// A hook event occurs before pass holder's record is updated on PassKit.
    /// </summary>
    [pbr::OriginalName("HOOK_BEFORE_OBJECT_RECORD_UPDATE")] HookBeforeObjectRecordUpdate = 256,
    /// <summary>
    /// A hook event occurs after pass holder's record is updated on PassKit.
    /// </summary>
    [pbr::OriginalName("HOOK_AFTER_OBJECT_RECORD_UPDATE")] HookAfterObjectRecordUpdate = 512,
    /// <summary>
    /// A hook event occurs before the pass is updated. This includes changes in dynamic information (e.g. displayName), generic information (e.g. links, legal disclaimer), pass design (e.g. background color).
    /// </summary>
    [pbr::OriginalName("HOOK_BEFORE_PASS_RECORD_UPDATE")] HookBeforePassRecordUpdate = 1024,
    /// <summary>
    /// A hook event occurs after the pass is updated. This includes changes in dynamic information (e.g. displayName), generic information (e.g. links, legal disclaimer), pass design (e.g. background color).
    /// </summary>
    [pbr::OriginalName("HOOK_AFTER_PASS_RECORD_UPDATE")] HookAfterPassRecordUpdate = 2048,
    /// <summary>
    /// A hook event occurs before the information on the pass is updated.
    /// </summary>
    [pbr::OriginalName("HOOK_BEFORE_PASS_UPDATE")] HookBeforePassUpdate = 4096,
    /// <summary>
    /// A hook event occurs after the information on the pass is updated.
    /// </summary>
    [pbr::OriginalName("HOOK_AFTER_PASS_UPDATE")] HookAfterPassUpdate = 8192,
    /// <summary>
    /// A hook event occurs before a pass is deleted.
    /// </summary>
    [pbr::OriginalName("HOOK_BEFORE_PASS_RECORD_DELETE")] HookBeforePassRecordDelete = 16384,
    /// <summary>
    /// A hook event occurs after a pass is deleted.
    /// </summary>
    [pbr::OriginalName("HOOK_AFTER_PASS_RECORD_DELETE")] HookAfterPassRecordDelete = 32768,
  }

  /// <summary>
  /// Name of pass event the third part app can subscribe to.
  /// </summary>
  public enum PassEventId {
    /// <summary>
    /// The pass payload will not be sent.
    /// </summary>
    [pbr::OriginalName("PASS_EVENT_NONE")] PassEventNone = 0,
    /// <summary>
    /// The pass payload will be sent to destination when pass record is created and issued.
    /// </summary>
    [pbr::OriginalName("PASS_EVENT_RECORD_CREATED")] PassEventRecordCreated = 1,
    /// <summary>
    /// The pass payload will be sent to destination when pass is installed on a mobile device.
    /// </summary>
    [pbr::OriginalName("PASS_EVENT_INSTALLED")] PassEventInstalled = 2,
    /// <summary>
    /// The pass payload will be sent to destination when pass record or contents have been updated.
    /// </summary>
    [pbr::OriginalName("PASS_EVENT_RECORD_UPDATED")] PassEventRecordUpdated = 4,
    /// <summary>
    /// The pass payload will be sent to destination when pass is uninstalled from a mobile device.
    /// </summary>
    [pbr::OriginalName("PASS_EVENT_UNINSTALLED")] PassEventUninstalled = 8,
    /// <summary>
    /// The pass payload will be sent to destination when pass is invalidated or expired. When pass is invalidated or expired, a pass will lose its barcode and pass content cannot be updated anymore.
    /// </summary>
    [pbr::OriginalName("PASS_EVENT_INVALIDATED")] PassEventInvalidated = 16,
    /// <summary>
    /// The pass payload will be sent to destination when pass record is deleted from the PassKit database.
    /// </summary>
    [pbr::OriginalName("PASS_EVENT_RECORD_DELETED")] PassEventRecordDeleted = 32,
  }

  /// <summary>
  /// Protocol specific events for the Membership protocol.
  /// </summary>
  public enum MembershipEventId {
    [pbr::OriginalName("MEMBER_EVENT_NONE")] MemberEventNone = 0,
    /// <summary>
    /// The member payload will be sent to destination when member record is created.
    /// </summary>
    [pbr::OriginalName("MEMBER_EVENT_ENROLLED")] MemberEventEnrolled = 1,
    /// <summary>
    /// The member payload will be sent to destination when any of member field is updated.
    /// </summary>
    [pbr::OriginalName("MEMBER_EVENT_UPDATED")] MemberEventUpdated = 2,
  }

  /// <summary>
  /// Protocol specific events for the Single Use Coupon protocol.
  /// </summary>
  public enum CouponEventId {
    [pbr::OriginalName("COUPON_EVENT_NONE")] CouponEventNone = 0,
    /// <summary>
    /// Triggered when coupon is issued.
    /// </summary>
    [pbr::OriginalName("COUPON_EVENT_CREATED")] CouponEventCreated = 1,
    /// <summary>
    /// Triggered when coupon is redeemed.
    /// </summary>
    [pbr::OriginalName("COUPON_EVENT_REDEEMED")] CouponEventRedeemed = 2,
    /// <summary>
    /// Triggered when any of coupon field is updated.
    /// </summary>
    [pbr::OriginalName("COUPON_EVENT_UPDATED")] CouponEventUpdated = 4,
    /// <summary>
    /// Triggered when coupon record is deleted.
    /// </summary>
    [pbr::OriginalName("COUPON_EVENT_DELETED")] CouponEventDeleted = 8,
  }

  /// <summary>
  /// Action method is an api call method (post, put, delete) used when data get integrated with the third party application.
  /// This enum will be useful if topic is not directly produced by debezium and want to know the original debezium event operation.
  /// </summary>
  public enum ActionMethod {
    [pbr::OriginalName("METHOD_NONE")] MethodNone = 0,
    /// <summary>
    /// Invokes POST request to create a record the third party app.
    /// </summary>
    [pbr::OriginalName("METHOD_POST")] MethodPost = 1,
    /// <summary>
    /// Invokes PUT request to update existing record on the third party app.
    /// </summary>
    [pbr::OriginalName("METHOD_PUT")] MethodPut = 2,
    /// <summary>
    /// Invokes DELETE request to delete existing record on the third party app.
    /// </summary>
    [pbr::OriginalName("METHOD_DELETE")] MethodDelete = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Array of subscribing membership protocol events.
  /// </summary>
  public sealed partial class MembershipEventIds : pb::IMessage<MembershipEventIds> {
    private static readonly pb::MessageParser<MembershipEventIds> _parser = new pb::MessageParser<MembershipEventIds>(() => new MembershipEventIds());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MembershipEventIds> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PKIo.IntegrationReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MembershipEventIds() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MembershipEventIds(MembershipEventIds other) : this() {
      ids_ = other.ids_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MembershipEventIds Clone() {
      return new MembershipEventIds(this);
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PKIo.MembershipEventId> _repeated_ids_codec
        = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::PKIo.MembershipEventId) x);
    private readonly pbc::RepeatedField<global::PKIo.MembershipEventId> ids_ = new pbc::RepeatedField<global::PKIo.MembershipEventId>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PKIo.MembershipEventId> Ids {
      get { return ids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MembershipEventIds);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MembershipEventIds other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ids_.Equals(other.ids_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ids_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ids_.WriteTo(output, _repeated_ids_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ids_.CalculateSize(_repeated_ids_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MembershipEventIds other) {
      if (other == null) {
        return;
      }
      ids_.Add(other.ids_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Array of subscribing coupon protocol events.
  /// </summary>
  public sealed partial class CouponEventIds : pb::IMessage<CouponEventIds> {
    private static readonly pb::MessageParser<CouponEventIds> _parser = new pb::MessageParser<CouponEventIds>(() => new CouponEventIds());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CouponEventIds> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PKIo.IntegrationReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CouponEventIds() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CouponEventIds(CouponEventIds other) : this() {
      ids_ = other.ids_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CouponEventIds Clone() {
      return new CouponEventIds(this);
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PKIo.CouponEventId> _repeated_ids_codec
        = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::PKIo.CouponEventId) x);
    private readonly pbc::RepeatedField<global::PKIo.CouponEventId> ids_ = new pbc::RepeatedField<global::PKIo.CouponEventId>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PKIo.CouponEventId> Ids {
      get { return ids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CouponEventIds);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CouponEventIds other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ids_.Equals(other.ids_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ids_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ids_.WriteTo(output, _repeated_ids_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ids_.CalculateSize(_repeated_ids_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CouponEventIds other) {
      if (other == null) {
        return;
      }
      ids_.Add(other.ids_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Integration object contains configuration data to integrate PassKit application with third party application.
  /// </summary>
  public sealed partial class IntegrationConfigs : pb::IMessage<IntegrationConfigs> {
    private static readonly pb::MessageParser<IntegrationConfigs> _parser = new pb::MessageParser<IntegrationConfigs>(() => new IntegrationConfigs());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IntegrationConfigs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PKIo.IntegrationReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntegrationConfigs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntegrationConfigs(IntegrationConfigs other) : this() {
      classId_ = other.classId_;
      configurations_ = other.configurations_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntegrationConfigs Clone() {
      return new IntegrationConfigs(this);
    }

    /// <summary>Field number for the "classId" field.</summary>
    public const int ClassIdFieldNumber = 1;
    private string classId_ = "";
    /// <summary>
    /// The uuid for the class object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClassId {
      get { return classId_; }
      set {
        classId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "configurations" field.</summary>
    public const int ConfigurationsFieldNumber = 2;
    private static readonly pbc::MapField<int, string>.Codec _map_configurations_codec
        = new pbc::MapField<int, string>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForString(18, ""), 18);
    private readonly pbc::MapField<int, string> configurations_ = new pbc::MapField<int, string>();
    /// <summary>
    /// Key string is enum of ConfigurationType (e.g. WEBHOOK, DB_MYSQL, ZOHO). Value string is a json string of configuration object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, string> Configurations {
      get { return configurations_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IntegrationConfigs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IntegrationConfigs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClassId != other.ClassId) return false;
      if (!Configurations.Equals(other.Configurations)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClassId.Length != 0) hash ^= ClassId.GetHashCode();
      hash ^= Configurations.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClassId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClassId);
      }
      configurations_.WriteTo(output, _map_configurations_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClassId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassId);
      }
      size += configurations_.CalculateSize(_map_configurations_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IntegrationConfigs other) {
      if (other == null) {
        return;
      }
      if (other.ClassId.Length != 0) {
        ClassId = other.ClassId;
      }
      configurations_.Add(other.configurations_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClassId = input.ReadString();
            break;
          }
          case 18: {
            configurations_.AddEntriesFrom(input, _map_configurations_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProtocolIdInput : pb::IMessage<ProtocolIdInput> {
    private static readonly pb::MessageParser<ProtocolIdInput> _parser = new pb::MessageParser<ProtocolIdInput>(() => new ProtocolIdInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtocolIdInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PKIo.IntegrationReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtocolIdInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtocolIdInput(ProtocolIdInput other) : this() {
      protocol_ = other.protocol_;
      classId_ = other.classId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtocolIdInput Clone() {
      return new ProtocolIdInput(this);
    }

    /// <summary>Field number for the "protocol" field.</summary>
    public const int ProtocolFieldNumber = 1;
    private global::PKIo.PassProtocol protocol_ = global::PKIo.PassProtocol.DoNotUse;
    /// <summary>
    /// The protocol which the class object belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKIo.PassProtocol Protocol {
      get { return protocol_; }
      set {
        protocol_ = value;
      }
    }

    /// <summary>Field number for the "classId" field.</summary>
    public const int ClassIdFieldNumber = 2;
    private string classId_ = "";
    /// <summary>
    /// The class object Id which integration belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClassId {
      get { return classId_; }
      set {
        classId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtocolIdInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtocolIdInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Protocol != other.Protocol) return false;
      if (ClassId != other.ClassId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Protocol != global::PKIo.PassProtocol.DoNotUse) hash ^= Protocol.GetHashCode();
      if (ClassId.Length != 0) hash ^= ClassId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Protocol != global::PKIo.PassProtocol.DoNotUse) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Protocol);
      }
      if (ClassId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClassId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Protocol != global::PKIo.PassProtocol.DoNotUse) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Protocol);
      }
      if (ClassId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtocolIdInput other) {
      if (other == null) {
        return;
      }
      if (other.Protocol != global::PKIo.PassProtocol.DoNotUse) {
        Protocol = other.Protocol;
      }
      if (other.ClassId.Length != 0) {
        ClassId = other.ClassId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Protocol = (global::PKIo.PassProtocol) input.ReadEnum();
            break;
          }
          case 18: {
            ClassId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SubscriptionRequest : pb::IMessage<SubscriptionRequest> {
    private static readonly pb::MessageParser<SubscriptionRequest> _parser = new pb::MessageParser<SubscriptionRequest>(() => new SubscriptionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubscriptionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PKIo.IntegrationReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscriptionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscriptionRequest(SubscriptionRequest other) : this() {
      protocol_ = other.protocol_;
      subscriptionId_ = other.subscriptionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscriptionRequest Clone() {
      return new SubscriptionRequest(this);
    }

    /// <summary>Field number for the "protocol" field.</summary>
    public const int ProtocolFieldNumber = 1;
    private global::PKIo.PassProtocol protocol_ = global::PKIo.PassProtocol.DoNotUse;
    /// <summary>
    /// The protocol which the class object belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKIo.PassProtocol Protocol {
      get { return protocol_; }
      set {
        protocol_ = value;
      }
    }

    /// <summary>Field number for the "subscriptionId" field.</summary>
    public const int SubscriptionIdFieldNumber = 2;
    private string subscriptionId_ = "";
    /// <summary>
    /// The class object Id which integration belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubscriptionId {
      get { return subscriptionId_; }
      set {
        subscriptionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubscriptionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubscriptionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Protocol != other.Protocol) return false;
      if (SubscriptionId != other.SubscriptionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Protocol != global::PKIo.PassProtocol.DoNotUse) hash ^= Protocol.GetHashCode();
      if (SubscriptionId.Length != 0) hash ^= SubscriptionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Protocol != global::PKIo.PassProtocol.DoNotUse) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Protocol);
      }
      if (SubscriptionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SubscriptionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Protocol != global::PKIo.PassProtocol.DoNotUse) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Protocol);
      }
      if (SubscriptionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubscriptionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubscriptionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Protocol != global::PKIo.PassProtocol.DoNotUse) {
        Protocol = other.Protocol;
      }
      if (other.SubscriptionId.Length != 0) {
        SubscriptionId = other.SubscriptionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Protocol = (global::PKIo.PassProtocol) input.ReadEnum();
            break;
          }
          case 18: {
            SubscriptionId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Sets up source and destination field
  /// </summary>
  public sealed partial class FieldMapping : pb::IMessage<FieldMapping> {
    private static readonly pb::MessageParser<FieldMapping> _parser = new pb::MessageParser<FieldMapping>(() => new FieldMapping());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FieldMapping> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PKIo.IntegrationReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldMapping() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldMapping(FieldMapping other) : this() {
      destinationFieldKey_ = other.destinationFieldKey_;
      destinationFieldDataType_ = other.destinationFieldDataType_;
      isRequired_ = other.isRequired_;
      sourceFieldUniqueName_ = other.sourceFieldUniqueName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldMapping Clone() {
      return new FieldMapping(this);
    }

    /// <summary>Field number for the "destinationFieldKey" field.</summary>
    public const int DestinationFieldKeyFieldNumber = 1;
    private string destinationFieldKey_ = "";
    /// <summary>
    /// Field string key of destination data field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DestinationFieldKey {
      get { return destinationFieldKey_; }
      set {
        destinationFieldKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "destinationFieldDataType" field.</summary>
    public const int DestinationFieldDataTypeFieldNumber = 2;
    private global::PKIo.DataType destinationFieldDataType_ = global::PKIo.DataType.None;
    /// <summary>
    /// Field string key of destination data field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKIo.DataType DestinationFieldDataType {
      get { return destinationFieldDataType_; }
      set {
        destinationFieldDataType_ = value;
      }
    }

    /// <summary>Field number for the "isRequired" field.</summary>
    public const int IsRequiredFieldNumber = 3;
    private bool isRequired_;
    /// <summary>
    /// If true, when value is empty default data will be used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRequired {
      get { return isRequired_; }
      set {
        isRequired_ = value;
      }
    }

    /// <summary>Field number for the "sourceFieldUniqueName" field.</summary>
    public const int SourceFieldUniqueNameFieldNumber = 4;
    private string sourceFieldUniqueName_ = "";
    /// <summary>
    /// Unique name of data field which becomes the data source.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SourceFieldUniqueName {
      get { return sourceFieldUniqueName_; }
      set {
        sourceFieldUniqueName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FieldMapping);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FieldMapping other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DestinationFieldKey != other.DestinationFieldKey) return false;
      if (DestinationFieldDataType != other.DestinationFieldDataType) return false;
      if (IsRequired != other.IsRequired) return false;
      if (SourceFieldUniqueName != other.SourceFieldUniqueName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DestinationFieldKey.Length != 0) hash ^= DestinationFieldKey.GetHashCode();
      if (DestinationFieldDataType != global::PKIo.DataType.None) hash ^= DestinationFieldDataType.GetHashCode();
      if (IsRequired != false) hash ^= IsRequired.GetHashCode();
      if (SourceFieldUniqueName.Length != 0) hash ^= SourceFieldUniqueName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DestinationFieldKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DestinationFieldKey);
      }
      if (DestinationFieldDataType != global::PKIo.DataType.None) {
        output.WriteRawTag(16);
        output.WriteEnum((int) DestinationFieldDataType);
      }
      if (IsRequired != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsRequired);
      }
      if (SourceFieldUniqueName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SourceFieldUniqueName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DestinationFieldKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DestinationFieldKey);
      }
      if (DestinationFieldDataType != global::PKIo.DataType.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DestinationFieldDataType);
      }
      if (IsRequired != false) {
        size += 1 + 1;
      }
      if (SourceFieldUniqueName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceFieldUniqueName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FieldMapping other) {
      if (other == null) {
        return;
      }
      if (other.DestinationFieldKey.Length != 0) {
        DestinationFieldKey = other.DestinationFieldKey;
      }
      if (other.DestinationFieldDataType != global::PKIo.DataType.None) {
        DestinationFieldDataType = other.DestinationFieldDataType;
      }
      if (other.IsRequired != false) {
        IsRequired = other.IsRequired;
      }
      if (other.SourceFieldUniqueName.Length != 0) {
        SourceFieldUniqueName = other.SourceFieldUniqueName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DestinationFieldKey = input.ReadString();
            break;
          }
          case 16: {
            DestinationFieldDataType = (global::PKIo.DataType) input.ReadEnum();
            break;
          }
          case 24: {
            IsRequired = input.ReadBool();
            break;
          }
          case 34: {
            SourceFieldUniqueName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WebhookConfig : pb::IMessage<WebhookConfig> {
    private static readonly pb::MessageParser<WebhookConfig> _parser = new pb::MessageParser<WebhookConfig>(() => new WebhookConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WebhookConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PKIo.IntegrationReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WebhookConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WebhookConfig(WebhookConfig other) : this() {
      targetUrl_ = other.targetUrl_;
      actionMethod_ = other.actionMethod_;
      fieldMapping_ = other.fieldMapping_ != null ? other.fieldMapping_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WebhookConfig Clone() {
      return new WebhookConfig(this);
    }

    /// <summary>Field number for the "targetUrl" field.</summary>
    public const int TargetUrlFieldNumber = 1;
    private string targetUrl_ = "";
    /// <summary>
    /// The destination url for PassKit backend to send the data to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetUrl {
      get { return targetUrl_; }
      set {
        targetUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "actionMethod" field.</summary>
    public const int ActionMethodFieldNumber = 2;
    private global::PKIo.ActionMethod actionMethod_ = global::PKIo.ActionMethod.MethodNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKIo.ActionMethod ActionMethod {
      get { return actionMethod_; }
      set {
        actionMethod_ = value;
      }
    }

    /// <summary>Field number for the "fieldMapping" field.</summary>
    public const int FieldMappingFieldNumber = 3;
    private global::PKIo.FieldMapping fieldMapping_;
    /// <summary>
    /// Set source fields (fields used within the PassKit platform) and destination fields (fields set on the third party app).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKIo.FieldMapping FieldMapping {
      get { return fieldMapping_; }
      set {
        fieldMapping_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WebhookConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WebhookConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetUrl != other.TargetUrl) return false;
      if (ActionMethod != other.ActionMethod) return false;
      if (!object.Equals(FieldMapping, other.FieldMapping)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetUrl.Length != 0) hash ^= TargetUrl.GetHashCode();
      if (ActionMethod != global::PKIo.ActionMethod.MethodNone) hash ^= ActionMethod.GetHashCode();
      if (fieldMapping_ != null) hash ^= FieldMapping.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetUrl.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TargetUrl);
      }
      if (ActionMethod != global::PKIo.ActionMethod.MethodNone) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ActionMethod);
      }
      if (fieldMapping_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(FieldMapping);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetUrl);
      }
      if (ActionMethod != global::PKIo.ActionMethod.MethodNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActionMethod);
      }
      if (fieldMapping_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FieldMapping);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WebhookConfig other) {
      if (other == null) {
        return;
      }
      if (other.TargetUrl.Length != 0) {
        TargetUrl = other.TargetUrl;
      }
      if (other.ActionMethod != global::PKIo.ActionMethod.MethodNone) {
        ActionMethod = other.ActionMethod;
      }
      if (other.fieldMapping_ != null) {
        if (fieldMapping_ == null) {
          FieldMapping = new global::PKIo.FieldMapping();
        }
        FieldMapping.MergeFrom(other.FieldMapping);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TargetUrl = input.ReadString();
            break;
          }
          case 16: {
            ActionMethod = (global::PKIo.ActionMethod) input.ReadEnum();
            break;
          }
          case 26: {
            if (fieldMapping_ == null) {
              FieldMapping = new global::PKIo.FieldMapping();
            }
            input.ReadMessage(FieldMapping);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SinkSubscriptionPayload : pb::IMessage<SinkSubscriptionPayload> {
    private static readonly pb::MessageParser<SinkSubscriptionPayload> _parser = new pb::MessageParser<SinkSubscriptionPayload>(() => new SinkSubscriptionPayload());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SinkSubscriptionPayload> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PKIo.IntegrationReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SinkSubscriptionPayload() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SinkSubscriptionPayload(SinkSubscriptionPayload other) : this() {
      event_ = other.event_;
      pass_ = other.pass_ != null ? other.pass_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SinkSubscriptionPayload Clone() {
      return new SinkSubscriptionPayload(this);
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 1;
    private string event_ = "";
    /// <summary>
    /// PassEventId enum string to identify trigger event type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Event {
      get { return event_; }
      set {
        event_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pass" field.</summary>
    public const int PassFieldNumber = 2;
    private global::PKIo.Pass pass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKIo.Pass Pass {
      get { return pass_; }
      set {
        pass_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SinkSubscriptionPayload);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SinkSubscriptionPayload other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Event != other.Event) return false;
      if (!object.Equals(Pass, other.Pass)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Event.Length != 0) hash ^= Event.GetHashCode();
      if (pass_ != null) hash ^= Pass.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Event.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Event);
      }
      if (pass_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pass);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Event.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Event);
      }
      if (pass_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pass);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SinkSubscriptionPayload other) {
      if (other == null) {
        return;
      }
      if (other.Event.Length != 0) {
        Event = other.Event;
      }
      if (other.pass_ != null) {
        if (pass_ == null) {
          Pass = new global::PKIo.Pass();
        }
        Pass.MergeFrom(other.Pass);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Event = input.ReadString();
            break;
          }
          case 18: {
            if (pass_ == null) {
              Pass = new global::PKIo.Pass();
            }
            input.ReadMessage(Pass);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SinkSubscription : pb::IMessage<SinkSubscription> {
    private static readonly pb::MessageParser<SinkSubscription> _parser = new pb::MessageParser<SinkSubscription>(() => new SinkSubscription());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SinkSubscription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PKIo.IntegrationReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SinkSubscription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SinkSubscription(SinkSubscription other) : this() {
      id_ = other.id_;
      classId_ = other.classId_;
      protocol_ = other.protocol_;
      passEventId_ = other.passEventId_.Clone();
      status_ = other.status_;
      configType_ = other.configType_;
      configuration_ = other.configuration_;
      createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
      updatedAt_ = other.updatedAt_ != null ? other.updatedAt_.Clone() : null;
      switch (other.ProtocolEventIdCase) {
        case ProtocolEventIdOneofCase.MembershipEvents:
          MembershipEvents = other.MembershipEvents.Clone();
          break;
        case ProtocolEventIdOneofCase.CouponEvents:
          CouponEvents = other.CouponEvents.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SinkSubscription Clone() {
      return new SinkSubscription(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// The uuid for the sink subscription config.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "classId" field.</summary>
    public const int ClassIdFieldNumber = 2;
    private string classId_ = "";
    /// <summary>
    /// The uuid for the class object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClassId {
      get { return classId_; }
      set {
        classId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "protocol" field.</summary>
    public const int ProtocolFieldNumber = 3;
    private global::PKIo.PassProtocol protocol_ = global::PKIo.PassProtocol.DoNotUse;
    /// <summary>
    /// The protocol of class object which owns this sink subscription.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKIo.PassProtocol Protocol {
      get { return protocol_; }
      set {
        protocol_ = value;
      }
    }

    /// <summary>Field number for the "passEventId" field.</summary>
    public const int PassEventIdFieldNumber = 4;
    private static readonly pb::FieldCodec<global::PKIo.PassEventId> _repeated_passEventId_codec
        = pb::FieldCodec.ForEnum(34, x => (int) x, x => (global::PKIo.PassEventId) x);
    private readonly pbc::RepeatedField<global::PKIo.PassEventId> passEventId_ = new pbc::RepeatedField<global::PKIo.PassEventId>();
    /// <summary>
    /// Identifies pass event type you are subscribing to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PKIo.PassEventId> PassEventId {
      get { return passEventId_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 5;
    private global::PKIo.IntegrationStatus status_ = global::PKIo.IntegrationStatus.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKIo.IntegrationStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "configType" field.</summary>
    public const int ConfigTypeFieldNumber = 6;
    private global::PKIo.ConfigurationType configType_ = global::PKIo.ConfigurationType.ConfigurationNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKIo.ConfigurationType ConfigType {
      get { return configType_; }
      set {
        configType_ = value;
      }
    }

    /// <summary>Field number for the "configuration" field.</summary>
    public const int ConfigurationFieldNumber = 7;
    private string configuration_ = "";
    /// <summary>
    /// Configuration details for the integration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Configuration {
      get { return configuration_; }
      set {
        configuration_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "createdAt" field.</summary>
    public const int CreatedAtFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "updatedAt" field.</summary>
    public const int UpdatedAtFieldNumber = 9;
    private global::Google.Protobuf.WellKnownTypes.Timestamp updatedAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp UpdatedAt {
      get { return updatedAt_; }
      set {
        updatedAt_ = value;
      }
    }

    /// <summary>Field number for the "membershipEvents" field.</summary>
    public const int MembershipEventsFieldNumber = 10;
    /// <summary>
    /// For membership protocol subscription.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKIo.MembershipEventIds MembershipEvents {
      get { return protocolEventIdCase_ == ProtocolEventIdOneofCase.MembershipEvents ? (global::PKIo.MembershipEventIds) protocolEventId_ : null; }
      set {
        protocolEventId_ = value;
        protocolEventIdCase_ = value == null ? ProtocolEventIdOneofCase.None : ProtocolEventIdOneofCase.MembershipEvents;
      }
    }

    /// <summary>Field number for the "couponEvents" field.</summary>
    public const int CouponEventsFieldNumber = 11;
    /// <summary>
    /// For coupon protocol subscription.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKIo.CouponEventIds CouponEvents {
      get { return protocolEventIdCase_ == ProtocolEventIdOneofCase.CouponEvents ? (global::PKIo.CouponEventIds) protocolEventId_ : null; }
      set {
        protocolEventId_ = value;
        protocolEventIdCase_ = value == null ? ProtocolEventIdOneofCase.None : ProtocolEventIdOneofCase.CouponEvents;
      }
    }

    private object protocolEventId_;
    /// <summary>Enum of possible cases for the "protocolEventId" oneof.</summary>
    public enum ProtocolEventIdOneofCase {
      None = 0,
      MembershipEvents = 10,
      CouponEvents = 11,
    }
    private ProtocolEventIdOneofCase protocolEventIdCase_ = ProtocolEventIdOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtocolEventIdOneofCase ProtocolEventIdCase {
      get { return protocolEventIdCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProtocolEventId() {
      protocolEventIdCase_ = ProtocolEventIdOneofCase.None;
      protocolEventId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SinkSubscription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SinkSubscription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ClassId != other.ClassId) return false;
      if (Protocol != other.Protocol) return false;
      if(!passEventId_.Equals(other.passEventId_)) return false;
      if (Status != other.Status) return false;
      if (ConfigType != other.ConfigType) return false;
      if (Configuration != other.Configuration) return false;
      if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
      if (!object.Equals(UpdatedAt, other.UpdatedAt)) return false;
      if (!object.Equals(MembershipEvents, other.MembershipEvents)) return false;
      if (!object.Equals(CouponEvents, other.CouponEvents)) return false;
      if (ProtocolEventIdCase != other.ProtocolEventIdCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (ClassId.Length != 0) hash ^= ClassId.GetHashCode();
      if (Protocol != global::PKIo.PassProtocol.DoNotUse) hash ^= Protocol.GetHashCode();
      hash ^= passEventId_.GetHashCode();
      if (Status != global::PKIo.IntegrationStatus.None) hash ^= Status.GetHashCode();
      if (ConfigType != global::PKIo.ConfigurationType.ConfigurationNone) hash ^= ConfigType.GetHashCode();
      if (Configuration.Length != 0) hash ^= Configuration.GetHashCode();
      if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
      if (updatedAt_ != null) hash ^= UpdatedAt.GetHashCode();
      if (protocolEventIdCase_ == ProtocolEventIdOneofCase.MembershipEvents) hash ^= MembershipEvents.GetHashCode();
      if (protocolEventIdCase_ == ProtocolEventIdOneofCase.CouponEvents) hash ^= CouponEvents.GetHashCode();
      hash ^= (int) protocolEventIdCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (ClassId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClassId);
      }
      if (Protocol != global::PKIo.PassProtocol.DoNotUse) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Protocol);
      }
      passEventId_.WriteTo(output, _repeated_passEventId_codec);
      if (Status != global::PKIo.IntegrationStatus.None) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Status);
      }
      if (ConfigType != global::PKIo.ConfigurationType.ConfigurationNone) {
        output.WriteRawTag(48);
        output.WriteEnum((int) ConfigType);
      }
      if (Configuration.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Configuration);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(CreatedAt);
      }
      if (updatedAt_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(UpdatedAt);
      }
      if (protocolEventIdCase_ == ProtocolEventIdOneofCase.MembershipEvents) {
        output.WriteRawTag(82);
        output.WriteMessage(MembershipEvents);
      }
      if (protocolEventIdCase_ == ProtocolEventIdOneofCase.CouponEvents) {
        output.WriteRawTag(90);
        output.WriteMessage(CouponEvents);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (ClassId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassId);
      }
      if (Protocol != global::PKIo.PassProtocol.DoNotUse) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Protocol);
      }
      size += passEventId_.CalculateSize(_repeated_passEventId_codec);
      if (Status != global::PKIo.IntegrationStatus.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (ConfigType != global::PKIo.ConfigurationType.ConfigurationNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ConfigType);
      }
      if (Configuration.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Configuration);
      }
      if (createdAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
      }
      if (updatedAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdatedAt);
      }
      if (protocolEventIdCase_ == ProtocolEventIdOneofCase.MembershipEvents) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MembershipEvents);
      }
      if (protocolEventIdCase_ == ProtocolEventIdOneofCase.CouponEvents) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CouponEvents);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SinkSubscription other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.ClassId.Length != 0) {
        ClassId = other.ClassId;
      }
      if (other.Protocol != global::PKIo.PassProtocol.DoNotUse) {
        Protocol = other.Protocol;
      }
      passEventId_.Add(other.passEventId_);
      if (other.Status != global::PKIo.IntegrationStatus.None) {
        Status = other.Status;
      }
      if (other.ConfigType != global::PKIo.ConfigurationType.ConfigurationNone) {
        ConfigType = other.ConfigType;
      }
      if (other.Configuration.Length != 0) {
        Configuration = other.Configuration;
      }
      if (other.createdAt_ != null) {
        if (createdAt_ == null) {
          CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedAt.MergeFrom(other.CreatedAt);
      }
      if (other.updatedAt_ != null) {
        if (updatedAt_ == null) {
          UpdatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        UpdatedAt.MergeFrom(other.UpdatedAt);
      }
      switch (other.ProtocolEventIdCase) {
        case ProtocolEventIdOneofCase.MembershipEvents:
          if (MembershipEvents == null) {
            MembershipEvents = new global::PKIo.MembershipEventIds();
          }
          MembershipEvents.MergeFrom(other.MembershipEvents);
          break;
        case ProtocolEventIdOneofCase.CouponEvents:
          if (CouponEvents == null) {
            CouponEvents = new global::PKIo.CouponEventIds();
          }
          CouponEvents.MergeFrom(other.CouponEvents);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            ClassId = input.ReadString();
            break;
          }
          case 24: {
            Protocol = (global::PKIo.PassProtocol) input.ReadEnum();
            break;
          }
          case 34:
          case 32: {
            passEventId_.AddEntriesFrom(input, _repeated_passEventId_codec);
            break;
          }
          case 40: {
            Status = (global::PKIo.IntegrationStatus) input.ReadEnum();
            break;
          }
          case 48: {
            ConfigType = (global::PKIo.ConfigurationType) input.ReadEnum();
            break;
          }
          case 58: {
            Configuration = input.ReadString();
            break;
          }
          case 66: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
          case 74: {
            if (updatedAt_ == null) {
              UpdatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(UpdatedAt);
            break;
          }
          case 82: {
            global::PKIo.MembershipEventIds subBuilder = new global::PKIo.MembershipEventIds();
            if (protocolEventIdCase_ == ProtocolEventIdOneofCase.MembershipEvents) {
              subBuilder.MergeFrom(MembershipEvents);
            }
            input.ReadMessage(subBuilder);
            MembershipEvents = subBuilder;
            break;
          }
          case 90: {
            global::PKIo.CouponEventIds subBuilder = new global::PKIo.CouponEventIds();
            if (protocolEventIdCase_ == ProtocolEventIdOneofCase.CouponEvents) {
              subBuilder.MergeFrom(CouponEvents);
            }
            input.ReadMessage(subBuilder);
            CouponEvents = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
