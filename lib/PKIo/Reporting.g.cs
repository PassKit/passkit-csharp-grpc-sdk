// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: io/common/reporting.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PKIo {

  /// <summary>Holder for reflection information generated from io/common/reporting.proto</summary>
  public static partial class ReportingReflection {

    #region Descriptor
    /// <summary>File descriptor for io/common/reporting.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ReportingReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chlpby9jb21tb24vcmVwb3J0aW5nLnByb3RvEgJpbxoZaW8vY29tbW9uL3By",
            "b3RvY29scy5wcm90byLHAgoRQW5hbHl0aWNzUmVzcG9uc2USGgoGcGVyaW9k",
            "GAEgASgOMgouaW8uUGVyaW9kEg8KB2NyZWF0ZWQYAiABKA0SEQoJaW5zdGFs",
            "bGVkGAMgASgNEg8KB2RlbGV0ZWQYBCABKA0SEwoLaW52YWxpZGF0ZWQYBSAB",
            "KA0SLAoPZGV2aWNlQnJlYWtkb3duGAYgASgLMhMuaW8uRGV2aWNlQnJlYWtk",
            "b3duEkMKD3NvdXJjZUJyZWFrZG93bhgHIAMoCzIqLmlvLkFuYWx5dGljc1Jl",
            "c3BvbnNlLlNvdXJjZUJyZWFrZG93bkVudHJ5EiEKBGRhdGEYCCADKAsyEy5p",
            "by5DaGFydERhdGFQb2ludHMaNgoUU291cmNlQnJlYWtkb3duRW50cnkSCwoD",
            "a2V5GAEgASgJEg0KBXZhbHVlGAIgASgNOgI4ASJOCg9EZXZpY2VCcmVha2Rv",
            "d24SEwoLYXBwbGVXYWxsZXQYASABKA0SEQoJZ29vZ2xlUGF5GAIgASgNEhMK",
            "C290aGVyV2FsbGV0GAMgASgNIooBCg9DaGFydERhdGFQb2ludHMSDAoEbmFt",
            "ZRgBIAEoCRIPCgdjcmVhdGVkGAIgASgNEhEKCWluc3RhbGxlZBgDIAEoDRIP",
            "Cgd1cGRhdGVkGAQgASgNEg8KB2RlbGV0ZWQYBSABKA0SEwoLaW52YWxpZGF0",
            "ZWQYBiABKA0SDgoGY3VzdG9tGAcgASgNIpkBChBBbmFseXRpY3NSZXF1ZXN0",
            "EiIKCHByb3RvY29sGAEgASgOMhAuaW8uUGFzc1Byb3RvY29sEg8KB2NsYXNz",
            "SWQYAiABKAkSGgoGcGVyaW9kGAMgASgOMgouaW8uUGVyaW9kEhEKCXN0YXJ0",
            "RGF0ZRgEIAEoCRIPCgdlbmREYXRlGAUgASgJEhAKCHRpbWV6b25lGAYgASgJ",
            "KiYKBlBlcmlvZBIHCgNEQVkQABIJCgVNT05USBABEggKBFlFQVIQAkI+Cg9p",
            "by5wYXNza2l0LlBLaW9aJHN0YXNoLnBhc3NraXQuY29tL2lvL21vZGVsL3Nk",
            "ay9nby9pb6oCBFBLSW9iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::PKIo.ProtocolsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PKIo.Period), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PKIo.AnalyticsResponse), global::PKIo.AnalyticsResponse.Parser, new[]{ "Period", "Created", "Installed", "Deleted", "Invalidated", "DeviceBreakdown", "SourceBreakdown", "Data" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::PKIo.DeviceBreakdown), global::PKIo.DeviceBreakdown.Parser, new[]{ "AppleWallet", "GooglePay", "OtherWallet" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PKIo.ChartDataPoints), global::PKIo.ChartDataPoints.Parser, new[]{ "Name", "Created", "Installed", "Updated", "Deleted", "Invalidated", "Custom" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PKIo.AnalyticsRequest), global::PKIo.AnalyticsRequest.Parser, new[]{ "Protocol", "ClassId", "Period", "StartDate", "EndDate", "Timezone" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Period {
    /// <summary>
    /// Show individual data by day.
    /// </summary>
    [pbr::OriginalName("DAY")] Day = 0,
    /// <summary>
    /// Default response will be in months.
    /// </summary>
    [pbr::OriginalName("MONTH")] Month = 1,
    /// <summary>
    /// Show individual data by year.
    /// </summary>
    [pbr::OriginalName("YEAR")] Year = 2,
  }

  #endregion

  #region Messages
  public sealed partial class AnalyticsResponse : pb::IMessage<AnalyticsResponse> {
    private static readonly pb::MessageParser<AnalyticsResponse> _parser = new pb::MessageParser<AnalyticsResponse>(() => new AnalyticsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnalyticsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PKIo.ReportingReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyticsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyticsResponse(AnalyticsResponse other) : this() {
      period_ = other.period_;
      created_ = other.created_;
      installed_ = other.installed_;
      deleted_ = other.deleted_;
      invalidated_ = other.invalidated_;
      deviceBreakdown_ = other.deviceBreakdown_ != null ? other.deviceBreakdown_.Clone() : null;
      sourceBreakdown_ = other.sourceBreakdown_.Clone();
      data_ = other.data_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyticsResponse Clone() {
      return new AnalyticsResponse(this);
    }

    /// <summary>Field number for the "period" field.</summary>
    public const int PeriodFieldNumber = 1;
    private global::PKIo.Period period_ = global::PKIo.Period.Day;
    /// <summary>
    /// The Period that the response data is grouped by by: per DAY, MONTH or YEAR.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKIo.Period Period {
      get { return period_; }
      set {
        period_ = value;
      }
    }

    /// <summary>Field number for the "created" field.</summary>
    public const int CreatedFieldNumber = 2;
    private uint created_;
    /// <summary>
    /// Total number of passes created during the requested period.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Created {
      get { return created_; }
      set {
        created_ = value;
      }
    }

    /// <summary>Field number for the "installed" field.</summary>
    public const int InstalledFieldNumber = 3;
    private uint installed_;
    /// <summary>
    /// Total number of passes installed during the requested period.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Installed {
      get { return installed_; }
      set {
        installed_ = value;
      }
    }

    /// <summary>Field number for the "deleted" field.</summary>
    public const int DeletedFieldNumber = 4;
    private uint deleted_;
    /// <summary>
    /// Total number of passes deleted during the requested period.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Deleted {
      get { return deleted_; }
      set {
        deleted_ = value;
      }
    }

    /// <summary>Field number for the "invalidated" field.</summary>
    public const int InvalidatedFieldNumber = 5;
    private uint invalidated_;
    /// <summary>
    /// Total number of passes invalidated during the requested period.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Invalidated {
      get { return invalidated_; }
      set {
        invalidated_ = value;
      }
    }

    /// <summary>Field number for the "deviceBreakdown" field.</summary>
    public const int DeviceBreakdownFieldNumber = 6;
    private global::PKIo.DeviceBreakdown deviceBreakdown_;
    /// <summary>
    /// Total number of passes installed for each device type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKIo.DeviceBreakdown DeviceBreakdown {
      get { return deviceBreakdown_; }
      set {
        deviceBreakdown_ = value;
      }
    }

    /// <summary>Field number for the "sourceBreakdown" field.</summary>
    public const int SourceBreakdownFieldNumber = 7;
    private static readonly pbc::MapField<string, uint>.Codec _map_sourceBreakdown_codec
        = new pbc::MapField<string, uint>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForUInt32(16, 0), 58);
    private readonly pbc::MapField<string, uint> sourceBreakdown_ = new pbc::MapField<string, uint>();
    /// <summary>
    /// Total number of passes installed for each distribution source.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, uint> SourceBreakdown {
      get { return sourceBreakdown_; }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 8;
    private static readonly pb::FieldCodec<global::PKIo.ChartDataPoints> _repeated_data_codec
        = pb::FieldCodec.ForMessage(66, global::PKIo.ChartDataPoints.Parser);
    private readonly pbc::RepeatedField<global::PKIo.ChartDataPoints> data_ = new pbc::RepeatedField<global::PKIo.ChartDataPoints>();
    /// <summary>
    /// Breakdown of data by day, month or year.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PKIo.ChartDataPoints> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnalyticsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnalyticsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Period != other.Period) return false;
      if (Created != other.Created) return false;
      if (Installed != other.Installed) return false;
      if (Deleted != other.Deleted) return false;
      if (Invalidated != other.Invalidated) return false;
      if (!object.Equals(DeviceBreakdown, other.DeviceBreakdown)) return false;
      if (!SourceBreakdown.Equals(other.SourceBreakdown)) return false;
      if(!data_.Equals(other.data_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Period != global::PKIo.Period.Day) hash ^= Period.GetHashCode();
      if (Created != 0) hash ^= Created.GetHashCode();
      if (Installed != 0) hash ^= Installed.GetHashCode();
      if (Deleted != 0) hash ^= Deleted.GetHashCode();
      if (Invalidated != 0) hash ^= Invalidated.GetHashCode();
      if (deviceBreakdown_ != null) hash ^= DeviceBreakdown.GetHashCode();
      hash ^= SourceBreakdown.GetHashCode();
      hash ^= data_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Period != global::PKIo.Period.Day) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Period);
      }
      if (Created != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Created);
      }
      if (Installed != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Installed);
      }
      if (Deleted != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Deleted);
      }
      if (Invalidated != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Invalidated);
      }
      if (deviceBreakdown_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(DeviceBreakdown);
      }
      sourceBreakdown_.WriteTo(output, _map_sourceBreakdown_codec);
      data_.WriteTo(output, _repeated_data_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Period != global::PKIo.Period.Day) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Period);
      }
      if (Created != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Created);
      }
      if (Installed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Installed);
      }
      if (Deleted != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Deleted);
      }
      if (Invalidated != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Invalidated);
      }
      if (deviceBreakdown_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceBreakdown);
      }
      size += sourceBreakdown_.CalculateSize(_map_sourceBreakdown_codec);
      size += data_.CalculateSize(_repeated_data_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnalyticsResponse other) {
      if (other == null) {
        return;
      }
      if (other.Period != global::PKIo.Period.Day) {
        Period = other.Period;
      }
      if (other.Created != 0) {
        Created = other.Created;
      }
      if (other.Installed != 0) {
        Installed = other.Installed;
      }
      if (other.Deleted != 0) {
        Deleted = other.Deleted;
      }
      if (other.Invalidated != 0) {
        Invalidated = other.Invalidated;
      }
      if (other.deviceBreakdown_ != null) {
        if (deviceBreakdown_ == null) {
          DeviceBreakdown = new global::PKIo.DeviceBreakdown();
        }
        DeviceBreakdown.MergeFrom(other.DeviceBreakdown);
      }
      sourceBreakdown_.Add(other.sourceBreakdown_);
      data_.Add(other.data_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Period = (global::PKIo.Period) input.ReadEnum();
            break;
          }
          case 16: {
            Created = input.ReadUInt32();
            break;
          }
          case 24: {
            Installed = input.ReadUInt32();
            break;
          }
          case 32: {
            Deleted = input.ReadUInt32();
            break;
          }
          case 40: {
            Invalidated = input.ReadUInt32();
            break;
          }
          case 50: {
            if (deviceBreakdown_ == null) {
              DeviceBreakdown = new global::PKIo.DeviceBreakdown();
            }
            input.ReadMessage(DeviceBreakdown);
            break;
          }
          case 58: {
            sourceBreakdown_.AddEntriesFrom(input, _map_sourceBreakdown_codec);
            break;
          }
          case 66: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeviceBreakdown : pb::IMessage<DeviceBreakdown> {
    private static readonly pb::MessageParser<DeviceBreakdown> _parser = new pb::MessageParser<DeviceBreakdown>(() => new DeviceBreakdown());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeviceBreakdown> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PKIo.ReportingReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceBreakdown() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceBreakdown(DeviceBreakdown other) : this() {
      appleWallet_ = other.appleWallet_;
      googlePay_ = other.googlePay_;
      otherWallet_ = other.otherWallet_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceBreakdown Clone() {
      return new DeviceBreakdown(this);
    }

    /// <summary>Field number for the "appleWallet" field.</summary>
    public const int AppleWalletFieldNumber = 1;
    private uint appleWallet_;
    /// <summary>
    /// Total number of passes installed in Apple Wallet.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AppleWallet {
      get { return appleWallet_; }
      set {
        appleWallet_ = value;
      }
    }

    /// <summary>Field number for the "googlePay" field.</summary>
    public const int GooglePayFieldNumber = 2;
    private uint googlePay_;
    /// <summary>
    /// Total number of passes installed in Google Pay.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GooglePay {
      get { return googlePay_; }
      set {
        googlePay_ = value;
      }
    }

    /// <summary>Field number for the "otherWallet" field.</summary>
    public const int OtherWalletFieldNumber = 3;
    private uint otherWallet_;
    /// <summary>
    /// Total number of passes installed in Other Wallet.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OtherWallet {
      get { return otherWallet_; }
      set {
        otherWallet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeviceBreakdown);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeviceBreakdown other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AppleWallet != other.AppleWallet) return false;
      if (GooglePay != other.GooglePay) return false;
      if (OtherWallet != other.OtherWallet) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AppleWallet != 0) hash ^= AppleWallet.GetHashCode();
      if (GooglePay != 0) hash ^= GooglePay.GetHashCode();
      if (OtherWallet != 0) hash ^= OtherWallet.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AppleWallet != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AppleWallet);
      }
      if (GooglePay != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(GooglePay);
      }
      if (OtherWallet != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(OtherWallet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AppleWallet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AppleWallet);
      }
      if (GooglePay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GooglePay);
      }
      if (OtherWallet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OtherWallet);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeviceBreakdown other) {
      if (other == null) {
        return;
      }
      if (other.AppleWallet != 0) {
        AppleWallet = other.AppleWallet;
      }
      if (other.GooglePay != 0) {
        GooglePay = other.GooglePay;
      }
      if (other.OtherWallet != 0) {
        OtherWallet = other.OtherWallet;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AppleWallet = input.ReadUInt32();
            break;
          }
          case 16: {
            GooglePay = input.ReadUInt32();
            break;
          }
          case 24: {
            OtherWallet = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChartDataPoints : pb::IMessage<ChartDataPoints> {
    private static readonly pb::MessageParser<ChartDataPoints> _parser = new pb::MessageParser<ChartDataPoints>(() => new ChartDataPoints());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChartDataPoints> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PKIo.ReportingReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChartDataPoints() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChartDataPoints(ChartDataPoints other) : this() {
      name_ = other.name_;
      created_ = other.created_;
      installed_ = other.installed_;
      updated_ = other.updated_;
      deleted_ = other.deleted_;
      invalidated_ = other.invalidated_;
      custom_ = other.custom_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChartDataPoints Clone() {
      return new ChartDataPoints(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// ie. January, Monday
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created" field.</summary>
    public const int CreatedFieldNumber = 2;
    private uint created_;
    /// <summary>
    /// Daily, monthly or yearly total of pass created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Created {
      get { return created_; }
      set {
        created_ = value;
      }
    }

    /// <summary>Field number for the "installed" field.</summary>
    public const int InstalledFieldNumber = 3;
    private uint installed_;
    /// <summary>
    /// Daily, monthly or yearly total of pass installed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Installed {
      get { return installed_; }
      set {
        installed_ = value;
      }
    }

    /// <summary>Field number for the "updated" field.</summary>
    public const int UpdatedFieldNumber = 4;
    private uint updated_;
    /// <summary>
    /// Daily, monthly or yearly total of pass updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Updated {
      get { return updated_; }
      set {
        updated_ = value;
      }
    }

    /// <summary>Field number for the "deleted" field.</summary>
    public const int DeletedFieldNumber = 5;
    private uint deleted_;
    /// <summary>
    /// Daily, monthly or yearly total of pass deleted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Deleted {
      get { return deleted_; }
      set {
        deleted_ = value;
      }
    }

    /// <summary>Field number for the "invalidated" field.</summary>
    public const int InvalidatedFieldNumber = 6;
    private uint invalidated_;
    /// <summary>
    /// Daily, monthly or yearly total of pass invalidated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Invalidated {
      get { return invalidated_; }
      set {
        invalidated_ = value;
      }
    }

    /// <summary>Field number for the "custom" field.</summary>
    public const int CustomFieldNumber = 7;
    private uint custom_;
    /// <summary>
    /// Daily, monthly or yearly total of custom data (in case this field used by a protocol; it can put whatever is preferred in here).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Custom {
      get { return custom_; }
      set {
        custom_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChartDataPoints);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChartDataPoints other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Created != other.Created) return false;
      if (Installed != other.Installed) return false;
      if (Updated != other.Updated) return false;
      if (Deleted != other.Deleted) return false;
      if (Invalidated != other.Invalidated) return false;
      if (Custom != other.Custom) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Created != 0) hash ^= Created.GetHashCode();
      if (Installed != 0) hash ^= Installed.GetHashCode();
      if (Updated != 0) hash ^= Updated.GetHashCode();
      if (Deleted != 0) hash ^= Deleted.GetHashCode();
      if (Invalidated != 0) hash ^= Invalidated.GetHashCode();
      if (Custom != 0) hash ^= Custom.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Created != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Created);
      }
      if (Installed != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Installed);
      }
      if (Updated != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Updated);
      }
      if (Deleted != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Deleted);
      }
      if (Invalidated != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Invalidated);
      }
      if (Custom != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Custom);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Created != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Created);
      }
      if (Installed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Installed);
      }
      if (Updated != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Updated);
      }
      if (Deleted != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Deleted);
      }
      if (Invalidated != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Invalidated);
      }
      if (Custom != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Custom);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChartDataPoints other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Created != 0) {
        Created = other.Created;
      }
      if (other.Installed != 0) {
        Installed = other.Installed;
      }
      if (other.Updated != 0) {
        Updated = other.Updated;
      }
      if (other.Deleted != 0) {
        Deleted = other.Deleted;
      }
      if (other.Invalidated != 0) {
        Invalidated = other.Invalidated;
      }
      if (other.Custom != 0) {
        Custom = other.Custom;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Created = input.ReadUInt32();
            break;
          }
          case 24: {
            Installed = input.ReadUInt32();
            break;
          }
          case 32: {
            Updated = input.ReadUInt32();
            break;
          }
          case 40: {
            Deleted = input.ReadUInt32();
            break;
          }
          case 48: {
            Invalidated = input.ReadUInt32();
            break;
          }
          case 56: {
            Custom = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AnalyticsRequest : pb::IMessage<AnalyticsRequest> {
    private static readonly pb::MessageParser<AnalyticsRequest> _parser = new pb::MessageParser<AnalyticsRequest>(() => new AnalyticsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnalyticsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PKIo.ReportingReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyticsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyticsRequest(AnalyticsRequest other) : this() {
      protocol_ = other.protocol_;
      classId_ = other.classId_;
      period_ = other.period_;
      startDate_ = other.startDate_;
      endDate_ = other.endDate_;
      timezone_ = other.timezone_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnalyticsRequest Clone() {
      return new AnalyticsRequest(this);
    }

    /// <summary>Field number for the "protocol" field.</summary>
    public const int ProtocolFieldNumber = 1;
    private global::PKIo.PassProtocol protocol_ = global::PKIo.PassProtocol.DoNotUse;
    /// <summary>
    /// The protocol that you are requesting analytics for, i.e. MEMBERSHIP, SINGLE_USE_COUPON, EVENT_TICKETS, FLIGHTS, etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKIo.PassProtocol Protocol {
      get { return protocol_; }
      set {
        protocol_ = value;
      }
    }

    /// <summary>Field number for the "classId" field.</summary>
    public const int ClassIdFieldNumber = 2;
    private string classId_ = "";
    /// <summary>
    /// The ID of the highest level element in the protocol. For Membership this is the Program ID, for coupons this is the Campaign ID, For Event Tickets this is Production.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClassId {
      get { return classId_; }
      set {
        classId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "period" field.</summary>
    public const int PeriodFieldNumber = 3;
    private global::PKIo.Period period_ = global::PKIo.Period.Day;
    /// <summary>
    /// The Period to group the response data by: per DAY, MONTH or YEAR.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKIo.Period Period {
      get { return period_; }
      set {
        period_ = value;
      }
    }

    /// <summary>Field number for the "startDate" field.</summary>
    public const int StartDateFieldNumber = 4;
    private string startDate_ = "";
    /// <summary>
    /// Start date sets the oldest date of the data to be shown.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StartDate {
      get { return startDate_; }
      set {
        startDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "endDate" field.</summary>
    public const int EndDateFieldNumber = 5;
    private string endDate_ = "";
    /// <summary>
    /// End date sets the latest date of the data to be shown.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EndDate {
      get { return endDate_; }
      set {
        endDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timezone" field.</summary>
    public const int TimezoneFieldNumber = 6;
    private string timezone_ = "";
    /// <summary>
    /// Timezone in IANA format; defaults to UTC if not provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timezone {
      get { return timezone_; }
      set {
        timezone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnalyticsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnalyticsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Protocol != other.Protocol) return false;
      if (ClassId != other.ClassId) return false;
      if (Period != other.Period) return false;
      if (StartDate != other.StartDate) return false;
      if (EndDate != other.EndDate) return false;
      if (Timezone != other.Timezone) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Protocol != global::PKIo.PassProtocol.DoNotUse) hash ^= Protocol.GetHashCode();
      if (ClassId.Length != 0) hash ^= ClassId.GetHashCode();
      if (Period != global::PKIo.Period.Day) hash ^= Period.GetHashCode();
      if (StartDate.Length != 0) hash ^= StartDate.GetHashCode();
      if (EndDate.Length != 0) hash ^= EndDate.GetHashCode();
      if (Timezone.Length != 0) hash ^= Timezone.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Protocol != global::PKIo.PassProtocol.DoNotUse) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Protocol);
      }
      if (ClassId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClassId);
      }
      if (Period != global::PKIo.Period.Day) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Period);
      }
      if (StartDate.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(StartDate);
      }
      if (EndDate.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(EndDate);
      }
      if (Timezone.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Timezone);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Protocol != global::PKIo.PassProtocol.DoNotUse) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Protocol);
      }
      if (ClassId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassId);
      }
      if (Period != global::PKIo.Period.Day) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Period);
      }
      if (StartDate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StartDate);
      }
      if (EndDate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EndDate);
      }
      if (Timezone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timezone);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnalyticsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Protocol != global::PKIo.PassProtocol.DoNotUse) {
        Protocol = other.Protocol;
      }
      if (other.ClassId.Length != 0) {
        ClassId = other.ClassId;
      }
      if (other.Period != global::PKIo.Period.Day) {
        Period = other.Period;
      }
      if (other.StartDate.Length != 0) {
        StartDate = other.StartDate;
      }
      if (other.EndDate.Length != 0) {
        EndDate = other.EndDate;
      }
      if (other.Timezone.Length != 0) {
        Timezone = other.Timezone;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Protocol = (global::PKIo.PassProtocol) input.ReadEnum();
            break;
          }
          case 18: {
            ClassId = input.ReadString();
            break;
          }
          case 24: {
            Period = (global::PKIo.Period) input.ReadEnum();
            break;
          }
          case 34: {
            StartDate = input.ReadString();
            break;
          }
          case 42: {
            EndDate = input.ReadString();
            break;
          }
          case 50: {
            Timezone = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
