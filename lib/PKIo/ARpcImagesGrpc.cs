// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: io/core/a_rpc_images.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace PKIo {
  public static partial class Images
  {
    static readonly string __ServiceName = "io.Images";

    static readonly grpc::Marshaller<global::PKIo.ProfileImageInput> __Marshaller_io_ProfileImageInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PKIo.ProfileImageInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::PKIo.Url> __Marshaller_io_Url = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PKIo.Url.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::PKIo.Id> __Marshaller_io_Id = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PKIo.Id.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::PKIo.CreateImageInput> __Marshaller_io_CreateImageInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PKIo.CreateImageInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::PKIo.ImageIds> __Marshaller_io_ImageIds = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PKIo.ImageIds.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::PKIo.UpdateImageInput> __Marshaller_io_UpdateImageInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PKIo.UpdateImageInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::PKIo.ImageRecord> __Marshaller_io_ImageRecord = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PKIo.ImageRecord.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::PKIo.ImageBundle> __Marshaller_io_ImageBundle = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PKIo.ImageBundle.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::PKIo.LocalizedImageInput> __Marshaller_io_LocalizedImageInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PKIo.LocalizedImageInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::PKIo.Pagination> __Marshaller_io_Pagination = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PKIo.Pagination.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::PKIo.Count> __Marshaller_io_Count = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PKIo.Count.Parser.ParseFrom);

    static readonly grpc::Method<global::PKIo.ProfileImageInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_setProfileImage = new grpc::Method<global::PKIo.ProfileImageInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "setProfileImage",
        __Marshaller_io_ProfileImageInput,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::PKIo.Url> __Method_getProfileImage = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::PKIo.Url>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getProfileImage",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_io_Url);

    static readonly grpc::Method<global::PKIo.Id, global::PKIo.Url> __Method_getProfileImageById = new grpc::Method<global::PKIo.Id, global::PKIo.Url>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getProfileImageById",
        __Marshaller_io_Id,
        __Marshaller_io_Url);

    static readonly grpc::Method<global::PKIo.CreateImageInput, global::PKIo.ImageIds> __Method_createImages = new grpc::Method<global::PKIo.CreateImageInput, global::PKIo.ImageIds>(
        grpc::MethodType.Unary,
        __ServiceName,
        "createImages",
        __Marshaller_io_CreateImageInput,
        __Marshaller_io_ImageIds);

    static readonly grpc::Method<global::PKIo.UpdateImageInput, global::PKIo.ImageRecord> __Method_updateImage = new grpc::Method<global::PKIo.UpdateImageInput, global::PKIo.ImageRecord>(
        grpc::MethodType.Unary,
        __ServiceName,
        "updateImage",
        __Marshaller_io_UpdateImageInput,
        __Marshaller_io_ImageRecord);

    static readonly grpc::Method<global::PKIo.Id, global::PKIo.Url> __Method_getImageURL = new grpc::Method<global::PKIo.Id, global::PKIo.Url>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getImageURL",
        __Marshaller_io_Id,
        __Marshaller_io_Url);

    static readonly grpc::Method<global::PKIo.Id, global::PKIo.ImageBundle> __Method_getImageBundle = new grpc::Method<global::PKIo.Id, global::PKIo.ImageBundle>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getImageBundle",
        __Marshaller_io_Id,
        __Marshaller_io_ImageBundle);

    static readonly grpc::Method<global::PKIo.Id, global::PKIo.ImageRecord> __Method_getImageData = new grpc::Method<global::PKIo.Id, global::PKIo.ImageRecord>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getImageData",
        __Marshaller_io_Id,
        __Marshaller_io_ImageRecord);

    static readonly grpc::Method<global::PKIo.LocalizedImageInput, global::PKIo.Url> __Method_getLocalizedImageURL = new grpc::Method<global::PKIo.LocalizedImageInput, global::PKIo.Url>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getLocalizedImageURL",
        __Marshaller_io_LocalizedImageInput,
        __Marshaller_io_Url);

    static readonly grpc::Method<global::PKIo.Id, global::Google.Protobuf.WellKnownTypes.Empty> __Method_deleteImage = new grpc::Method<global::PKIo.Id, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "deleteImage",
        __Marshaller_io_Id,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::PKIo.LocalizedImageInput, global::PKIo.ImageRecord> __Method_deleteLocalizedImage = new grpc::Method<global::PKIo.LocalizedImageInput, global::PKIo.ImageRecord>(
        grpc::MethodType.Unary,
        __ServiceName,
        "deleteLocalizedImage",
        __Marshaller_io_LocalizedImageInput,
        __Marshaller_io_ImageRecord);

    static readonly grpc::Method<global::PKIo.Pagination, global::PKIo.ImageRecord> __Method_listImagesForUser = new grpc::Method<global::PKIo.Pagination, global::PKIo.ImageRecord>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "listImagesForUser",
        __Marshaller_io_Pagination,
        __Marshaller_io_ImageRecord);

    static readonly grpc::Method<global::PKIo.Pagination, global::PKIo.ImageRecord> __Method_listImages = new grpc::Method<global::PKIo.Pagination, global::PKIo.ImageRecord>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "listImages",
        __Marshaller_io_Pagination,
        __Marshaller_io_ImageRecord);

    static readonly grpc::Method<global::PKIo.Pagination, global::PKIo.Count> __Method_countImages = new grpc::Method<global::PKIo.Pagination, global::PKIo.Count>(
        grpc::MethodType.Unary,
        __ServiceName,
        "countImages",
        __Marshaller_io_Pagination,
        __Marshaller_io_Count);

    static readonly grpc::Method<global::PKIo.Pagination, global::PKIo.Count> __Method_countImagesForUser = new grpc::Method<global::PKIo.Pagination, global::PKIo.Count>(
        grpc::MethodType.Unary,
        __ServiceName,
        "countImagesForUser",
        __Marshaller_io_Pagination,
        __Marshaller_io_Count);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::PKIo.ARpcImagesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for Images</summary>
    public partial class ImagesClient : grpc::ClientBase<ImagesClient>
    {
      /// <summary>Creates a new client for Images</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ImagesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Images that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ImagesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ImagesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ImagesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Google.Protobuf.WellKnownTypes.Empty setProfileImage(global::PKIo.ProfileImageInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return setProfileImage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty setProfileImage(global::PKIo.ProfileImageInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_setProfileImage, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> setProfileImageAsync(global::PKIo.ProfileImageInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return setProfileImageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> setProfileImageAsync(global::PKIo.ProfileImageInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_setProfileImage, null, options, request);
      }
      public virtual global::PKIo.Url getProfileImage(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getProfileImage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PKIo.Url getProfileImage(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getProfileImage, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PKIo.Url> getProfileImageAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getProfileImageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PKIo.Url> getProfileImageAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getProfileImage, null, options, request);
      }
      public virtual global::PKIo.Url getProfileImageById(global::PKIo.Id request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getProfileImageById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PKIo.Url getProfileImageById(global::PKIo.Id request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getProfileImageById, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PKIo.Url> getProfileImageByIdAsync(global::PKIo.Id request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getProfileImageByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PKIo.Url> getProfileImageByIdAsync(global::PKIo.Id request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getProfileImageById, null, options, request);
      }
      public virtual global::PKIo.ImageIds createImages(global::PKIo.CreateImageInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createImages(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PKIo.ImageIds createImages(global::PKIo.CreateImageInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_createImages, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PKIo.ImageIds> createImagesAsync(global::PKIo.CreateImageInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createImagesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PKIo.ImageIds> createImagesAsync(global::PKIo.CreateImageInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_createImages, null, options, request);
      }
      public virtual global::PKIo.ImageRecord updateImage(global::PKIo.UpdateImageInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updateImage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PKIo.ImageRecord updateImage(global::PKIo.UpdateImageInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_updateImage, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PKIo.ImageRecord> updateImageAsync(global::PKIo.UpdateImageInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updateImageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PKIo.ImageRecord> updateImageAsync(global::PKIo.UpdateImageInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_updateImage, null, options, request);
      }
      public virtual global::PKIo.Url getImageURL(global::PKIo.Id request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getImageURL(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PKIo.Url getImageURL(global::PKIo.Id request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getImageURL, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PKIo.Url> getImageURLAsync(global::PKIo.Id request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getImageURLAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PKIo.Url> getImageURLAsync(global::PKIo.Id request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getImageURL, null, options, request);
      }
      /// <summary>
      /// returns a zip bundle containing all images for that ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PKIo.ImageBundle getImageBundle(global::PKIo.Id request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getImageBundle(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// returns a zip bundle containing all images for that ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::PKIo.ImageBundle getImageBundle(global::PKIo.Id request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getImageBundle, null, options, request);
      }
      /// <summary>
      /// returns a zip bundle containing all images for that ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PKIo.ImageBundle> getImageBundleAsync(global::PKIo.Id request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getImageBundleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// returns a zip bundle containing all images for that ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::PKIo.ImageBundle> getImageBundleAsync(global::PKIo.Id request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getImageBundle, null, options, request);
      }
      public virtual global::PKIo.ImageRecord getImageData(global::PKIo.Id request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getImageData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PKIo.ImageRecord getImageData(global::PKIo.Id request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getImageData, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PKIo.ImageRecord> getImageDataAsync(global::PKIo.Id request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getImageDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PKIo.ImageRecord> getImageDataAsync(global::PKIo.Id request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getImageData, null, options, request);
      }
      public virtual global::PKIo.Url getLocalizedImageURL(global::PKIo.LocalizedImageInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getLocalizedImageURL(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PKIo.Url getLocalizedImageURL(global::PKIo.LocalizedImageInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getLocalizedImageURL, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PKIo.Url> getLocalizedImageURLAsync(global::PKIo.LocalizedImageInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getLocalizedImageURLAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PKIo.Url> getLocalizedImageURLAsync(global::PKIo.LocalizedImageInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getLocalizedImageURL, null, options, request);
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty deleteImage(global::PKIo.Id request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteImage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty deleteImage(global::PKIo.Id request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_deleteImage, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> deleteImageAsync(global::PKIo.Id request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteImageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> deleteImageAsync(global::PKIo.Id request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_deleteImage, null, options, request);
      }
      public virtual global::PKIo.ImageRecord deleteLocalizedImage(global::PKIo.LocalizedImageInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteLocalizedImage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PKIo.ImageRecord deleteLocalizedImage(global::PKIo.LocalizedImageInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_deleteLocalizedImage, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PKIo.ImageRecord> deleteLocalizedImageAsync(global::PKIo.LocalizedImageInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return deleteLocalizedImageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PKIo.ImageRecord> deleteLocalizedImageAsync(global::PKIo.LocalizedImageInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_deleteLocalizedImage, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::PKIo.ImageRecord> listImagesForUser(global::PKIo.Pagination request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return listImagesForUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::PKIo.ImageRecord> listImagesForUser(global::PKIo.Pagination request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_listImagesForUser, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::PKIo.ImageRecord> listImages(global::PKIo.Pagination request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return listImages(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::PKIo.ImageRecord> listImages(global::PKIo.Pagination request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_listImages, null, options, request);
      }
      public virtual global::PKIo.Count countImages(global::PKIo.Pagination request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return countImages(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PKIo.Count countImages(global::PKIo.Pagination request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_countImages, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PKIo.Count> countImagesAsync(global::PKIo.Pagination request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return countImagesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PKIo.Count> countImagesAsync(global::PKIo.Pagination request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_countImages, null, options, request);
      }
      public virtual global::PKIo.Count countImagesForUser(global::PKIo.Pagination request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return countImagesForUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::PKIo.Count countImagesForUser(global::PKIo.Pagination request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_countImagesForUser, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::PKIo.Count> countImagesForUserAsync(global::PKIo.Pagination request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return countImagesForUserAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::PKIo.Count> countImagesForUserAsync(global::PKIo.Pagination request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_countImagesForUser, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ImagesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ImagesClient(configuration);
      }
    }

  }
}
#endregion
